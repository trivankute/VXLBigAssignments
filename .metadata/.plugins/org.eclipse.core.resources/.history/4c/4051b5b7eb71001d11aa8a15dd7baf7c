/*
 * input_processing.c
 *
 *  Created on: Nov 30, 2022
 *      Author: HELLO SON
 */
#include "input_processing.h"
#include "input_reading.h"
#include "timer.h"
#include "main.h"

#define RED 	0
#define YELLOW 	1
#define GREEN 	2

#define button1 0
#define button2 1
#define button3 2
#define pes_but 3

#define AUTO_RED 	0
#define AUTO_YELLOW 1
#define AUTO_GREEN 	2
#define off 10
static uint8_t lightbufferMod[3]={1,1,1};
static uint8_t lightbufferRun[3]={5,2,3};
int status_1;
int status_2;
int pes_1;
int pes_2;
int time1;
int time2;
int mode;
int initial_flag=1;
void initial()
{
	status_1=AUTO_RED;
	status_2=AUTO_GREEN;
	pes_1=off;
	pes_2=off;
	mode=1;
	time1=lightbufferRun[AUTO_RED];
	time2=lightbufferRun[AUTO_GREEN];
	setTimerRun(1000);
}

void traffic()
{
	if(status_1==AUTO_RED)
	{
		HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
		HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
		if(time1==0)
		{
			status_1=AUTO_GREEN;
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
			time1=lightbufferRun[AUTO_GREEN];
		}
	}
	else if(status_1==AUTO_GREEN)
	{
		HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
		HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
		if(time2==0)
		{
			status_1=AUTO_RED;
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
			time1=lightbufferRun[AUTO_RED];
		}
	}
	if(status_2==AUTO_RED)
	{
		HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
		HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
		if(time2==0)
		{
			status_2=AUTO_GREEN;
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
			time2=lightbufferRun[AUTO_GREEN];
		}
	}
	else if(status_2==AUTO_GREEN)
	{
		HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
		HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
		if(time2==0)
		{
			status_2=AUTO_RED;
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
			time2=lightbufferRun[AUTO_RED];
		}
	}
	if(mode==1 && run_flag==1)
	{
		time1--;
		time2--;
		setTimerRun(1000);
	}
}
void updateMode()
{
	mode++;
	if(mode>3)
	{
		mode=1;
	}
}
void increase(int index)
{
	lightbufferMod[index]++;
	if(lightbufferMod[index]>99)
	{
		lightbufferMod[index]=1;
	}
}
void copyModtoRun()
{
	for(int i=0;i<2;i++)
	{
		lightbufferRun[i]=lightbufferMod[i];
	}
}
void checkpes()
{
	if(pes_1==AUTO_RED)
	{
		HAL_GPIO_WritePin(PES_1_GPIO_Port, PES_1_Pin, RES)
	}
}
void fsm_automatic()
{
	if(is_button_pressed(button1))
	{
		updateMode();
		initial_flag=1;
	}
	if(is_button_pressed(pes_but))
	{
		setTimerPesBut(2000);
		if(status_1==AUTO_RED || status_1==MAN_RED)
		{
			pes_1=AUTO_GREEN;
		}
		else pes_1=AUTO_RED;
		if(status_2==AUTO_RED || status_2==MAN_RED)
		{
			pes_2=AUTO_GREEN;
		}
		else pes_2=AUTO_RED;
	}
	switch(mode)
	{
	case 1:
		if(initial_flag==1)
		{
			initial_flag=0;
			status_1=AUTO_RED;
			status_2=AUTO_GREEN;
			time1=lightbufferRun[AUTO_RED];
			time2=lightbufferRun[AUTO_GREEN];
		}
		else
		{
			traffic();
			//send signal
		}
		break;
	case 2:
		break;
	case 3:
		break;
	}
}
