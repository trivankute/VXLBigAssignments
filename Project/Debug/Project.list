
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004678  08004678  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08004678  08004678  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004678  08004678  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000098  08004718  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08004718  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efd1  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a8  00000000  00000000  0002f092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00031440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00032128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018583  00000000  00000000  00032d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3d5  00000000  00000000  0004b2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af65  00000000  00000000  00059690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e45f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003908  00000000  00000000  000e4648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080045e4 	.word	0x080045e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080045e4 	.word	0x080045e4

0800014c <initial>:
int initial_flag=1;

UART_HandleTypeDef huart2;
TIM_HandleTypeDef htim3;
void initial()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	status_1=AUTO_RED;
 8000150:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <initial+0x38>)
 8000152:	2200      	movs	r2, #0
 8000154:	601a      	str	r2, [r3, #0]
	status_2=AUTO_GREEN;
 8000156:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <initial+0x3c>)
 8000158:	2202      	movs	r2, #2
 800015a:	601a      	str	r2, [r3, #0]
	mode=1;
 800015c:	4b0b      	ldr	r3, [pc, #44]	; (800018c <initial+0x40>)
 800015e:	2201      	movs	r2, #1
 8000160:	601a      	str	r2, [r3, #0]
	time1=lightbufferRun[AUTO_RED];
 8000162:	4b0b      	ldr	r3, [pc, #44]	; (8000190 <initial+0x44>)
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	461a      	mov	r2, r3
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <initial+0x48>)
 800016a:	601a      	str	r2, [r3, #0]
	time2=lightbufferRun[AUTO_GREEN];
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <initial+0x44>)
 800016e:	789b      	ldrb	r3, [r3, #2]
 8000170:	461a      	mov	r2, r3
 8000172:	4b09      	ldr	r3, [pc, #36]	; (8000198 <initial+0x4c>)
 8000174:	601a      	str	r2, [r3, #0]
	setTimerRun(1000);
 8000176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800017a:	f001 f819 	bl	80011b0 <setTimerRun>
}
 800017e:	bf00      	nop
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	200000fc 	.word	0x200000fc
 8000188:	2000014c 	.word	0x2000014c
 800018c:	20000148 	.word	0x20000148
 8000190:	20000004 	.word	0x20000004
 8000194:	20000150 	.word	0x20000150
 8000198:	20000198 	.word	0x20000198

0800019c <traffic>:

void traffic()
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	if(status_1==AUTO_RED)
 80001a0:	4b80      	ldr	r3, [pc, #512]	; (80003a4 <traffic+0x208>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d122      	bne.n	80001ee <traffic+0x52>
	{
		HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
 80001a8:	2201      	movs	r2, #1
 80001aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ae:	487e      	ldr	r0, [pc, #504]	; (80003a8 <traffic+0x20c>)
 80001b0:	f001 fccb 	bl	8001b4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2108      	movs	r1, #8
 80001b8:	487c      	ldr	r0, [pc, #496]	; (80003ac <traffic+0x210>)
 80001ba:	f001 fcc6 	bl	8001b4a <HAL_GPIO_WritePin>
		if(time1==0)
 80001be:	4b7c      	ldr	r3, [pc, #496]	; (80003b0 <traffic+0x214>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d160      	bne.n	8000288 <traffic+0xec>
		{
			status_1=AUTO_GREEN;
 80001c6:	4b77      	ldr	r3, [pc, #476]	; (80003a4 <traffic+0x208>)
 80001c8:	2202      	movs	r2, #2
 80001ca:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d2:	4875      	ldr	r0, [pc, #468]	; (80003a8 <traffic+0x20c>)
 80001d4:	f001 fcb9 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2108      	movs	r1, #8
 80001dc:	4873      	ldr	r0, [pc, #460]	; (80003ac <traffic+0x210>)
 80001de:	f001 fcb4 	bl	8001b4a <HAL_GPIO_WritePin>
			time1=lightbufferRun[AUTO_GREEN];
 80001e2:	4b74      	ldr	r3, [pc, #464]	; (80003b4 <traffic+0x218>)
 80001e4:	789b      	ldrb	r3, [r3, #2]
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b71      	ldr	r3, [pc, #452]	; (80003b0 <traffic+0x214>)
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	e04c      	b.n	8000288 <traffic+0xec>
		}
	}
	else if(status_1==AUTO_GREEN)
 80001ee:	4b6d      	ldr	r3, [pc, #436]	; (80003a4 <traffic+0x208>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b02      	cmp	r3, #2
 80001f4:	d122      	bne.n	800023c <traffic+0xa0>
	{
		HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fc:	486a      	ldr	r0, [pc, #424]	; (80003a8 <traffic+0x20c>)
 80001fe:	f001 fca4 	bl	8001b4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
 8000202:	2201      	movs	r2, #1
 8000204:	2108      	movs	r1, #8
 8000206:	4869      	ldr	r0, [pc, #420]	; (80003ac <traffic+0x210>)
 8000208:	f001 fc9f 	bl	8001b4a <HAL_GPIO_WritePin>
		if(time1==0)
 800020c:	4b68      	ldr	r3, [pc, #416]	; (80003b0 <traffic+0x214>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d139      	bne.n	8000288 <traffic+0xec>
		{
			status_1=AUTO_YELLOW;
 8000214:	4b63      	ldr	r3, [pc, #396]	; (80003a4 <traffic+0x208>)
 8000216:	2201      	movs	r2, #1
 8000218:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	4861      	ldr	r0, [pc, #388]	; (80003a8 <traffic+0x20c>)
 8000222:	f001 fc92 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
 8000226:	2201      	movs	r2, #1
 8000228:	2108      	movs	r1, #8
 800022a:	4860      	ldr	r0, [pc, #384]	; (80003ac <traffic+0x210>)
 800022c:	f001 fc8d 	bl	8001b4a <HAL_GPIO_WritePin>
			time1=lightbufferRun[AUTO_YELLOW];
 8000230:	4b60      	ldr	r3, [pc, #384]	; (80003b4 <traffic+0x218>)
 8000232:	785b      	ldrb	r3, [r3, #1]
 8000234:	461a      	mov	r2, r3
 8000236:	4b5e      	ldr	r3, [pc, #376]	; (80003b0 <traffic+0x214>)
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	e025      	b.n	8000288 <traffic+0xec>
		}
	}
	else if(status_1==AUTO_YELLOW)
 800023c:	4b59      	ldr	r3, [pc, #356]	; (80003a4 <traffic+0x208>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d121      	bne.n	8000288 <traffic+0xec>
	{
		HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800024a:	4857      	ldr	r0, [pc, #348]	; (80003a8 <traffic+0x20c>)
 800024c:	f001 fc7d 	bl	8001b4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
 8000250:	2201      	movs	r2, #1
 8000252:	2108      	movs	r1, #8
 8000254:	4855      	ldr	r0, [pc, #340]	; (80003ac <traffic+0x210>)
 8000256:	f001 fc78 	bl	8001b4a <HAL_GPIO_WritePin>
		if(time1==0)
 800025a:	4b55      	ldr	r3, [pc, #340]	; (80003b0 <traffic+0x214>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d112      	bne.n	8000288 <traffic+0xec>
		{
			status_1=AUTO_RED;
 8000262:	4b50      	ldr	r3, [pc, #320]	; (80003a4 <traffic+0x208>)
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800026e:	484e      	ldr	r0, [pc, #312]	; (80003a8 <traffic+0x20c>)
 8000270:	f001 fc6b 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	2108      	movs	r1, #8
 8000278:	484c      	ldr	r0, [pc, #304]	; (80003ac <traffic+0x210>)
 800027a:	f001 fc66 	bl	8001b4a <HAL_GPIO_WritePin>
			time1=lightbufferRun[AUTO_RED];
 800027e:	4b4d      	ldr	r3, [pc, #308]	; (80003b4 <traffic+0x218>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	461a      	mov	r2, r3
 8000284:	4b4a      	ldr	r3, [pc, #296]	; (80003b0 <traffic+0x214>)
 8000286:	601a      	str	r2, [r3, #0]
		}
	}
	if(status_2==AUTO_RED)
 8000288:	4b4b      	ldr	r3, [pc, #300]	; (80003b8 <traffic+0x21c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d120      	bne.n	80002d2 <traffic+0x136>
	{
		HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
 8000290:	2201      	movs	r2, #1
 8000292:	2120      	movs	r1, #32
 8000294:	4845      	ldr	r0, [pc, #276]	; (80003ac <traffic+0x210>)
 8000296:	f001 fc58 	bl	8001b4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	2110      	movs	r1, #16
 800029e:	4843      	ldr	r0, [pc, #268]	; (80003ac <traffic+0x210>)
 80002a0:	f001 fc53 	bl	8001b4a <HAL_GPIO_WritePin>
		if(time2==0)
 80002a4:	4b45      	ldr	r3, [pc, #276]	; (80003bc <traffic+0x220>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d15b      	bne.n	8000364 <traffic+0x1c8>
		{
			status_2=AUTO_GREEN;
 80002ac:	4b42      	ldr	r3, [pc, #264]	; (80003b8 <traffic+0x21c>)
 80002ae:	2202      	movs	r2, #2
 80002b0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2120      	movs	r1, #32
 80002b6:	483d      	ldr	r0, [pc, #244]	; (80003ac <traffic+0x210>)
 80002b8:	f001 fc47 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	2110      	movs	r1, #16
 80002c0:	483a      	ldr	r0, [pc, #232]	; (80003ac <traffic+0x210>)
 80002c2:	f001 fc42 	bl	8001b4a <HAL_GPIO_WritePin>
			time2=lightbufferRun[AUTO_GREEN];
 80002c6:	4b3b      	ldr	r3, [pc, #236]	; (80003b4 <traffic+0x218>)
 80002c8:	789b      	ldrb	r3, [r3, #2]
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b3b      	ldr	r3, [pc, #236]	; (80003bc <traffic+0x220>)
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	e048      	b.n	8000364 <traffic+0x1c8>
		}
	}
	else if(status_2==AUTO_GREEN)
 80002d2:	4b39      	ldr	r3, [pc, #228]	; (80003b8 <traffic+0x21c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d120      	bne.n	800031c <traffic+0x180>
	{
		HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2120      	movs	r1, #32
 80002de:	4833      	ldr	r0, [pc, #204]	; (80003ac <traffic+0x210>)
 80002e0:	f001 fc33 	bl	8001b4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	2110      	movs	r1, #16
 80002e8:	4830      	ldr	r0, [pc, #192]	; (80003ac <traffic+0x210>)
 80002ea:	f001 fc2e 	bl	8001b4a <HAL_GPIO_WritePin>
		if(time2==0)
 80002ee:	4b33      	ldr	r3, [pc, #204]	; (80003bc <traffic+0x220>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d136      	bne.n	8000364 <traffic+0x1c8>
		{
			status_2=AUTO_YELLOW;
 80002f6:	4b30      	ldr	r3, [pc, #192]	; (80003b8 <traffic+0x21c>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2120      	movs	r1, #32
 8000300:	482a      	ldr	r0, [pc, #168]	; (80003ac <traffic+0x210>)
 8000302:	f001 fc22 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
 8000306:	2201      	movs	r2, #1
 8000308:	2110      	movs	r1, #16
 800030a:	4828      	ldr	r0, [pc, #160]	; (80003ac <traffic+0x210>)
 800030c:	f001 fc1d 	bl	8001b4a <HAL_GPIO_WritePin>
			time2=lightbufferRun[AUTO_YELLOW];
 8000310:	4b28      	ldr	r3, [pc, #160]	; (80003b4 <traffic+0x218>)
 8000312:	785b      	ldrb	r3, [r3, #1]
 8000314:	461a      	mov	r2, r3
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <traffic+0x220>)
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	e023      	b.n	8000364 <traffic+0x1c8>
		}
	}
	else if(status_2==AUTO_YELLOW)
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <traffic+0x21c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d11f      	bne.n	8000364 <traffic+0x1c8>
	{
		HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
 8000324:	2201      	movs	r2, #1
 8000326:	2120      	movs	r1, #32
 8000328:	4820      	ldr	r0, [pc, #128]	; (80003ac <traffic+0x210>)
 800032a:	f001 fc0e 	bl	8001b4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2110      	movs	r1, #16
 8000332:	481e      	ldr	r0, [pc, #120]	; (80003ac <traffic+0x210>)
 8000334:	f001 fc09 	bl	8001b4a <HAL_GPIO_WritePin>
		if(time2==0)
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <traffic+0x220>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d111      	bne.n	8000364 <traffic+0x1c8>
		{
			status_2=AUTO_RED;
 8000340:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <traffic+0x21c>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2120      	movs	r1, #32
 800034a:	4818      	ldr	r0, [pc, #96]	; (80003ac <traffic+0x210>)
 800034c:	f001 fbfd 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2110      	movs	r1, #16
 8000354:	4815      	ldr	r0, [pc, #84]	; (80003ac <traffic+0x210>)
 8000356:	f001 fbf8 	bl	8001b4a <HAL_GPIO_WritePin>
			time2=lightbufferRun[AUTO_RED];
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <traffic+0x218>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	461a      	mov	r2, r3
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <traffic+0x220>)
 8000362:	601a      	str	r2, [r3, #0]
		}
	}
	if(mode==1 && run_flag==1)
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <traffic+0x224>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d119      	bne.n	80003a0 <traffic+0x204>
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <traffic+0x228>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d115      	bne.n	80003a0 <traffic+0x204>
	{
		send_uart(time1, time2);
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <traffic+0x214>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a10      	ldr	r2, [pc, #64]	; (80003bc <traffic+0x220>)
 800037a:	6812      	ldr	r2, [r2, #0]
 800037c:	4611      	mov	r1, r2
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fb86 	bl	8000a90 <send_uart>
		time1--;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <traffic+0x214>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	3b01      	subs	r3, #1
 800038a:	4a09      	ldr	r2, [pc, #36]	; (80003b0 <traffic+0x214>)
 800038c:	6013      	str	r3, [r2, #0]
		time2--;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <traffic+0x220>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a09      	ldr	r2, [pc, #36]	; (80003bc <traffic+0x220>)
 8000396:	6013      	str	r3, [r2, #0]
		setTimerRun(1000);
 8000398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039c:	f000 ff08 	bl	80011b0 <setTimerRun>
	}
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	200000fc 	.word	0x200000fc
 80003a8:	40010800 	.word	0x40010800
 80003ac:	40010c00 	.word	0x40010c00
 80003b0:	20000150 	.word	0x20000150
 80003b4:	20000004 	.word	0x20000004
 80003b8:	2000014c 	.word	0x2000014c
 80003bc:	20000198 	.word	0x20000198
 80003c0:	20000148 	.word	0x20000148
 80003c4:	200000d4 	.word	0x200000d4

080003c8 <updateMode>:
void updateMode()
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	mode++;
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <updateMode+0x24>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	4a06      	ldr	r2, [pc, #24]	; (80003ec <updateMode+0x24>)
 80003d4:	6013      	str	r3, [r2, #0]
	if(mode>4)
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <updateMode+0x24>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b04      	cmp	r3, #4
 80003dc:	dd02      	ble.n	80003e4 <updateMode+0x1c>
	{
		mode=1;
 80003de:	4b03      	ldr	r3, [pc, #12]	; (80003ec <updateMode+0x24>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	601a      	str	r2, [r3, #0]
	}
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	20000148 	.word	0x20000148

080003f0 <increase>:
void increase(int index)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	lightbufferMod[index]++;
 80003f8:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <increase+0x40>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	b2d9      	uxtb	r1, r3
 8000404:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <increase+0x40>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	460a      	mov	r2, r1
 800040c:	701a      	strb	r2, [r3, #0]
	if(lightbufferMod[index]>99)
 800040e:	4a08      	ldr	r2, [pc, #32]	; (8000430 <increase+0x40>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4413      	add	r3, r2
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b63      	cmp	r3, #99	; 0x63
 8000418:	d904      	bls.n	8000424 <increase+0x34>
	{
		lightbufferMod[index]=1;
 800041a:	4a05      	ldr	r2, [pc, #20]	; (8000430 <increase+0x40>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	2201      	movs	r2, #1
 8000422:	701a      	strb	r2, [r3, #0]
	}
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000000 	.word	0x20000000

08000434 <copyModtoRun>:
void copyModtoRun()
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
	for(int i=0;i<2;i++)
 800043a:	2300      	movs	r3, #0
 800043c:	607b      	str	r3, [r7, #4]
 800043e:	e00b      	b.n	8000458 <copyModtoRun+0x24>
	{
		lightbufferRun[i]=lightbufferMod[i];
 8000440:	4a0a      	ldr	r2, [pc, #40]	; (800046c <copyModtoRun+0x38>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	7819      	ldrb	r1, [r3, #0]
 8000448:	4a09      	ldr	r2, [pc, #36]	; (8000470 <copyModtoRun+0x3c>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	460a      	mov	r2, r1
 8000450:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<2;i++)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3301      	adds	r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b01      	cmp	r3, #1
 800045c:	ddf0      	ble.n	8000440 <copyModtoRun+0xc>
	}
}
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000000 	.word	0x20000000
 8000470:	20000004 	.word	0x20000004

08000474 <blinkLed>:
void blinkLed(int led)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	if((mode!=1) && (blink_flag==1))
 800047c:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <blinkLed+0x84>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d034      	beq.n	80004ee <blinkLed+0x7a>
 8000484:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <blinkLed+0x88>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d130      	bne.n	80004ee <blinkLed+0x7a>
	{
		if(led==RED)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d109      	bne.n	80004a6 <blinkLed+0x32>
		{
			HAL_GPIO_TogglePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin);
 8000492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000496:	481a      	ldr	r0, [pc, #104]	; (8000500 <blinkLed+0x8c>)
 8000498:	f001 fb6f 	bl	8001b7a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin);
 800049c:	2120      	movs	r1, #32
 800049e:	4819      	ldr	r0, [pc, #100]	; (8000504 <blinkLed+0x90>)
 80004a0:	f001 fb6b 	bl	8001b7a <HAL_GPIO_TogglePin>
 80004a4:	e01f      	b.n	80004e6 <blinkLed+0x72>
		}
		else if(led==YELLOW)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d111      	bne.n	80004d0 <blinkLed+0x5c>
		{
			HAL_GPIO_TogglePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin);
 80004ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b0:	4813      	ldr	r0, [pc, #76]	; (8000500 <blinkLed+0x8c>)
 80004b2:	f001 fb62 	bl	8001b7a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin);
 80004b6:	2120      	movs	r1, #32
 80004b8:	4812      	ldr	r0, [pc, #72]	; (8000504 <blinkLed+0x90>)
 80004ba:	f001 fb5e 	bl	8001b7a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin);
 80004be:	2108      	movs	r1, #8
 80004c0:	4810      	ldr	r0, [pc, #64]	; (8000504 <blinkLed+0x90>)
 80004c2:	f001 fb5a 	bl	8001b7a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin);
 80004c6:	2110      	movs	r1, #16
 80004c8:	480e      	ldr	r0, [pc, #56]	; (8000504 <blinkLed+0x90>)
 80004ca:	f001 fb56 	bl	8001b7a <HAL_GPIO_TogglePin>
 80004ce:	e00a      	b.n	80004e6 <blinkLed+0x72>
		}
		else if(led==GREEN)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d107      	bne.n	80004e6 <blinkLed+0x72>
		{
			HAL_GPIO_TogglePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin);
 80004d6:	2108      	movs	r1, #8
 80004d8:	480a      	ldr	r0, [pc, #40]	; (8000504 <blinkLed+0x90>)
 80004da:	f001 fb4e 	bl	8001b7a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin);
 80004de:	2110      	movs	r1, #16
 80004e0:	4808      	ldr	r0, [pc, #32]	; (8000504 <blinkLed+0x90>)
 80004e2:	f001 fb4a 	bl	8001b7a <HAL_GPIO_TogglePin>
		}
		setTimerBlink(500);
 80004e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ea:	f000 fe99 	bl	8001220 <setTimerBlink>
	}
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000148 	.word	0x20000148
 80004fc:	200000e4 	.word	0x200000e4
 8000500:	40010800 	.word	0x40010800
 8000504:	40010c00 	.word	0x40010c00

08000508 <checkpes>:
void checkpes()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	if(status_1==AUTO_RED || status_1==MAN_RED)
 800050c:	4b20      	ldr	r3, [pc, #128]	; (8000590 <checkpes+0x88>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d003      	beq.n	800051c <checkpes+0x14>
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <checkpes+0x88>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b0b      	cmp	r3, #11
 800051a:	d10c      	bne.n	8000536 <checkpes+0x2e>
	{
		HAL_GPIO_WritePin(PES_RED_GPIO_Port, PES_RED_Pin, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000522:	481c      	ldr	r0, [pc, #112]	; (8000594 <checkpes+0x8c>)
 8000524:	f001 fb11 	bl	8001b4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PES_GREEN_GPIO_Port, PES_GREEN_Pin, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052e:	481a      	ldr	r0, [pc, #104]	; (8000598 <checkpes+0x90>)
 8000530:	f001 fb0b 	bl	8001b4a <HAL_GPIO_WritePin>
 8000534:	e029      	b.n	800058a <checkpes+0x82>
	}
	else if(status_1==AUTO_GREEN || status_1==MAN_GREEN)
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <checkpes+0x88>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d003      	beq.n	8000546 <checkpes+0x3e>
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <checkpes+0x88>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b0d      	cmp	r3, #13
 8000544:	d10c      	bne.n	8000560 <checkpes+0x58>
	{
		HAL_GPIO_WritePin(PES_RED_GPIO_Port, PES_RED_Pin, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054c:	4811      	ldr	r0, [pc, #68]	; (8000594 <checkpes+0x8c>)
 800054e:	f001 fafc 	bl	8001b4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PES_GREEN_GPIO_Port, PES_GREEN_Pin, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000558:	480f      	ldr	r0, [pc, #60]	; (8000598 <checkpes+0x90>)
 800055a:	f001 faf6 	bl	8001b4a <HAL_GPIO_WritePin>
 800055e:	e014      	b.n	800058a <checkpes+0x82>
	}
	else if(status_1==AUTO_YELLOW || status_1==MAN_YELLOW)
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <checkpes+0x88>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d003      	beq.n	8000570 <checkpes+0x68>
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <checkpes+0x88>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b0c      	cmp	r3, #12
 800056e:	d10c      	bne.n	800058a <checkpes+0x82>
	{
		HAL_GPIO_WritePin(PES_RED_GPIO_Port, PES_RED_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <checkpes+0x8c>)
 8000578:	f001 fae7 	bl	8001b4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PES_GREEN_GPIO_Port, PES_GREEN_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <checkpes+0x90>)
 8000584:	f001 fae1 	bl	8001b4a <HAL_GPIO_WritePin>
	}
}
 8000588:	e7ff      	b.n	800058a <checkpes+0x82>
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200000fc 	.word	0x200000fc
 8000594:	40010c00 	.word	0x40010c00
 8000598:	40010800 	.word	0x40010800

0800059c <fsm_automatic>:
uint8_t str[30]="\0";
int init_for_pes=0;
uint8_t buzzer=0;
int pes_start=0;
void fsm_automatic()
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	if(is_button_pressed(button1))
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 fa2e 	bl	8000a04 <is_button_pressed>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d004      	beq.n	80005b8 <fsm_automatic+0x1c>
	{
		updateMode();
 80005ae:	f7ff ff0b 	bl	80003c8 <updateMode>
		initial_flag=1;
 80005b2:	4b98      	ldr	r3, [pc, #608]	; (8000814 <fsm_automatic+0x278>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(pes_but))
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 fa23 	bl	8000a04 <is_button_pressed>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d016      	beq.n	80005f2 <fsm_automatic+0x56>
	{
		int all_time=(lightbufferRun[0]+lightbufferRun[1]+lightbufferRun[2])*2000;
 80005c4:	4b94      	ldr	r3, [pc, #592]	; (8000818 <fsm_automatic+0x27c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b93      	ldr	r3, [pc, #588]	; (8000818 <fsm_automatic+0x27c>)
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a91      	ldr	r2, [pc, #580]	; (8000818 <fsm_automatic+0x27c>)
 80005d2:	7892      	ldrb	r2, [r2, #2]
 80005d4:	4413      	add	r3, r2
 80005d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005da:	fb02 f303 	mul.w	r3, r2, r3
 80005de:	607b      	str	r3, [r7, #4]
		setTimerPesBut(all_time);
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 fe01 	bl	80011e8 <setTimerPesBut>
		pes_start=1;
 80005e6:	4b8d      	ldr	r3, [pc, #564]	; (800081c <fsm_automatic+0x280>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
		buzzer_flag=1;
 80005ec:	4b8c      	ldr	r3, [pc, #560]	; (8000820 <fsm_automatic+0x284>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
	}
	if(pes_start==1)
 80005f2:	4b8a      	ldr	r3, [pc, #552]	; (800081c <fsm_automatic+0x280>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d114      	bne.n	8000624 <fsm_automatic+0x88>
	{
		checkpes();
 80005fa:	f7ff ff85 	bl	8000508 <checkpes>
		buzzer_boi(buzzer);
 80005fe:	4b89      	ldr	r3, [pc, #548]	; (8000824 <fsm_automatic+0x288>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fa34 	bl	8000a70 <buzzer_boi>
		if(buzzer_flag==1)
 8000608:	4b85      	ldr	r3, [pc, #532]	; (8000820 <fsm_automatic+0x284>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d109      	bne.n	8000624 <fsm_automatic+0x88>
		{
			buzzer+=30;
 8000610:	4b84      	ldr	r3, [pc, #528]	; (8000824 <fsm_automatic+0x288>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	331e      	adds	r3, #30
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b82      	ldr	r3, [pc, #520]	; (8000824 <fsm_automatic+0x288>)
 800061a:	701a      	strb	r2, [r3, #0]
			setTimerBuzzer(1000);
 800061c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000620:	f000 fe1a 	bl	8001258 <setTimerBuzzer>
		}
	}
	if(pes_flag==1)
 8000624:	4b80      	ldr	r3, [pc, #512]	; (8000828 <fsm_automatic+0x28c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d111      	bne.n	8000650 <fsm_automatic+0xb4>
	{
		HAL_GPIO_WritePin(PES_RED_GPIO_Port, PES_RED_Pin, RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000632:	487e      	ldr	r0, [pc, #504]	; (800082c <fsm_automatic+0x290>)
 8000634:	f001 fa89 	bl	8001b4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PES_GREEN_GPIO_Port, PES_GREEN_Pin, RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063e:	487c      	ldr	r0, [pc, #496]	; (8000830 <fsm_automatic+0x294>)
 8000640:	f001 fa83 	bl	8001b4a <HAL_GPIO_WritePin>
		buzzer=0;
 8000644:	4b77      	ldr	r3, [pc, #476]	; (8000824 <fsm_automatic+0x288>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
		pes_start=0;
 800064a:	4b74      	ldr	r3, [pc, #464]	; (800081c <fsm_automatic+0x280>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
	}
	switch(mode)
 8000650:	4b78      	ldr	r3, [pc, #480]	; (8000834 <fsm_automatic+0x298>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3b01      	subs	r3, #1
 8000656:	2b03      	cmp	r3, #3
 8000658:	f200 8152 	bhi.w	8000900 <fsm_automatic+0x364>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <fsm_automatic+0xc8>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	08000675 	.word	0x08000675
 8000668:	080006b1 	.word	0x080006b1
 800066c:	08000763 	.word	0x08000763
 8000670:	08000851 	.word	0x08000851
	{
	case 1:
		if(initial_flag==1)
 8000674:	4b67      	ldr	r3, [pc, #412]	; (8000814 <fsm_automatic+0x278>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d116      	bne.n	80006aa <fsm_automatic+0x10e>
		{
			initial_flag=0;
 800067c:	4b65      	ldr	r3, [pc, #404]	; (8000814 <fsm_automatic+0x278>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
			status_1=AUTO_RED;
 8000682:	4b6d      	ldr	r3, [pc, #436]	; (8000838 <fsm_automatic+0x29c>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
			status_2=AUTO_GREEN;
 8000688:	4b6c      	ldr	r3, [pc, #432]	; (800083c <fsm_automatic+0x2a0>)
 800068a:	2202      	movs	r2, #2
 800068c:	601a      	str	r2, [r3, #0]
			time1=lightbufferRun[AUTO_RED];
 800068e:	4b62      	ldr	r3, [pc, #392]	; (8000818 <fsm_automatic+0x27c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	4b6a      	ldr	r3, [pc, #424]	; (8000840 <fsm_automatic+0x2a4>)
 8000696:	601a      	str	r2, [r3, #0]
			time2=lightbufferRun[AUTO_GREEN];
 8000698:	4b5f      	ldr	r3, [pc, #380]	; (8000818 <fsm_automatic+0x27c>)
 800069a:	789b      	ldrb	r3, [r3, #2]
 800069c:	461a      	mov	r2, r3
 800069e:	4b69      	ldr	r3, [pc, #420]	; (8000844 <fsm_automatic+0x2a8>)
 80006a0:	601a      	str	r2, [r3, #0]
			setTimerRun(1000);
 80006a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a6:	f000 fd83 	bl	80011b0 <setTimerRun>
		}
		traffic();
 80006aa:	f7ff fd77 	bl	800019c <traffic>
		//send signal

		break;
 80006ae:	e12e      	b.n	800090e <fsm_automatic+0x372>
	case 2:
		if(initial_flag==1)
 80006b0:	4b58      	ldr	r3, [pc, #352]	; (8000814 <fsm_automatic+0x278>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d124      	bne.n	8000702 <fsm_automatic+0x166>
		{
			initial_flag=0;
 80006b8:	4b56      	ldr	r3, [pc, #344]	; (8000814 <fsm_automatic+0x278>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 80006be:	f241 3088 	movw	r0, #5000	; 0x1388
 80006c2:	f000 fd59 	bl	8001178 <setTimerReset>
			status_1=MAN_RED;
 80006c6:	4b5c      	ldr	r3, [pc, #368]	; (8000838 <fsm_automatic+0x29c>)
 80006c8:	220b      	movs	r2, #11
 80006ca:	601a      	str	r2, [r3, #0]
			status_2=MAN_RED;
 80006cc:	4b5b      	ldr	r3, [pc, #364]	; (800083c <fsm_automatic+0x2a0>)
 80006ce:	220b      	movs	r2, #11
 80006d0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d8:	4855      	ldr	r0, [pc, #340]	; (8000830 <fsm_automatic+0x294>)
 80006da:	f001 fa36 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2120      	movs	r1, #32
 80006e2:	4852      	ldr	r0, [pc, #328]	; (800082c <fsm_automatic+0x290>)
 80006e4:	f001 fa31 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2108      	movs	r1, #8
 80006ec:	484f      	ldr	r0, [pc, #316]	; (800082c <fsm_automatic+0x290>)
 80006ee:	f001 fa2c 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2110      	movs	r1, #16
 80006f6:	484d      	ldr	r0, [pc, #308]	; (800082c <fsm_automatic+0x290>)
 80006f8:	f001 fa27 	bl	8001b4a <HAL_GPIO_WritePin>
			blink_flag=1;
 80006fc:	4b52      	ldr	r3, [pc, #328]	; (8000848 <fsm_automatic+0x2ac>)
 80006fe:	2201      	movs	r2, #1
 8000700:	601a      	str	r2, [r3, #0]
		}
		blinkLed(RED);
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff feb6 	bl	8000474 <blinkLed>
		if(is_button_pressed(button2))
 8000708:	2001      	movs	r0, #1
 800070a:	f000 f97b 	bl	8000a04 <is_button_pressed>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00c      	beq.n	800072e <fsm_automatic+0x192>
		{
			status_1=MAN_RED;
 8000714:	4b48      	ldr	r3, [pc, #288]	; (8000838 <fsm_automatic+0x29c>)
 8000716:	220b      	movs	r2, #11
 8000718:	601a      	str	r2, [r3, #0]
			status_2=MAN_RED;
 800071a:	4b48      	ldr	r3, [pc, #288]	; (800083c <fsm_automatic+0x2a0>)
 800071c:	220b      	movs	r2, #11
 800071e:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 8000720:	f241 3088 	movw	r0, #5000	; 0x1388
 8000724:	f000 fd28 	bl	8001178 <setTimerReset>
			increase(RED);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff fe61 	bl	80003f0 <increase>
		}
		if(is_button_pressed(button3))
 800072e:	2002      	movs	r0, #2
 8000730:	f000 f968 	bl	8000a04 <is_button_pressed>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d007      	beq.n	800074a <fsm_automatic+0x1ae>
		{
			copyModtoRun();
 800073a:	f7ff fe7b 	bl	8000434 <copyModtoRun>
			mode=1;
 800073e:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <fsm_automatic+0x298>)
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 8000744:	4b33      	ldr	r3, [pc, #204]	; (8000814 <fsm_automatic+0x278>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
		}
		if(reset_flag==1)
 800074a:	4b40      	ldr	r3, [pc, #256]	; (800084c <fsm_automatic+0x2b0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	f040 80d8 	bne.w	8000904 <fsm_automatic+0x368>
		{
			mode=1;
 8000754:	4b37      	ldr	r3, [pc, #220]	; (8000834 <fsm_automatic+0x298>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 800075a:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <fsm_automatic+0x278>)
 800075c:	2201      	movs	r2, #1
 800075e:	601a      	str	r2, [r3, #0]
		}

		//send signal
		break;
 8000760:	e0d0      	b.n	8000904 <fsm_automatic+0x368>
	case 3:
		if(initial_flag==1)
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <fsm_automatic+0x278>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d124      	bne.n	80007b4 <fsm_automatic+0x218>
		{
			initial_flag=0;
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <fsm_automatic+0x278>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 8000770:	f241 3088 	movw	r0, #5000	; 0x1388
 8000774:	f000 fd00 	bl	8001178 <setTimerReset>
			status_1=MAN_YELLOW;
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <fsm_automatic+0x29c>)
 800077a:	220c      	movs	r2, #12
 800077c:	601a      	str	r2, [r3, #0]
			status_2=MAN_YELLOW;
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <fsm_automatic+0x2a0>)
 8000780:	220c      	movs	r2, #12
 8000782:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078a:	4829      	ldr	r0, [pc, #164]	; (8000830 <fsm_automatic+0x294>)
 800078c:	f001 f9dd 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2120      	movs	r1, #32
 8000794:	4825      	ldr	r0, [pc, #148]	; (800082c <fsm_automatic+0x290>)
 8000796:	f001 f9d8 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2108      	movs	r1, #8
 800079e:	4823      	ldr	r0, [pc, #140]	; (800082c <fsm_automatic+0x290>)
 80007a0:	f001 f9d3 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2110      	movs	r1, #16
 80007a8:	4820      	ldr	r0, [pc, #128]	; (800082c <fsm_automatic+0x290>)
 80007aa:	f001 f9ce 	bl	8001b4a <HAL_GPIO_WritePin>
			blink_flag=1;
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <fsm_automatic+0x2ac>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
		}
		blinkLed(YELLOW);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff fe5d 	bl	8000474 <blinkLed>
		if(is_button_pressed(button2))
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 f922 	bl	8000a04 <is_button_pressed>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00c      	beq.n	80007e0 <fsm_automatic+0x244>
		{
			status_1=MAN_YELLOW;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <fsm_automatic+0x29c>)
 80007c8:	220c      	movs	r2, #12
 80007ca:	601a      	str	r2, [r3, #0]
			status_2=MAN_YELLOW;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <fsm_automatic+0x2a0>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 80007d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80007d6:	f000 fccf 	bl	8001178 <setTimerReset>
			increase(YELLOW);
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff fe08 	bl	80003f0 <increase>
		}
		if(is_button_pressed(button3))
 80007e0:	2002      	movs	r0, #2
 80007e2:	f000 f90f 	bl	8000a04 <is_button_pressed>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d007      	beq.n	80007fc <fsm_automatic+0x260>
		{
			copyModtoRun();
 80007ec:	f7ff fe22 	bl	8000434 <copyModtoRun>
			mode=1;
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <fsm_automatic+0x298>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <fsm_automatic+0x278>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
		}
		if(reset_flag==1)
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <fsm_automatic+0x2b0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	f040 8081 	bne.w	8000908 <fsm_automatic+0x36c>
		{
			mode=1;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <fsm_automatic+0x298>)
 8000808:	2201      	movs	r2, #1
 800080a:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 800080c:	4b01      	ldr	r3, [pc, #4]	; (8000814 <fsm_automatic+0x278>)
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
		}
		//send signal

		break;
 8000812:	e079      	b.n	8000908 <fsm_automatic+0x36c>
 8000814:	20000008 	.word	0x20000008
 8000818:	20000004 	.word	0x20000004
 800081c:	200000b8 	.word	0x200000b8
 8000820:	200000ec 	.word	0x200000ec
 8000824:	200000b4 	.word	0x200000b4
 8000828:	200000dc 	.word	0x200000dc
 800082c:	40010c00 	.word	0x40010c00
 8000830:	40010800 	.word	0x40010800
 8000834:	20000148 	.word	0x20000148
 8000838:	200000fc 	.word	0x200000fc
 800083c:	2000014c 	.word	0x2000014c
 8000840:	20000150 	.word	0x20000150
 8000844:	20000198 	.word	0x20000198
 8000848:	200000e4 	.word	0x200000e4
 800084c:	200000cc 	.word	0x200000cc
	case 4:
		if(initial_flag==1)
 8000850:	4b31      	ldr	r3, [pc, #196]	; (8000918 <fsm_automatic+0x37c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d124      	bne.n	80008a2 <fsm_automatic+0x306>
		{
			initial_flag=0;
 8000858:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <fsm_automatic+0x37c>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 800085e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000862:	f000 fc89 	bl	8001178 <setTimerReset>
			status_1=MAN_GREEN;
 8000866:	4b2d      	ldr	r3, [pc, #180]	; (800091c <fsm_automatic+0x380>)
 8000868:	220d      	movs	r2, #13
 800086a:	601a      	str	r2, [r3, #0]
			status_2=MAN_GREEN;
 800086c:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <fsm_automatic+0x384>)
 800086e:	220d      	movs	r2, #13
 8000870:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000878:	482a      	ldr	r0, [pc, #168]	; (8000924 <fsm_automatic+0x388>)
 800087a:	f001 f966 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	4829      	ldr	r0, [pc, #164]	; (8000928 <fsm_automatic+0x38c>)
 8000884:	f001 f961 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2108      	movs	r1, #8
 800088c:	4826      	ldr	r0, [pc, #152]	; (8000928 <fsm_automatic+0x38c>)
 800088e:	f001 f95c 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2110      	movs	r1, #16
 8000896:	4824      	ldr	r0, [pc, #144]	; (8000928 <fsm_automatic+0x38c>)
 8000898:	f001 f957 	bl	8001b4a <HAL_GPIO_WritePin>
			blink_flag=1;
 800089c:	4b23      	ldr	r3, [pc, #140]	; (800092c <fsm_automatic+0x390>)
 800089e:	2201      	movs	r2, #1
 80008a0:	601a      	str	r2, [r3, #0]
		}
		blinkLed(GREEN);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff fde6 	bl	8000474 <blinkLed>
		if(is_button_pressed(button2))
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 f8ab 	bl	8000a04 <is_button_pressed>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00c      	beq.n	80008ce <fsm_automatic+0x332>
		{
			status_1=MAN_GREEN;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <fsm_automatic+0x380>)
 80008b6:	220d      	movs	r2, #13
 80008b8:	601a      	str	r2, [r3, #0]
			status_2=MAN_GREEN;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <fsm_automatic+0x384>)
 80008bc:	220d      	movs	r2, #13
 80008be:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 80008c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80008c4:	f000 fc58 	bl	8001178 <setTimerReset>
			increase(GREEN);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f7ff fd91 	bl	80003f0 <increase>
		}
		if(is_button_pressed(button3))
 80008ce:	2002      	movs	r0, #2
 80008d0:	f000 f898 	bl	8000a04 <is_button_pressed>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d007      	beq.n	80008ea <fsm_automatic+0x34e>
		{
			copyModtoRun();
 80008da:	f7ff fdab 	bl	8000434 <copyModtoRun>
			mode=1;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <fsm_automatic+0x394>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <fsm_automatic+0x37c>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
		}
		if(reset_flag==1)
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <fsm_automatic+0x398>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10c      	bne.n	800090c <fsm_automatic+0x370>
		{
			mode=1;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <fsm_automatic+0x394>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <fsm_automatic+0x37c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
		}
		//send signal

		break;
 80008fe:	e005      	b.n	800090c <fsm_automatic+0x370>
	default:
		break;
 8000900:	bf00      	nop
 8000902:	e004      	b.n	800090e <fsm_automatic+0x372>
		break;
 8000904:	bf00      	nop
 8000906:	e002      	b.n	800090e <fsm_automatic+0x372>
		break;
 8000908:	bf00      	nop
 800090a:	e000      	b.n	800090e <fsm_automatic+0x372>
		break;
 800090c:	bf00      	nop
	}

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000008 	.word	0x20000008
 800091c:	200000fc 	.word	0x200000fc
 8000920:	2000014c 	.word	0x2000014c
 8000924:	40010800 	.word	0x40010800
 8000928:	40010c00 	.word	0x40010c00
 800092c:	200000e4 	.word	0x200000e4
 8000930:	20000148 	.word	0x20000148
 8000934:	200000cc 	.word	0x200000cc

08000938 <button_reading>:

static uint16_t buttonPin[NO_OF_BUTTONS]={BUT_1_Pin,BUT_2_Pin,BUT_3_Pin,PES_BUT_Pin};
static GPIO_TypeDef* buttonPort[NO_OF_BUTTONS]={BUT_1_GPIO_Port,BUT_2_GPIO_Port,BUT_3_GPIO_Port,PES_BUT_GPIO_Port};
int duration_for_buttons;
void button_reading()
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<NO_OF_BUTTONS;i++)
 800093e:	2300      	movs	r3, #0
 8000940:	71fb      	strb	r3, [r7, #7]
 8000942:	e049      	b.n	80009d8 <button_reading+0xa0>
	{
		debounceButtonBuffer2[i]=debounceButtonBuffer1[i];
 8000944:	79fa      	ldrb	r2, [r7, #7]
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	4927      	ldr	r1, [pc, #156]	; (80009e8 <button_reading+0xb0>)
 800094a:	5c89      	ldrb	r1, [r1, r2]
 800094c:	4a27      	ldr	r2, [pc, #156]	; (80009ec <button_reading+0xb4>)
 800094e:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i]=HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <button_reading+0xb8>)
 8000954:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4926      	ldr	r1, [pc, #152]	; (80009f4 <button_reading+0xbc>)
 800095c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000960:	79fc      	ldrb	r4, [r7, #7]
 8000962:	4619      	mov	r1, r3
 8000964:	4610      	mov	r0, r2
 8000966:	f001 f8d9 	bl	8001b1c <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <button_reading+0xb0>)
 8000970:	551a      	strb	r2, [r3, r4]
		if(debounceButtonBuffer1[i]==debounceButtonBuffer2[i])
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <button_reading+0xb0>)
 8000976:	5cd2      	ldrb	r2, [r2, r3]
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	491c      	ldr	r1, [pc, #112]	; (80009ec <button_reading+0xb4>)
 800097c:	5ccb      	ldrb	r3, [r1, r3]
 800097e:	429a      	cmp	r2, r3
 8000980:	d127      	bne.n	80009d2 <button_reading+0x9a>
		{
			if(debounceButtonBuffer3[i]!=debounceButtonBuffer1[i])
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <button_reading+0xc0>)
 8000986:	5cd2      	ldrb	r2, [r2, r3]
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4917      	ldr	r1, [pc, #92]	; (80009e8 <button_reading+0xb0>)
 800098c:	5ccb      	ldrb	r3, [r1, r3]
 800098e:	429a      	cmp	r2, r3
 8000990:	d012      	beq.n	80009b8 <button_reading+0x80>
			{
				debounceButtonBuffer3[i]=debounceButtonBuffer1[i];
 8000992:	79fa      	ldrb	r2, [r7, #7]
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	4914      	ldr	r1, [pc, #80]	; (80009e8 <button_reading+0xb0>)
 8000998:	5c89      	ldrb	r1, [r1, r2]
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <button_reading+0xc0>)
 800099c:	54d1      	strb	r1, [r2, r3]
				if(debounceButtonBuffer1[i]==BUTTON_IS_PRESSED)
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <button_reading+0xb0>)
 80009a2:	5cd3      	ldrb	r3, [r2, r3]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d114      	bne.n	80009d2 <button_reading+0x9a>
				{
					buttonBuffer[i]=BUTTON_IS_PRESSED;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <button_reading+0xc4>)
 80009ac:	2100      	movs	r1, #0
 80009ae:	54d1      	strb	r1, [r2, r3]
					duration_for_buttons=100;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <button_reading+0xc8>)
 80009b2:	2264      	movs	r2, #100	; 0x64
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	e00c      	b.n	80009d2 <button_reading+0x9a>
				}
			}
			else
			{
				duration_for_buttons--;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <button_reading+0xc8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3b01      	subs	r3, #1
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <button_reading+0xc8>)
 80009c0:	6013      	str	r3, [r2, #0]
				if(duration_for_buttons<=0)
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <button_reading+0xc8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	dc03      	bgt.n	80009d2 <button_reading+0x9a>
				{
					debounceButtonBuffer3[i]=BUTTON_IS_RELEASED;
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <button_reading+0xc0>)
 80009ce:	2101      	movs	r1, #1
 80009d0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<NO_OF_BUTTONS;i++)
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	3301      	adds	r3, #1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d9b2      	bls.n	8000944 <button_reading+0xc>
				}
			}
		}
	}
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd90      	pop	{r4, r7, pc}
 80009e8:	200000bc 	.word	0x200000bc
 80009ec:	200000c0 	.word	0x200000c0
 80009f0:	20000018 	.word	0x20000018
 80009f4:	20000010 	.word	0x20000010
 80009f8:	200000c4 	.word	0x200000c4
 80009fc:	2000000c 	.word	0x2000000c
 8000a00:	2000019c 	.word	0x2000019c

08000a04 <is_button_pressed>:

int is_button_pressed(uint8_t index)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	if(buttonBuffer[index]==BUTTON_IS_PRESSED)
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <is_button_pressed+0x2c>)
 8000a12:	5cd3      	ldrb	r3, [r2, r3]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d105      	bne.n	8000a24 <is_button_pressed+0x20>
	{
		buttonBuffer[index]=BUTTON_IS_RELEASED;
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <is_button_pressed+0x2c>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <is_button_pressed+0x22>
	}
	else return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	2000000c 	.word	0x2000000c

08000a34 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rx_data;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_UART_RxCpltCallback+0x30>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d10a      	bne.n	8000a5c <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Transmit(&huart2,&rx_data,sizeof(rx_data), 50);
 8000a46:	2332      	movs	r3, #50	; 0x32
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4907      	ldr	r1, [pc, #28]	; (8000a68 <HAL_UART_RxCpltCallback+0x34>)
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <HAL_UART_RxCpltCallback+0x38>)
 8000a4e:	f002 fc72 	bl	8003336 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000a52:	2201      	movs	r2, #1
 8000a54:	4904      	ldr	r1, [pc, #16]	; (8000a68 <HAL_UART_RxCpltCallback+0x34>)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <HAL_UART_RxCpltCallback+0x38>)
 8000a58:	f002 fcff 	bl	800345a <HAL_UART_Receive_IT>
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40004400 	.word	0x40004400
 8000a68:	200001a0 	.word	0x200001a0
 8000a6c:	20000154 	.word	0x20000154

08000a70 <buzzer_boi>:
void buzzer_boi(uint8_t buzzer)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,buzzer);
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <buzzer_boi+0x1c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	20000100 	.word	0x20000100

08000a90 <send_uart>:
void send_uart(int value1,int value2)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	uint8_t str[30]="\0";
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	831a      	strh	r2, [r3, #24]
	sprintf(str,"!7SEG_1#: %d\r\n",value1);
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	490e      	ldr	r1, [pc, #56]	; (8000af4 <send_uart+0x64>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 f958 	bl	8003d70 <siprintf>
	HAL_UART_Transmit(&huart2,str,sizeof(str),50);
 8000ac0:	f107 0108 	add.w	r1, r7, #8
 8000ac4:	2332      	movs	r3, #50	; 0x32
 8000ac6:	221e      	movs	r2, #30
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <send_uart+0x68>)
 8000aca:	f002 fc34 	bl	8003336 <HAL_UART_Transmit>
	sprintf(str,"!7SEG_2#: %d\r\n",value2);
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	4909      	ldr	r1, [pc, #36]	; (8000afc <send_uart+0x6c>)
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 f94a 	bl	8003d70 <siprintf>
	HAL_UART_Transmit(&huart2,str,sizeof(str),50);
 8000adc:	f107 0108 	add.w	r1, r7, #8
 8000ae0:	2332      	movs	r3, #50	; 0x32
 8000ae2:	221e      	movs	r2, #30
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <send_uart+0x68>)
 8000ae6:	f002 fc26 	bl	8003336 <HAL_UART_Transmit>
}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	080045fc 	.word	0x080045fc
 8000af8:	20000154 	.word	0x20000154
 8000afc:	0800460c 	.word	0x0800460c

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b04:	f000 fc66 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b08:	f000 f822 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0c:	f000 f948 	bl	8000da0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b10:	f000 f8a6 	bl	8000c60 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000b14:	f000 f858 	bl	8000bc8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b18:	f000 f918 	bl	8000d4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <main+0x40>)
 8000b1e:	f001 fcaf 	bl	8002480 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (& huart2 , &rx_data , 1) ;
 8000b22:	2201      	movs	r2, #1
 8000b24:	4907      	ldr	r1, [pc, #28]	; (8000b44 <main+0x44>)
 8000b26:	4808      	ldr	r0, [pc, #32]	; (8000b48 <main+0x48>)
 8000b28:	f002 fc97 	bl	800345a <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4807      	ldr	r0, [pc, #28]	; (8000b4c <main+0x4c>)
 8000b30:	f001 fd50 	bl	80025d4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initial();
 8000b34:	f7ff fb0a 	bl	800014c <initial>
//HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, 0);
//HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, 0);
  while (1)
  {
	  fsm_automatic();
 8000b38:	f7ff fd30 	bl	800059c <fsm_automatic>
 8000b3c:	e7fc      	b.n	8000b38 <main+0x38>
 8000b3e:	bf00      	nop
 8000b40:	200001a4 	.word	0x200001a4
 8000b44:	200001a0 	.word	0x200001a0
 8000b48:	20000154 	.word	0x20000154
 8000b4c:	20000100 	.word	0x20000100

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b090      	sub	sp, #64	; 0x40
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	2228      	movs	r2, #40	; 0x28
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 f8fe 	bl	8003d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b76:	2301      	movs	r3, #1
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b82:	f107 0318 	add.w	r3, r7, #24
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 f810 	bl	8001bac <HAL_RCC_OscConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b92:	f000 f973 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b96:	230f      	movs	r3, #15
 8000b98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fa7c 	bl	80020ac <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bba:	f000 f95f 	bl	8000e7c <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3740      	adds	r7, #64	; 0x40
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000bee:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000bfc:	2209      	movs	r2, #9
 8000bfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c0c:	4813      	ldr	r0, [pc, #76]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c0e:	f001 fbe7 	bl	80023e0 <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c18:	f000 f930 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c2a:	f001 ff3b 	bl	8002aa4 <HAL_TIM_ConfigClockSource>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c34:	f000 f922 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_TIM2_Init+0x94>)
 8000c46:	f002 fab9 	bl	80031bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f000 f914 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001a4 	.word	0x200001a4

08000c60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	; 0x38
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c74:	f107 0320 	add.w	r3, r7, #32
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	615a      	str	r2, [r3, #20]
 8000c8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <MX_TIM3_Init+0xe4>)
 8000c92:	4a2d      	ldr	r2, [pc, #180]	; (8000d48 <MX_TIM3_Init+0xe8>)
 8000c94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 122;
 8000c96:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <MX_TIM3_Init+0xe4>)
 8000c98:	227a      	movs	r2, #122	; 0x7a
 8000c9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <MX_TIM3_Init+0xe4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <MX_TIM3_Init+0xe4>)
 8000ca4:	22fe      	movs	r2, #254	; 0xfe
 8000ca6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <MX_TIM3_Init+0xe4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <MX_TIM3_Init+0xe4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb4:	4823      	ldr	r0, [pc, #140]	; (8000d44 <MX_TIM3_Init+0xe4>)
 8000cb6:	f001 fb93 	bl	80023e0 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000cc0:	f000 f8dc 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481c      	ldr	r0, [pc, #112]	; (8000d44 <MX_TIM3_Init+0xe4>)
 8000cd2:	f001 fee7 	bl	8002aa4 <HAL_TIM_ConfigClockSource>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000cdc:	f000 f8ce 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <MX_TIM3_Init+0xe4>)
 8000ce2:	f001 fc1f 	bl	8002524 <HAL_TIM_PWM_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000cec:	f000 f8c6 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cf8:	f107 0320 	add.w	r3, r7, #32
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4811      	ldr	r0, [pc, #68]	; (8000d44 <MX_TIM3_Init+0xe4>)
 8000d00:	f002 fa5c 	bl	80031bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000d0a:	f000 f8b7 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0e:	2360      	movs	r3, #96	; 0x60
 8000d10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <MX_TIM3_Init+0xe4>)
 8000d26:	f001 fdff 	bl	8002928 <HAL_TIM_PWM_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000d30:	f000 f8a4 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <MX_TIM3_Init+0xe4>)
 8000d36:	f000 f919 	bl	8000f6c <HAL_TIM_MspPostInit>

}
 8000d3a:	bf00      	nop
 8000d3c:	3738      	adds	r7, #56	; 0x38
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000100 	.word	0x20000100
 8000d48:	40000400 	.word	0x40000400

08000d4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <MX_USART2_UART_Init+0x50>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f002 fa8a 	bl	800329c <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d8e:	f000 f875 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000154 	.word	0x20000154
 8000d9c:	40004400 	.word	0x40004400

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <MX_GPIO_Init+0xd0>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a2d      	ldr	r2, [pc, #180]	; (8000e70 <MX_GPIO_Init+0xd0>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <MX_GPIO_Init+0xd0>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <MX_GPIO_Init+0xd0>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a27      	ldr	r2, [pc, #156]	; (8000e70 <MX_GPIO_Init+0xd0>)
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <MX_GPIO_Init+0xd0>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PES_RED_Pin|Traffic_1_GREEN_Pin|Traffic_2_GREEN_Pin|Traffic_2_RED_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000dea:	4822      	ldr	r0, [pc, #136]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000dec:	f000 fead 	bl	8001b4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PES_GREEN_Pin|Traffic_1_RED_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000df6:	4820      	ldr	r0, [pc, #128]	; (8000e78 <MX_GPIO_Init+0xd8>)
 8000df8:	f000 fea7 	bl	8001b4a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PES_BUT_Pin BUT_1_Pin BUT_2_Pin */
  GPIO_InitStruct.Pin = PES_BUT_Pin|BUT_1_Pin|BUT_2_Pin;
 8000dfc:	2313      	movs	r3, #19
 8000dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	481a      	ldr	r0, [pc, #104]	; (8000e78 <MX_GPIO_Init+0xd8>)
 8000e10:	f000 fd00 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_3_Pin */
  GPIO_InitStruct.Pin = BUT_3_Pin;
 8000e14:	2301      	movs	r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUT_3_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	4619      	mov	r1, r3
 8000e26:	4813      	ldr	r0, [pc, #76]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000e28:	f000 fcf4 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PES_RED_Pin Traffic_1_GREEN_Pin Traffic_2_GREEN_Pin Traffic_2_RED_Pin */
  GPIO_InitStruct.Pin = PES_RED_Pin|Traffic_1_GREEN_Pin|Traffic_2_GREEN_Pin|Traffic_2_RED_Pin;
 8000e2c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	4619      	mov	r1, r3
 8000e44:	480b      	ldr	r0, [pc, #44]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000e46:	f000 fce5 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PES_GREEN_Pin Traffic_1_RED_Pin */
  GPIO_InitStruct.Pin = PES_GREEN_Pin|Traffic_1_RED_Pin;
 8000e4a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	4619      	mov	r1, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_GPIO_Init+0xd8>)
 8000e64:	f000 fcd6 	bl	8001814 <HAL_GPIO_Init>

}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010c00 	.word	0x40010c00
 8000e78:	40010800 	.word	0x40010800

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6193      	str	r3, [r2, #24]
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_MspInit+0x60>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_MspInit+0x60>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000

08000eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000efc:	d114      	bne.n	8000f28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_TIM_Base_MspInit+0x78>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <HAL_TIM_Base_MspInit+0x78>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	61d3      	str	r3, [r2, #28]
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_TIM_Base_MspInit+0x78>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	201c      	movs	r0, #28
 8000f1c:	f000 fb93 	bl	8001646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f20:	201c      	movs	r0, #28
 8000f22:	f000 fbac 	bl	800167e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f26:	e018      	b.n	8000f5a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <HAL_TIM_Base_MspInit+0x7c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d113      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_TIM_Base_MspInit+0x78>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <HAL_TIM_Base_MspInit+0x78>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_TIM_Base_MspInit+0x78>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	201d      	movs	r0, #29
 8000f50:	f000 fb79 	bl	8001646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f54:	201d      	movs	r0, #29
 8000f56:	f000 fb92 	bl	800167e <HAL_NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40000400 	.word	0x40000400

08000f6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <HAL_TIM_MspPostInit+0x58>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d117      	bne.n	8000fbc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_TIM_MspPostInit+0x5c>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_TIM_MspPostInit+0x5c>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_TIM_MspPostInit+0x5c>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8000fa4:	2340      	movs	r3, #64	; 0x40
 8000fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_TIM_MspPostInit+0x60>)
 8000fb8:	f000 fc2c 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40000400 	.word	0x40000400
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010800 	.word	0x40010800

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a1f      	ldr	r2, [pc, #124]	; (8001068 <HAL_UART_MspInit+0x98>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d137      	bne.n	8001060 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <HAL_UART_MspInit+0x9c>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	4a1d      	ldr	r2, [pc, #116]	; (800106c <HAL_UART_MspInit+0x9c>)
 8000ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffa:	61d3      	str	r3, [r2, #28]
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_UART_MspInit+0x9c>)
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_UART_MspInit+0x9c>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_UART_MspInit+0x9c>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_UART_MspInit+0x9c>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001020:	2304      	movs	r3, #4
 8001022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4619      	mov	r1, r3
 8001032:	480f      	ldr	r0, [pc, #60]	; (8001070 <HAL_UART_MspInit+0xa0>)
 8001034:	f000 fbee 	bl	8001814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001038:	2308      	movs	r3, #8
 800103a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	4809      	ldr	r0, [pc, #36]	; (8001070 <HAL_UART_MspInit+0xa0>)
 800104c:	f000 fbe2 	bl	8001814 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	2026      	movs	r0, #38	; 0x26
 8001056:	f000 faf6 	bl	8001646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800105a:	2026      	movs	r0, #38	; 0x26
 800105c:	f000 fb0f 	bl	800167e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40004400 	.word	0x40004400
 800106c:	40021000 	.word	0x40021000
 8001070:	40010800 	.word	0x40010800

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ba:	f000 f9d1 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <TIM2_IRQHandler+0x10>)
 80010ca:	f001 fb25 	bl	8002718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200001a4 	.word	0x200001a4

080010d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <TIM3_IRQHandler+0x10>)
 80010de:	f001 fb1b 	bl	8002718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000100 	.word	0x20000100

080010ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <USART2_IRQHandler+0x10>)
 80010f2:	f002 f9e3 	bl	80034bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000154 	.word	0x20000154

08001100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001108:	4a14      	ldr	r2, [pc, #80]	; (800115c <_sbrk+0x5c>)
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <_sbrk+0x60>)
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d102      	bne.n	8001122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <_sbrk+0x64>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <_sbrk+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	429a      	cmp	r2, r3
 800112e:	d207      	bcs.n	8001140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001130:	f002 fdec 	bl	8003d0c <__errno>
 8001134:	4603      	mov	r3, r0
 8001136:	220c      	movs	r2, #12
 8001138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	e009      	b.n	8001154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <_sbrk+0x64>)
 8001150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20005000 	.word	0x20005000
 8001160:	00000400 	.word	0x00000400
 8001164:	200000c8 	.word	0x200000c8
 8001168:	20000200 	.word	0x20000200

0800116c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <setTimerReset>:
int blink_flag=0;
int blink_counter=0;
int buzzer_flag=0;
int buzzer_counter=0;
void setTimerReset(int duration)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	reset_counter=duration/10;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <setTimerReset+0x2c>)
 8001184:	fb82 1203 	smull	r1, r2, r2, r3
 8001188:	1092      	asrs	r2, r2, #2
 800118a:	17db      	asrs	r3, r3, #31
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <setTimerReset+0x30>)
 8001190:	6013      	str	r3, [r2, #0]
	reset_flag=0;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <setTimerReset+0x34>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	66666667 	.word	0x66666667
 80011a8:	200000d0 	.word	0x200000d0
 80011ac:	200000cc 	.word	0x200000cc

080011b0 <setTimerRun>:
void setTimerRun(int duration)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	run_counter=duration/10;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <setTimerRun+0x2c>)
 80011bc:	fb82 1203 	smull	r1, r2, r2, r3
 80011c0:	1092      	asrs	r2, r2, #2
 80011c2:	17db      	asrs	r3, r3, #31
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <setTimerRun+0x30>)
 80011c8:	6013      	str	r3, [r2, #0]
	run_flag=0;
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <setTimerRun+0x34>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	66666667 	.word	0x66666667
 80011e0:	200000d8 	.word	0x200000d8
 80011e4:	200000d4 	.word	0x200000d4

080011e8 <setTimerPesBut>:
void setTimerPesBut(int duration)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	pes_counter=duration/10;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <setTimerPesBut+0x2c>)
 80011f4:	fb82 1203 	smull	r1, r2, r2, r3
 80011f8:	1092      	asrs	r2, r2, #2
 80011fa:	17db      	asrs	r3, r3, #31
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	4a06      	ldr	r2, [pc, #24]	; (8001218 <setTimerPesBut+0x30>)
 8001200:	6013      	str	r3, [r2, #0]
	pes_flag=0;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <setTimerPesBut+0x34>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	66666667 	.word	0x66666667
 8001218:	200000e0 	.word	0x200000e0
 800121c:	200000dc 	.word	0x200000dc

08001220 <setTimerBlink>:
void setTimerBlink(int duration)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	blink_counter=duration/10;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <setTimerBlink+0x2c>)
 800122c:	fb82 1203 	smull	r1, r2, r2, r3
 8001230:	1092      	asrs	r2, r2, #2
 8001232:	17db      	asrs	r3, r3, #31
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	4a06      	ldr	r2, [pc, #24]	; (8001250 <setTimerBlink+0x30>)
 8001238:	6013      	str	r3, [r2, #0]
	blink_flag=0;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <setTimerBlink+0x34>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	66666667 	.word	0x66666667
 8001250:	200000e8 	.word	0x200000e8
 8001254:	200000e4 	.word	0x200000e4

08001258 <setTimerBuzzer>:
void setTimerBuzzer(int duration)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	buzzer_counter=duration/10;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <setTimerBuzzer+0x2c>)
 8001264:	fb82 1203 	smull	r1, r2, r2, r3
 8001268:	1092      	asrs	r2, r2, #2
 800126a:	17db      	asrs	r3, r3, #31
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <setTimerBuzzer+0x30>)
 8001270:	6013      	str	r3, [r2, #0]
	buzzer_flag=0;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <setTimerBuzzer+0x34>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	66666667 	.word	0x66666667
 8001288:	200000f0 	.word	0x200000f0
 800128c:	200000ec 	.word	0x200000ec

08001290 <timerRun>:
void timerRun()
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	if(reset_counter>0)
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <timerRun+0xac>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	dd0b      	ble.n	80012b4 <timerRun+0x24>
	{
		reset_counter--;
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <timerRun+0xac>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	4a26      	ldr	r2, [pc, #152]	; (800133c <timerRun+0xac>)
 80012a4:	6013      	str	r3, [r2, #0]
		if(reset_counter<=0)
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <timerRun+0xac>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dc02      	bgt.n	80012b4 <timerRun+0x24>
		{
			reset_flag=1;
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <timerRun+0xb0>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
		}
	}
	if(pes_counter>0)
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <timerRun+0xb4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dd0b      	ble.n	80012d4 <timerRun+0x44>
	{
		pes_counter--;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <timerRun+0xb4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	4a20      	ldr	r2, [pc, #128]	; (8001344 <timerRun+0xb4>)
 80012c4:	6013      	str	r3, [r2, #0]
		if(pes_counter<=0)
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <timerRun+0xb4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dc02      	bgt.n	80012d4 <timerRun+0x44>
		{
			pes_flag=1;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <timerRun+0xb8>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
		}
	}
	if(run_counter>0)
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <timerRun+0xbc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dd0b      	ble.n	80012f4 <timerRun+0x64>
	{
		run_counter--;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <timerRun+0xbc>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	4a1a      	ldr	r2, [pc, #104]	; (800134c <timerRun+0xbc>)
 80012e4:	6013      	str	r3, [r2, #0]
		if(run_counter<=0)
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <timerRun+0xbc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	dc02      	bgt.n	80012f4 <timerRun+0x64>
		{
			run_flag=1;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <timerRun+0xc0>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
		}
	}
	if(blink_counter>0)
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <timerRun+0xc4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	dd0b      	ble.n	8001314 <timerRun+0x84>
	{
		blink_counter--;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <timerRun+0xc4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3b01      	subs	r3, #1
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <timerRun+0xc4>)
 8001304:	6013      	str	r3, [r2, #0]
		if(blink_counter<=0)
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <timerRun+0xc4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	dc02      	bgt.n	8001314 <timerRun+0x84>
		{
			blink_flag=1;
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <timerRun+0xc8>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
		}
	}
	if(buzzer_counter>0)
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <timerRun+0xcc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	dd0b      	ble.n	8001334 <timerRun+0xa4>
	{
		buzzer_counter--;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <timerRun+0xcc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3b01      	subs	r3, #1
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <timerRun+0xcc>)
 8001324:	6013      	str	r3, [r2, #0]
		if(buzzer_counter<=0)
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <timerRun+0xcc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	dc02      	bgt.n	8001334 <timerRun+0xa4>
		{
			buzzer_flag=1;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <timerRun+0xd0>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	200000d0 	.word	0x200000d0
 8001340:	200000cc 	.word	0x200000cc
 8001344:	200000e0 	.word	0x200000e0
 8001348:	200000dc 	.word	0x200000dc
 800134c:	200000d8 	.word	0x200000d8
 8001350:	200000d4 	.word	0x200000d4
 8001354:	200000e8 	.word	0x200000e8
 8001358:	200000e4 	.word	0x200000e4
 800135c:	200000f0 	.word	0x200000f0
 8001360:	200000ec 	.word	0x200000ec

08001364 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM2 ) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001374:	d103      	bne.n	800137e <HAL_TIM_PeriodElapsedCallback+0x1a>
button_reading() ;
 8001376:	f7ff fadf 	bl	8000938 <button_reading>
timerRun();
 800137a:	f7ff ff89 	bl	8001290 <timerRun>
}
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138a:	490d      	ldr	r1, [pc, #52]	; (80013c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a0:	4c0a      	ldr	r4, [pc, #40]	; (80013cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ae:	f7ff fedd 	bl	800116c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013b2:	f002 fcb1 	bl	8003d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013b6:	f7ff fba3 	bl	8000b00 <main>
  bx lr
 80013ba:	4770      	bx	lr
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80013c4:	08004680 	.word	0x08004680
  ldr r2, =_sbss
 80013c8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80013cc:	20000200 	.word	0x20000200

080013d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC1_2_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_Init+0x28>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_Init+0x28>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 f923 	bl	8001630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ea:	200f      	movs	r0, #15
 80013ec:	f000 f808 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f0:	f7ff fd4a 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40022000 	.word	0x40022000

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x54>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x58>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f93b 	bl	800169a <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f000 f903 	bl	8001646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_InitTick+0x5c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000028 	.word	0x20000028
 8001458:	20000030 	.word	0x20000030
 800145c:	2000002c 	.word	0x2000002c

08001460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_IncTick+0x1c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_IncTick+0x20>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a03      	ldr	r2, [pc, #12]	; (8001480 <HAL_IncTick+0x20>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000030 	.word	0x20000030
 8001480:	200001ec 	.word	0x200001ec

08001484 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <HAL_GetTick+0x10>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	200001ec 	.word	0x200001ec

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4906      	ldr	r1, [pc, #24]	; (8001530 <__NVIC_EnableIRQ+0x34>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015fc:	d301      	bcc.n	8001602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fe:	2301      	movs	r3, #1
 8001600:	e00f      	b.n	8001622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <SysTick_Config+0x40>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160a:	210f      	movs	r1, #15
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f7ff ff90 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SysTick_Config+0x40>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SysTick_Config+0x40>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff2d 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001658:	f7ff ff42 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 800165c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	6978      	ldr	r0, [r7, #20]
 8001664:	f7ff ff90 	bl	8001588 <NVIC_EncodePriority>
 8001668:	4602      	mov	r2, r0
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff5f 	bl	8001534 <__NVIC_SetPriority>
}
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff35 	bl	80014fc <__NVIC_EnableIRQ>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ffa2 	bl	80015ec <SysTick_Config>
 80016a8:	4603      	mov	r3, r0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d008      	beq.n	80016da <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2204      	movs	r2, #4
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e020      	b.n	800171c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 020e 	bic.w	r2, r2, #14
 80016e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0201 	bic.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001702:	2101      	movs	r1, #1
 8001704:	fa01 f202 	lsl.w	r2, r1, r2
 8001708:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
	...

08001728 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800173a:	2b02      	cmp	r3, #2
 800173c:	d005      	beq.n	800174a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2204      	movs	r2, #4
 8001742:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e051      	b.n	80017ee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 020e 	bic.w	r2, r2, #14
 8001758:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <HAL_DMA_Abort_IT+0xd0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d029      	beq.n	80017c8 <HAL_DMA_Abort_IT+0xa0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a20      	ldr	r2, [pc, #128]	; (80017fc <HAL_DMA_Abort_IT+0xd4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d022      	beq.n	80017c4 <HAL_DMA_Abort_IT+0x9c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <HAL_DMA_Abort_IT+0xd8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d01a      	beq.n	80017be <HAL_DMA_Abort_IT+0x96>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_DMA_Abort_IT+0xdc>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d012      	beq.n	80017b8 <HAL_DMA_Abort_IT+0x90>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1c      	ldr	r2, [pc, #112]	; (8001808 <HAL_DMA_Abort_IT+0xe0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00a      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x8a>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1a      	ldr	r2, [pc, #104]	; (800180c <HAL_DMA_Abort_IT+0xe4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d102      	bne.n	80017ac <HAL_DMA_Abort_IT+0x84>
 80017a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017aa:	e00e      	b.n	80017ca <HAL_DMA_Abort_IT+0xa2>
 80017ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b0:	e00b      	b.n	80017ca <HAL_DMA_Abort_IT+0xa2>
 80017b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017b6:	e008      	b.n	80017ca <HAL_DMA_Abort_IT+0xa2>
 80017b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017bc:	e005      	b.n	80017ca <HAL_DMA_Abort_IT+0xa2>
 80017be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c2:	e002      	b.n	80017ca <HAL_DMA_Abort_IT+0xa2>
 80017c4:	2310      	movs	r3, #16
 80017c6:	e000      	b.n	80017ca <HAL_DMA_Abort_IT+0xa2>
 80017c8:	2301      	movs	r3, #1
 80017ca:	4a11      	ldr	r2, [pc, #68]	; (8001810 <HAL_DMA_Abort_IT+0xe8>)
 80017cc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	4798      	blx	r3
    } 
  }
  return status;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40020008 	.word	0x40020008
 80017fc:	4002001c 	.word	0x4002001c
 8001800:	40020030 	.word	0x40020030
 8001804:	40020044 	.word	0x40020044
 8001808:	40020058 	.word	0x40020058
 800180c:	4002006c 	.word	0x4002006c
 8001810:	40020000 	.word	0x40020000

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b480      	push	{r7}
 8001816:	b08b      	sub	sp, #44	; 0x2c
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001826:	e169      	b.n	8001afc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001828:	2201      	movs	r2, #1
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	429a      	cmp	r2, r3
 8001842:	f040 8158 	bne.w	8001af6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4a9a      	ldr	r2, [pc, #616]	; (8001ab4 <HAL_GPIO_Init+0x2a0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d05e      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001850:	4a98      	ldr	r2, [pc, #608]	; (8001ab4 <HAL_GPIO_Init+0x2a0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d875      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 8001856:	4a98      	ldr	r2, [pc, #608]	; (8001ab8 <HAL_GPIO_Init+0x2a4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d058      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 800185c:	4a96      	ldr	r2, [pc, #600]	; (8001ab8 <HAL_GPIO_Init+0x2a4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d86f      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 8001862:	4a96      	ldr	r2, [pc, #600]	; (8001abc <HAL_GPIO_Init+0x2a8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d052      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001868:	4a94      	ldr	r2, [pc, #592]	; (8001abc <HAL_GPIO_Init+0x2a8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d869      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 800186e:	4a94      	ldr	r2, [pc, #592]	; (8001ac0 <HAL_GPIO_Init+0x2ac>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d04c      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001874:	4a92      	ldr	r2, [pc, #584]	; (8001ac0 <HAL_GPIO_Init+0x2ac>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d863      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 800187a:	4a92      	ldr	r2, [pc, #584]	; (8001ac4 <HAL_GPIO_Init+0x2b0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d046      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001880:	4a90      	ldr	r2, [pc, #576]	; (8001ac4 <HAL_GPIO_Init+0x2b0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d85d      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 8001886:	2b12      	cmp	r3, #18
 8001888:	d82a      	bhi.n	80018e0 <HAL_GPIO_Init+0xcc>
 800188a:	2b12      	cmp	r3, #18
 800188c:	d859      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 800188e:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <HAL_GPIO_Init+0x80>)
 8001890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001894:	0800190f 	.word	0x0800190f
 8001898:	080018e9 	.word	0x080018e9
 800189c:	080018fb 	.word	0x080018fb
 80018a0:	0800193d 	.word	0x0800193d
 80018a4:	08001943 	.word	0x08001943
 80018a8:	08001943 	.word	0x08001943
 80018ac:	08001943 	.word	0x08001943
 80018b0:	08001943 	.word	0x08001943
 80018b4:	08001943 	.word	0x08001943
 80018b8:	08001943 	.word	0x08001943
 80018bc:	08001943 	.word	0x08001943
 80018c0:	08001943 	.word	0x08001943
 80018c4:	08001943 	.word	0x08001943
 80018c8:	08001943 	.word	0x08001943
 80018cc:	08001943 	.word	0x08001943
 80018d0:	08001943 	.word	0x08001943
 80018d4:	08001943 	.word	0x08001943
 80018d8:	080018f1 	.word	0x080018f1
 80018dc:	08001905 	.word	0x08001905
 80018e0:	4a79      	ldr	r2, [pc, #484]	; (8001ac8 <HAL_GPIO_Init+0x2b4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d013      	beq.n	800190e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018e6:	e02c      	b.n	8001942 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e029      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	3304      	adds	r3, #4
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e024      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	3308      	adds	r3, #8
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e01f      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	330c      	adds	r3, #12
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e01a      	b.n	8001944 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001916:	2304      	movs	r3, #4
 8001918:	623b      	str	r3, [r7, #32]
          break;
 800191a:	e013      	b.n	8001944 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001924:	2308      	movs	r3, #8
 8001926:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	611a      	str	r2, [r3, #16]
          break;
 800192e:	e009      	b.n	8001944 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001930:	2308      	movs	r3, #8
 8001932:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	615a      	str	r2, [r3, #20]
          break;
 800193a:	e003      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
          break;
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x130>
          break;
 8001942:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d801      	bhi.n	800194e <HAL_GPIO_Init+0x13a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	e001      	b.n	8001952 <HAL_GPIO_Init+0x13e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3304      	adds	r3, #4
 8001952:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2bff      	cmp	r3, #255	; 0xff
 8001958:	d802      	bhi.n	8001960 <HAL_GPIO_Init+0x14c>
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	e002      	b.n	8001966 <HAL_GPIO_Init+0x152>
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	3b08      	subs	r3, #8
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	210f      	movs	r1, #15
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	401a      	ands	r2, r3
 8001978:	6a39      	ldr	r1, [r7, #32]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	431a      	orrs	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80b1 	beq.w	8001af6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001994:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <HAL_GPIO_Init+0x2b8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a4c      	ldr	r2, [pc, #304]	; (8001acc <HAL_GPIO_Init+0x2b8>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b4a      	ldr	r3, [pc, #296]	; (8001acc <HAL_GPIO_Init+0x2b8>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ac:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2bc>)
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a40      	ldr	r2, [pc, #256]	; (8001ad4 <HAL_GPIO_Init+0x2c0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d013      	beq.n	8001a00 <HAL_GPIO_Init+0x1ec>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3f      	ldr	r2, [pc, #252]	; (8001ad8 <HAL_GPIO_Init+0x2c4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d00d      	beq.n	80019fc <HAL_GPIO_Init+0x1e8>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a3e      	ldr	r2, [pc, #248]	; (8001adc <HAL_GPIO_Init+0x2c8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d007      	beq.n	80019f8 <HAL_GPIO_Init+0x1e4>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a3d      	ldr	r2, [pc, #244]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d101      	bne.n	80019f4 <HAL_GPIO_Init+0x1e0>
 80019f0:	2303      	movs	r3, #3
 80019f2:	e006      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019f4:	2304      	movs	r3, #4
 80019f6:	e004      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e002      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 8001a00:	2300      	movs	r3, #0
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	f002 0203 	and.w	r2, r2, #3
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	4093      	lsls	r3, r2
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a12:	492f      	ldr	r1, [pc, #188]	; (8001ad0 <HAL_GPIO_Init+0x2bc>)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	492c      	ldr	r1, [pc, #176]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4928      	ldr	r1, [pc, #160]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	4922      	ldr	r1, [pc, #136]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	491e      	ldr	r1, [pc, #120]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	4918      	ldr	r1, [pc, #96]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	4914      	ldr	r1, [pc, #80]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d021      	beq.n	8001ae8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
 8001ab0:	e021      	b.n	8001af6 <HAL_GPIO_Init+0x2e2>
 8001ab2:	bf00      	nop
 8001ab4:	10320000 	.word	0x10320000
 8001ab8:	10310000 	.word	0x10310000
 8001abc:	10220000 	.word	0x10220000
 8001ac0:	10210000 	.word	0x10210000
 8001ac4:	10120000 	.word	0x10120000
 8001ac8:	10110000 	.word	0x10110000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	40010c00 	.word	0x40010c00
 8001adc:	40011000 	.word	0x40011000
 8001ae0:	40011400 	.word	0x40011400
 8001ae4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	4909      	ldr	r1, [pc, #36]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	3301      	adds	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f47f ae8e 	bne.w	8001828 <HAL_GPIO_Init+0x14>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	372c      	adds	r7, #44	; 0x2c
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	40010400 	.word	0x40010400

08001b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e001      	b.n	8001b3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	807b      	strh	r3, [r7, #2]
 8001b56:	4613      	mov	r3, r2
 8001b58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b5a:	787b      	ldrb	r3, [r7, #1]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b60:	887a      	ldrh	r2, [r7, #2]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	041a      	lsls	r2, r3, #16
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	611a      	str	r2, [r3, #16]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b085      	sub	sp, #20
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b8c:	887a      	ldrh	r2, [r7, #2]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4013      	ands	r3, r2
 8001b92:	041a      	lsls	r2, r3, #16
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	400b      	ands	r3, r1
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	611a      	str	r2, [r3, #16]
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e26c      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8087 	beq.w	8001cda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bcc:	4b92      	ldr	r3, [pc, #584]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d00c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd8:	4b8f      	ldr	r3, [pc, #572]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d112      	bne.n	8001c0a <HAL_RCC_OscConfig+0x5e>
 8001be4:	4b8c      	ldr	r3, [pc, #560]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf0:	d10b      	bne.n	8001c0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf2:	4b89      	ldr	r3, [pc, #548]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d06c      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x12c>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d168      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e246      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x76>
 8001c14:	4b80      	ldr	r3, [pc, #512]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a7f      	ldr	r2, [pc, #508]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	e02e      	b.n	8001c80 <HAL_RCC_OscConfig+0xd4>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x98>
 8001c2a:	4b7b      	ldr	r3, [pc, #492]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a7a      	ldr	r2, [pc, #488]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b78      	ldr	r3, [pc, #480]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a77      	ldr	r2, [pc, #476]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e01d      	b.n	8001c80 <HAL_RCC_OscConfig+0xd4>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0xbc>
 8001c4e:	4b72      	ldr	r3, [pc, #456]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a71      	ldr	r2, [pc, #452]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b6f      	ldr	r3, [pc, #444]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6e      	ldr	r2, [pc, #440]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0xd4>
 8001c68:	4b6b      	ldr	r3, [pc, #428]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a6a      	ldr	r2, [pc, #424]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a67      	ldr	r2, [pc, #412]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fbfc 	bl	8001484 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff fbf8 	bl	8001484 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	; 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e1fa      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0xe4>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fbe8 	bl	8001484 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fbe4 	bl	8001484 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1e6      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x10c>
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d063      	beq.n	8001dae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce6:	4b4c      	ldr	r3, [pc, #304]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cf2:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d11c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x18c>
 8001cfe:	4b46      	ldr	r3, [pc, #280]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d116      	bne.n	8001d38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_RCC_OscConfig+0x176>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e1ba      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d22:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4939      	ldr	r1, [pc, #228]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	e03a      	b.n	8001dae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d40:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7ff fb9d 	bl	8001484 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fb99 	bl	8001484 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e19b      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4927      	ldr	r1, [pc, #156]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
 8001d80:	e015      	b.n	8001dae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fb7c 	bl	8001484 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d90:	f7ff fb78 	bl	8001484 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e17a      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d03a      	beq.n	8001e30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d019      	beq.n	8001df6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc8:	f7ff fb5c 	bl	8001484 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fb58 	bl	8001484 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e15a      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 fad8 	bl	80023a4 <RCC_Delay>
 8001df4:	e01c      	b.n	8001e30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fb42 	bl	8001484 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e02:	e00f      	b.n	8001e24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e04:	f7ff fb3e 	bl	8001484 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d908      	bls.n	8001e24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e140      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	42420000 	.word	0x42420000
 8001e20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e24:	4b9e      	ldr	r3, [pc, #632]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1e9      	bne.n	8001e04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80a6 	beq.w	8001f8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e42:	4b97      	ldr	r3, [pc, #604]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10d      	bne.n	8001e6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	4b94      	ldr	r3, [pc, #592]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a93      	ldr	r2, [pc, #588]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	61d3      	str	r3, [r2, #28]
 8001e5a:	4b91      	ldr	r3, [pc, #580]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e66:	2301      	movs	r3, #1
 8001e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	4b8e      	ldr	r3, [pc, #568]	; (80020a4 <HAL_RCC_OscConfig+0x4f8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d118      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e76:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <HAL_RCC_OscConfig+0x4f8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a8a      	ldr	r2, [pc, #552]	; (80020a4 <HAL_RCC_OscConfig+0x4f8>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e82:	f7ff faff 	bl	8001484 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8a:	f7ff fafb 	bl	8001484 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b64      	cmp	r3, #100	; 0x64
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0fd      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	4b81      	ldr	r3, [pc, #516]	; (80020a4 <HAL_RCC_OscConfig+0x4f8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d106      	bne.n	8001ebe <HAL_RCC_OscConfig+0x312>
 8001eb0:	4b7b      	ldr	r3, [pc, #492]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a7a      	ldr	r2, [pc, #488]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	e02d      	b.n	8001f1a <HAL_RCC_OscConfig+0x36e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x334>
 8001ec6:	4b76      	ldr	r3, [pc, #472]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a75      	ldr	r2, [pc, #468]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	6213      	str	r3, [r2, #32]
 8001ed2:	4b73      	ldr	r3, [pc, #460]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4a72      	ldr	r2, [pc, #456]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	f023 0304 	bic.w	r3, r3, #4
 8001edc:	6213      	str	r3, [r2, #32]
 8001ede:	e01c      	b.n	8001f1a <HAL_RCC_OscConfig+0x36e>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d10c      	bne.n	8001f02 <HAL_RCC_OscConfig+0x356>
 8001ee8:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a6c      	ldr	r2, [pc, #432]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a69      	ldr	r2, [pc, #420]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	e00b      	b.n	8001f1a <HAL_RCC_OscConfig+0x36e>
 8001f02:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a66      	ldr	r2, [pc, #408]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6213      	str	r3, [r2, #32]
 8001f0e:	4b64      	ldr	r3, [pc, #400]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a63      	ldr	r2, [pc, #396]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	f023 0304 	bic.w	r3, r3, #4
 8001f18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d015      	beq.n	8001f4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7ff faaf 	bl	8001484 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7ff faab 	bl	8001484 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0ab      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	4b57      	ldr	r3, [pc, #348]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ee      	beq.n	8001f2a <HAL_RCC_OscConfig+0x37e>
 8001f4c:	e014      	b.n	8001f78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fa99 	bl	8001484 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f54:	e00a      	b.n	8001f6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f56:	f7ff fa95 	bl	8001484 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e095      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6c:	4b4c      	ldr	r3, [pc, #304]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1ee      	bne.n	8001f56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d105      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7e:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	4a47      	ldr	r2, [pc, #284]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8081 	beq.w	8002096 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f94:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d061      	beq.n	8002064 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d146      	bne.n	8002036 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa8:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <HAL_RCC_OscConfig+0x4fc>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff fa69 	bl	8001484 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7ff fa65 	bl	8001484 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e067      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f0      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fdc:	d108      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fde:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	492d      	ldr	r1, [pc, #180]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a19      	ldr	r1, [r3, #32]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	430b      	orrs	r3, r1
 8002002:	4927      	ldr	r1, [pc, #156]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002008:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_RCC_OscConfig+0x4fc>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7ff fa39 	bl	8001484 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002016:	f7ff fa35 	bl	8001484 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e037      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x46a>
 8002034:	e02f      	b.n	8002096 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <HAL_RCC_OscConfig+0x4fc>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff fa22 	bl	8001484 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002044:	f7ff fa1e 	bl	8001484 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e020      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x498>
 8002062:	e018      	b.n	8002096 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e013      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_OscConfig+0x4f4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	429a      	cmp	r2, r3
 8002082:	d106      	bne.n	8002092 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40007000 	.word	0x40007000
 80020a8:	42420060 	.word	0x42420060

080020ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0d0      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020c0:	4b6a      	ldr	r3, [pc, #424]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d910      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b67      	ldr	r3, [pc, #412]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 0207 	bic.w	r2, r3, #7
 80020d6:	4965      	ldr	r1, [pc, #404]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b8      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002108:	4b59      	ldr	r3, [pc, #356]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800212a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212c:	4b50      	ldr	r3, [pc, #320]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	494d      	ldr	r1, [pc, #308]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d040      	beq.n	80021cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d115      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e07f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216a:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e073      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217a:	4b3d      	ldr	r3, [pc, #244]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06b      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218a:	4b39      	ldr	r3, [pc, #228]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f023 0203 	bic.w	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4936      	ldr	r1, [pc, #216]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800219c:	f7ff f972 	bl	8001484 <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a4:	f7ff f96e 	bl	8001484 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e053      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 020c 	and.w	r2, r3, #12
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d1eb      	bne.n	80021a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021cc:	4b27      	ldr	r3, [pc, #156]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d210      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 0207 	bic.w	r2, r3, #7
 80021e2:	4922      	ldr	r1, [pc, #136]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e032      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4916      	ldr	r1, [pc, #88]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	490e      	ldr	r1, [pc, #56]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800223a:	f000 f821 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	490a      	ldr	r1, [pc, #40]	; (8002274 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1cc>)
 8002254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1d0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f8d0 	bl	8001400 <HAL_InitTick>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40022000 	.word	0x40022000
 8002270:	40021000 	.word	0x40021000
 8002274:	0800462c 	.word	0x0800462c
 8002278:	20000028 	.word	0x20000028
 800227c:	2000002c 	.word	0x2000002c

08002280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	b490      	push	{r4, r7}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002286:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002288:	1d3c      	adds	r4, r7, #4
 800228a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800228c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002290:	f240 2301 	movw	r3, #513	; 0x201
 8002294:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x40>
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x46>
 80022be:	e02d      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c2:	623b      	str	r3, [r7, #32]
      break;
 80022c4:	e02d      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	0c9b      	lsrs	r3, r3, #18
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022d2:	4413      	add	r3, r2
 80022d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	0c5b      	lsrs	r3, r3, #17
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022f2:	4413      	add	r3, r2
 80022f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022fe:	fb02 f203 	mul.w	r2, r2, r3
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
 800230a:	e004      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	4a0b      	ldr	r2, [pc, #44]	; (800233c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002310:	fb02 f303 	mul.w	r3, r2, r3
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	623b      	str	r3, [r7, #32]
      break;
 800231a:	e002      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetSysClockFreq+0xb8>)
 800231e:	623b      	str	r3, [r7, #32]
      break;
 8002320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002322:	6a3b      	ldr	r3, [r7, #32]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bc90      	pop	{r4, r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	0800461c 	.word	0x0800461c
 8002334:	40021000 	.word	0x40021000
 8002338:	007a1200 	.word	0x007a1200
 800233c:	003d0900 	.word	0x003d0900

08002340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002344:	4b02      	ldr	r3, [pc, #8]	; (8002350 <HAL_RCC_GetHCLKFreq+0x10>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000028 	.word	0x20000028

08002354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002358:	f7ff fff2 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4903      	ldr	r1, [pc, #12]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	0800463c 	.word	0x0800463c

0800237c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002380:	f7ff ffde 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	0adb      	lsrs	r3, r3, #11
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4903      	ldr	r1, [pc, #12]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	0800463c 	.word	0x0800463c

080023a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <RCC_Delay+0x34>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <RCC_Delay+0x38>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	0a5b      	lsrs	r3, r3, #9
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023c0:	bf00      	nop
  }
  while (Delay --);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1e5a      	subs	r2, r3, #1
 80023c6:	60fa      	str	r2, [r7, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f9      	bne.n	80023c0 <RCC_Delay+0x1c>
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	20000028 	.word	0x20000028
 80023dc:	10624dd3 	.word	0x10624dd3

080023e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e041      	b.n	8002476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fd70 	bl	8000eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3304      	adds	r3, #4
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f000 fc28 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d001      	beq.n	8002498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e03a      	b.n	800250e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a18      	ldr	r2, [pc, #96]	; (8002518 <HAL_TIM_Base_Start_IT+0x98>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00e      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x58>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c2:	d009      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x58>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <HAL_TIM_Base_Start_IT+0x9c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x58>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a13      	ldr	r2, [pc, #76]	; (8002520 <HAL_TIM_Base_Start_IT+0xa0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d111      	bne.n	80024fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d010      	beq.n	800250c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fa:	e007      	b.n	800250c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40000400 	.word	0x40000400
 8002520:	40000800 	.word	0x40000800

08002524 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e041      	b.n	80025ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f839 	bl	80025c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3304      	adds	r3, #4
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f000 fb86 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_TIM_PWM_Start+0x24>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	bf14      	ite	ne
 80025f0:	2301      	movne	r3, #1
 80025f2:	2300      	moveq	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	e022      	b.n	800263e <HAL_TIM_PWM_Start+0x6a>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d109      	bne.n	8002612 <HAL_TIM_PWM_Start+0x3e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b01      	cmp	r3, #1
 8002608:	bf14      	ite	ne
 800260a:	2301      	movne	r3, #1
 800260c:	2300      	moveq	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	e015      	b.n	800263e <HAL_TIM_PWM_Start+0x6a>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d109      	bne.n	800262c <HAL_TIM_PWM_Start+0x58>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e008      	b.n	800263e <HAL_TIM_PWM_Start+0x6a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e05e      	b.n	8002704 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d104      	bne.n	8002656 <HAL_TIM_PWM_Start+0x82>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002654:	e013      	b.n	800267e <HAL_TIM_PWM_Start+0xaa>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d104      	bne.n	8002666 <HAL_TIM_PWM_Start+0x92>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002664:	e00b      	b.n	800267e <HAL_TIM_PWM_Start+0xaa>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d104      	bne.n	8002676 <HAL_TIM_PWM_Start+0xa2>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002674:	e003      	b.n	800267e <HAL_TIM_PWM_Start+0xaa>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2201      	movs	r2, #1
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fd74 	bl	8003174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1e      	ldr	r2, [pc, #120]	; (800270c <HAL_TIM_PWM_Start+0x138>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d107      	bne.n	80026a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a18      	ldr	r2, [pc, #96]	; (800270c <HAL_TIM_PWM_Start+0x138>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00e      	beq.n	80026ce <HAL_TIM_PWM_Start+0xfa>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b8:	d009      	beq.n	80026ce <HAL_TIM_PWM_Start+0xfa>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a14      	ldr	r2, [pc, #80]	; (8002710 <HAL_TIM_PWM_Start+0x13c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d004      	beq.n	80026ce <HAL_TIM_PWM_Start+0xfa>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a12      	ldr	r2, [pc, #72]	; (8002714 <HAL_TIM_PWM_Start+0x140>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d111      	bne.n	80026f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b06      	cmp	r3, #6
 80026de:	d010      	beq.n	8002702 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f0:	e007      	b.n	8002702 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40000400 	.word	0x40000400
 8002714:	40000800 	.word	0x40000800

08002718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b02      	cmp	r3, #2
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b02      	cmp	r3, #2
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0202 	mvn.w	r2, #2
 8002744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa6f 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fa62 	bl	8002c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fa71 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b04      	cmp	r3, #4
 8002780:	d122      	bne.n	80027c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b04      	cmp	r3, #4
 800278e:	d11b      	bne.n	80027c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0204 	mvn.w	r2, #4
 8002798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2202      	movs	r2, #2
 800279e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa45 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fa38 	bl	8002c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fa47 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d122      	bne.n	800281c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d11b      	bne.n	800281c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0208 	mvn.w	r2, #8
 80027ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2204      	movs	r2, #4
 80027f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa1b 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 8002808:	e005      	b.n	8002816 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa0e 	bl	8002c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fa1d 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b10      	cmp	r3, #16
 8002828:	d122      	bne.n	8002870 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b10      	cmp	r3, #16
 8002836:	d11b      	bne.n	8002870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0210 	mvn.w	r2, #16
 8002840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2208      	movs	r2, #8
 8002846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f9f1 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 800285c:	e005      	b.n	800286a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f9e4 	bl	8002c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f9f3 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d10e      	bne.n	800289c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	d107      	bne.n	800289c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0201 	mvn.w	r2, #1
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fd64 	bl	8001364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b80      	cmp	r3, #128	; 0x80
 80028a8:	d10e      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b4:	2b80      	cmp	r3, #128	; 0x80
 80028b6:	d107      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fce1 	bl	800328a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d2:	2b40      	cmp	r3, #64	; 0x40
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e0:	2b40      	cmp	r3, #64	; 0x40
 80028e2:	d107      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f9b7 	bl	8002c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d10e      	bne.n	8002920 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b20      	cmp	r3, #32
 800290e:	d107      	bne.n	8002920 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0220 	mvn.w	r2, #32
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fcac 	bl	8003278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800293e:	2302      	movs	r3, #2
 8002940:	e0ac      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b0c      	cmp	r3, #12
 800294e:	f200 809f 	bhi.w	8002a90 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002952:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002958:	0800298d 	.word	0x0800298d
 800295c:	08002a91 	.word	0x08002a91
 8002960:	08002a91 	.word	0x08002a91
 8002964:	08002a91 	.word	0x08002a91
 8002968:	080029cd 	.word	0x080029cd
 800296c:	08002a91 	.word	0x08002a91
 8002970:	08002a91 	.word	0x08002a91
 8002974:	08002a91 	.word	0x08002a91
 8002978:	08002a0f 	.word	0x08002a0f
 800297c:	08002a91 	.word	0x08002a91
 8002980:	08002a91 	.word	0x08002a91
 8002984:	08002a91 	.word	0x08002a91
 8002988:	08002a4f 	.word	0x08002a4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f9d0 	bl	8002d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0208 	orr.w	r2, r2, #8
 80029a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6999      	ldr	r1, [r3, #24]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	619a      	str	r2, [r3, #24]
      break;
 80029ca:	e062      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fa16 	bl	8002e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6999      	ldr	r1, [r3, #24]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	021a      	lsls	r2, r3, #8
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	619a      	str	r2, [r3, #24]
      break;
 8002a0c:	e041      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fa5f 	bl	8002ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0208 	orr.w	r2, r2, #8
 8002a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69da      	ldr	r2, [r3, #28]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0204 	bic.w	r2, r2, #4
 8002a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69d9      	ldr	r1, [r3, #28]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	61da      	str	r2, [r3, #28]
      break;
 8002a4c:	e021      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 faa9 	bl	8002fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69d9      	ldr	r1, [r3, #28]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	021a      	lsls	r2, r3, #8
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	61da      	str	r2, [r3, #28]
      break;
 8002a8e:	e000      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_TIM_ConfigClockSource+0x18>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e0b3      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x180>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ada:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af4:	d03e      	beq.n	8002b74 <HAL_TIM_ConfigClockSource+0xd0>
 8002af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afa:	f200 8087 	bhi.w	8002c0c <HAL_TIM_ConfigClockSource+0x168>
 8002afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b02:	f000 8085 	beq.w	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0a:	d87f      	bhi.n	8002c0c <HAL_TIM_ConfigClockSource+0x168>
 8002b0c:	2b70      	cmp	r3, #112	; 0x70
 8002b0e:	d01a      	beq.n	8002b46 <HAL_TIM_ConfigClockSource+0xa2>
 8002b10:	2b70      	cmp	r3, #112	; 0x70
 8002b12:	d87b      	bhi.n	8002c0c <HAL_TIM_ConfigClockSource+0x168>
 8002b14:	2b60      	cmp	r3, #96	; 0x60
 8002b16:	d050      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0x116>
 8002b18:	2b60      	cmp	r3, #96	; 0x60
 8002b1a:	d877      	bhi.n	8002c0c <HAL_TIM_ConfigClockSource+0x168>
 8002b1c:	2b50      	cmp	r3, #80	; 0x50
 8002b1e:	d03c      	beq.n	8002b9a <HAL_TIM_ConfigClockSource+0xf6>
 8002b20:	2b50      	cmp	r3, #80	; 0x50
 8002b22:	d873      	bhi.n	8002c0c <HAL_TIM_ConfigClockSource+0x168>
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d058      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x136>
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d86f      	bhi.n	8002c0c <HAL_TIM_ConfigClockSource+0x168>
 8002b2c:	2b30      	cmp	r3, #48	; 0x30
 8002b2e:	d064      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x156>
 8002b30:	2b30      	cmp	r3, #48	; 0x30
 8002b32:	d86b      	bhi.n	8002c0c <HAL_TIM_ConfigClockSource+0x168>
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d060      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x156>
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d867      	bhi.n	8002c0c <HAL_TIM_ConfigClockSource+0x168>
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d05c      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x156>
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d05a      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b44:	e062      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6899      	ldr	r1, [r3, #8]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f000 faee 	bl	8003136 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	609a      	str	r2, [r3, #8]
      break;
 8002b72:	e04e      	b.n	8002c12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	6899      	ldr	r1, [r3, #8]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f000 fad7 	bl	8003136 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b96:	609a      	str	r2, [r3, #8]
      break;
 8002b98:	e03b      	b.n	8002c12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6859      	ldr	r1, [r3, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f000 fa4e 	bl	8003048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2150      	movs	r1, #80	; 0x50
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 faa5 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002bb8:	e02b      	b.n	8002c12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f000 fa6c 	bl	80030a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2160      	movs	r1, #96	; 0x60
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fa95 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002bd8:	e01b      	b.n	8002c12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	461a      	mov	r2, r3
 8002be8:	f000 fa2e 	bl	8003048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2140      	movs	r1, #64	; 0x40
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fa85 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002bf8:	e00b      	b.n	8002c12 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4619      	mov	r1, r3
 8002c04:	4610      	mov	r0, r2
 8002c06:	f000 fa7c 	bl	8003102 <TIM_ITRx_SetConfig>
        break;
 8002c0a:	e002      	b.n	8002c12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c0c:	bf00      	nop
 8002c0e:	e000      	b.n	8002c12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a29      	ldr	r2, [pc, #164]	; (8002d2c <TIM_Base_SetConfig+0xb8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00b      	beq.n	8002ca4 <TIM_Base_SetConfig+0x30>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c92:	d007      	beq.n	8002ca4 <TIM_Base_SetConfig+0x30>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a26      	ldr	r2, [pc, #152]	; (8002d30 <TIM_Base_SetConfig+0xbc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_Base_SetConfig+0x30>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <TIM_Base_SetConfig+0xc0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d108      	bne.n	8002cb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <TIM_Base_SetConfig+0xb8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00b      	beq.n	8002cd6 <TIM_Base_SetConfig+0x62>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d007      	beq.n	8002cd6 <TIM_Base_SetConfig+0x62>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a19      	ldr	r2, [pc, #100]	; (8002d30 <TIM_Base_SetConfig+0xbc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d003      	beq.n	8002cd6 <TIM_Base_SetConfig+0x62>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <TIM_Base_SetConfig+0xc0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d108      	bne.n	8002ce8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a07      	ldr	r2, [pc, #28]	; (8002d2c <TIM_Base_SetConfig+0xb8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d103      	bne.n	8002d1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	615a      	str	r2, [r3, #20]
}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40000400 	.word	0x40000400
 8002d34:	40000800 	.word	0x40000800

08002d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f023 0201 	bic.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0303 	bic.w	r3, r3, #3
 8002d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f023 0302 	bic.w	r3, r3, #2
 8002d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <TIM_OC1_SetConfig+0xc8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d10c      	bne.n	8002dae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0308 	bic.w	r3, r3, #8
 8002d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f023 0304 	bic.w	r3, r3, #4
 8002dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <TIM_OC1_SetConfig+0xc8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d111      	bne.n	8002dda <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	621a      	str	r2, [r3, #32]
}
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40012c00 	.word	0x40012c00

08002e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	f023 0210 	bic.w	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f023 0320 	bic.w	r3, r3, #32
 8002e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <TIM_OC2_SetConfig+0xd0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d10d      	bne.n	8002e80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <TIM_OC2_SetConfig+0xd0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d113      	bne.n	8002eb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	621a      	str	r2, [r3, #32]
}
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	40012c00 	.word	0x40012c00

08002ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <TIM_OC3_SetConfig+0xd0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d10d      	bne.n	8002f52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <TIM_OC3_SetConfig+0xd0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d113      	bne.n	8002f82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	621a      	str	r2, [r3, #32]
}
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40012c00 	.word	0x40012c00

08002fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	031b      	lsls	r3, r3, #12
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a0f      	ldr	r2, [pc, #60]	; (8003044 <TIM_OC4_SetConfig+0x98>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d109      	bne.n	8003020 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	019b      	lsls	r3, r3, #6
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	40012c00 	.word	0x40012c00

08003048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f023 0201 	bic.w	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f023 030a 	bic.w	r3, r3, #10
 8003084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f023 0210 	bic.w	r2, r3, #16
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	031b      	lsls	r3, r3, #12
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	621a      	str	r2, [r3, #32]
}
 80030f8:	bf00      	nop
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003102:	b480      	push	{r7}
 8003104:	b085      	sub	sp, #20
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	f043 0307 	orr.w	r3, r3, #7
 8003124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	609a      	str	r2, [r3, #8]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003136:	b480      	push	{r7}
 8003138:	b087      	sub	sp, #28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003150:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	021a      	lsls	r2, r3, #8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	431a      	orrs	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4313      	orrs	r3, r2
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	609a      	str	r2, [r3, #8]
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	2201      	movs	r2, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a1a      	ldr	r2, [r3, #32]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	43db      	mvns	r3, r3
 8003196:	401a      	ands	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e046      	b.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a16      	ldr	r2, [pc, #88]	; (800326c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00e      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d009      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a12      	ldr	r2, [pc, #72]	; (8003270 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a10      	ldr	r2, [pc, #64]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10c      	bne.n	8003250 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800323c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	4313      	orrs	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800

08003278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e03f      	b.n	800332e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd fe84 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fc85 	bl	8003bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b08a      	sub	sp, #40	; 0x28
 800333a:	af02      	add	r7, sp, #8
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	4613      	mov	r3, r2
 8003344:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b20      	cmp	r3, #32
 8003354:	d17c      	bne.n	8003450 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_UART_Transmit+0x2c>
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e075      	b.n	8003452 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_UART_Transmit+0x3e>
 8003370:	2302      	movs	r3, #2
 8003372:	e06e      	b.n	8003452 <HAL_UART_Transmit+0x11c>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2221      	movs	r2, #33	; 0x21
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800338a:	f7fe f87b 	bl	8001484 <HAL_GetTick>
 800338e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	88fa      	ldrh	r2, [r7, #6]
 8003394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	88fa      	ldrh	r2, [r7, #6]
 800339a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a4:	d108      	bne.n	80033b8 <HAL_UART_Transmit+0x82>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d104      	bne.n	80033b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	e003      	b.n	80033c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033c8:	e02a      	b.n	8003420 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2200      	movs	r2, #0
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fa38 	bl	800384a <UART_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e036      	b.n	8003452 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10b      	bne.n	8003402 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	3302      	adds	r3, #2
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	e007      	b.n	8003412 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	3301      	adds	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1cf      	bne.n	80033ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2200      	movs	r2, #0
 8003432:	2140      	movs	r1, #64	; 0x40
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fa08 	bl	800384a <UART_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e006      	b.n	8003452 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	e000      	b.n	8003452 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
  }
}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	4613      	mov	r3, r2
 8003466:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b20      	cmp	r3, #32
 8003472:	d11d      	bne.n	80034b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_UART_Receive_IT+0x26>
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e016      	b.n	80034b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_UART_Receive_IT+0x38>
 800348e:	2302      	movs	r3, #2
 8003490:	e00f      	b.n	80034b2 <HAL_UART_Receive_IT+0x58>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fa19 	bl	80038de <UART_Start_Receive_IT>
 80034ac:	4603      	mov	r3, r0
 80034ae:	e000      	b.n	80034b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80034b0:	2302      	movs	r3, #2
  }
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	; 0x28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_UART_IRQHandler+0x52>
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fac9 	bl	8003a9e <UART_Receive_IT>
      return;
 800350c:	e17b      	b.n	8003806 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80b1 	beq.w	8003678 <HAL_UART_IRQHandler+0x1bc>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_UART_IRQHandler+0x70>
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80a6 	beq.w	8003678 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_UART_IRQHandler+0x90>
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_UART_IRQHandler+0xb0>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f043 0202 	orr.w	r2, r3, #2
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_UART_IRQHandler+0xd0>
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f043 0204 	orr.w	r2, r3, #4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00f      	beq.n	80035b6 <HAL_UART_IRQHandler+0xfa>
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <HAL_UART_IRQHandler+0xee>
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0208 	orr.w	r2, r3, #8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 811e 	beq.w	80037fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_UART_IRQHandler+0x11e>
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fa62 	bl	8003a9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <HAL_UART_IRQHandler+0x146>
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d031      	beq.n	8003666 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f9a4 	bl	8003950 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d023      	beq.n	800365e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003624:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	2b00      	cmp	r3, #0
 800362c:	d013      	beq.n	8003656 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	4a76      	ldr	r2, [pc, #472]	; (800380c <HAL_UART_IRQHandler+0x350>)
 8003634:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe f874 	bl	8001728 <HAL_DMA_Abort_IT>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003650:	4610      	mov	r0, r2
 8003652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	e00e      	b.n	8003674 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8e3 	bl	8003822 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	e00a      	b.n	8003674 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f8df 	bl	8003822 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	e006      	b.n	8003674 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8db 	bl	8003822 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003672:	e0c3      	b.n	80037fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003674:	bf00      	nop
    return;
 8003676:	e0c1      	b.n	80037fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	2b01      	cmp	r3, #1
 800367e:	f040 80a1 	bne.w	80037c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 809b 	beq.w	80037c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8095 	beq.w	80037c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d04e      	beq.n	800375c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80036c8:	8a3b      	ldrh	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8098 	beq.w	8003800 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036d4:	8a3a      	ldrh	r2, [r7, #16]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	f080 8092 	bcs.w	8003800 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8a3a      	ldrh	r2, [r7, #16]
 80036e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d02b      	beq.n	8003744 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800371a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0210 	bic.w	r2, r2, #16
 8003738:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	4618      	mov	r0, r3
 8003740:	f7fd ffb7 	bl	80016b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800374c:	b29b      	uxth	r3, r3
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	b29b      	uxth	r3, r3
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f86d 	bl	8003834 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800375a:	e051      	b.n	8003800 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003764:	b29b      	uxth	r3, r3
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d047      	beq.n	8003804 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003774:	8a7b      	ldrh	r3, [r7, #18]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d044      	beq.n	8003804 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003788:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0210 	bic.w	r2, r2, #16
 80037b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037b8:	8a7b      	ldrh	r3, [r7, #18]
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f839 	bl	8003834 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037c2:	e01f      	b.n	8003804 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <HAL_UART_IRQHandler+0x324>
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f8f9 	bl	80039d0 <UART_Transmit_IT>
    return;
 80037de:	e012      	b.n	8003806 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <HAL_UART_IRQHandler+0x34a>
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f93a 	bl	8003a6e <UART_EndTransmit_IT>
    return;
 80037fa:	e004      	b.n	8003806 <HAL_UART_IRQHandler+0x34a>
    return;
 80037fc:	bf00      	nop
 80037fe:	e002      	b.n	8003806 <HAL_UART_IRQHandler+0x34a>
      return;
 8003800:	bf00      	nop
 8003802:	e000      	b.n	8003806 <HAL_UART_IRQHandler+0x34a>
      return;
 8003804:	bf00      	nop
  }
}
 8003806:	3728      	adds	r7, #40	; 0x28
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	080039a9 	.word	0x080039a9

08003810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr

08003822 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	4613      	mov	r3, r2
 8003858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385a:	e02c      	b.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	d028      	beq.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0x30>
 800386a:	f7fd fe0b 	bl	8001484 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	429a      	cmp	r2, r3
 8003878:	d21d      	bcs.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003888:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e00f      	b.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4013      	ands	r3, r2
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	bf0c      	ite	eq
 80038c6:	2301      	moveq	r3, #1
 80038c8:	2300      	movne	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d0c3      	beq.n	800385c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	4613      	mov	r3, r2
 80038ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2222      	movs	r2, #34	; 0x22
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0220 	orr.w	r2, r2, #32
 8003942:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr

08003950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003966:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	2b01      	cmp	r3, #1
 800397e:	d107      	bne.n	8003990 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0210 	bic.w	r2, r2, #16
 800398e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff ff2d 	bl	8003822 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b21      	cmp	r3, #33	; 0x21
 80039e2:	d13e      	bne.n	8003a62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ec:	d114      	bne.n	8003a18 <UART_Transmit_IT+0x48>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d110      	bne.n	8003a18 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	1c9a      	adds	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	621a      	str	r2, [r3, #32]
 8003a16:	e008      	b.n	8003a2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	1c59      	adds	r1, r3, #1
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6211      	str	r1, [r2, #32]
 8003a22:	781a      	ldrb	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4619      	mov	r1, r3
 8003a38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10f      	bne.n	8003a5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e000      	b.n	8003a64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a62:	2302      	movs	r3, #2
  }
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr

08003a6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff febe 	bl	8003810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b086      	sub	sp, #24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b22      	cmp	r3, #34	; 0x22
 8003ab0:	f040 8099 	bne.w	8003be6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abc:	d117      	bne.n	8003aee <UART_Receive_IT+0x50>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d113      	bne.n	8003aee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	1c9a      	adds	r2, r3, #2
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28
 8003aec:	e026      	b.n	8003b3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b00:	d007      	beq.n	8003b12 <UART_Receive_IT+0x74>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <UART_Receive_IT+0x82>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e008      	b.n	8003b32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d148      	bne.n	8003be2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0220 	bic.w	r2, r2, #32
 8003b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d123      	bne.n	8003bd8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0210 	bic.w	r2, r2, #16
 8003ba4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d10a      	bne.n	8003bca <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fe2f 	bl	8003834 <HAL_UARTEx_RxEventCallback>
 8003bd6:	e002      	b.n	8003bde <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7fc ff2b 	bl	8000a34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e002      	b.n	8003be8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e000      	b.n	8003be8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
  }
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c2a:	f023 030c 	bic.w	r3, r3, #12
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2c      	ldr	r2, [pc, #176]	; (8003d04 <UART_SetConfig+0x114>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d103      	bne.n	8003c60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c58:	f7fe fb90 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	e002      	b.n	8003c66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c60:	f7fe fb78 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8003c64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009a      	lsls	r2, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <UART_SetConfig+0x118>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	0119      	lsls	r1, r3, #4
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009a      	lsls	r2, r3, #2
 8003c90:	441a      	add	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <UART_SetConfig+0x118>)
 8003c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2064      	movs	r0, #100	; 0x64
 8003ca6:	fb00 f303 	mul.w	r3, r0, r3
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	3332      	adds	r3, #50	; 0x32
 8003cb0:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <UART_SetConfig+0x118>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cbc:	4419      	add	r1, r3
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009a      	lsls	r2, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <UART_SetConfig+0x118>)
 8003cd6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2064      	movs	r0, #100	; 0x64
 8003cde:	fb00 f303 	mul.w	r3, r0, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	3332      	adds	r3, #50	; 0x32
 8003ce8:	4a07      	ldr	r2, [pc, #28]	; (8003d08 <UART_SetConfig+0x118>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	f003 020f 	and.w	r2, r3, #15
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40013800 	.word	0x40013800
 8003d08:	51eb851f 	.word	0x51eb851f

08003d0c <__errno>:
 8003d0c:	4b01      	ldr	r3, [pc, #4]	; (8003d14 <__errno+0x8>)
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000034 	.word	0x20000034

08003d18 <__libc_init_array>:
 8003d18:	b570      	push	{r4, r5, r6, lr}
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	4d0c      	ldr	r5, [pc, #48]	; (8003d50 <__libc_init_array+0x38>)
 8003d1e:	4c0d      	ldr	r4, [pc, #52]	; (8003d54 <__libc_init_array+0x3c>)
 8003d20:	1b64      	subs	r4, r4, r5
 8003d22:	10a4      	asrs	r4, r4, #2
 8003d24:	42a6      	cmp	r6, r4
 8003d26:	d109      	bne.n	8003d3c <__libc_init_array+0x24>
 8003d28:	f000 fc5c 	bl	80045e4 <_init>
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	4d0a      	ldr	r5, [pc, #40]	; (8003d58 <__libc_init_array+0x40>)
 8003d30:	4c0a      	ldr	r4, [pc, #40]	; (8003d5c <__libc_init_array+0x44>)
 8003d32:	1b64      	subs	r4, r4, r5
 8003d34:	10a4      	asrs	r4, r4, #2
 8003d36:	42a6      	cmp	r6, r4
 8003d38:	d105      	bne.n	8003d46 <__libc_init_array+0x2e>
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
 8003d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d40:	4798      	blx	r3
 8003d42:	3601      	adds	r6, #1
 8003d44:	e7ee      	b.n	8003d24 <__libc_init_array+0xc>
 8003d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4a:	4798      	blx	r3
 8003d4c:	3601      	adds	r6, #1
 8003d4e:	e7f2      	b.n	8003d36 <__libc_init_array+0x1e>
 8003d50:	08004678 	.word	0x08004678
 8003d54:	08004678 	.word	0x08004678
 8003d58:	08004678 	.word	0x08004678
 8003d5c:	0800467c 	.word	0x0800467c

08003d60 <memset>:
 8003d60:	4603      	mov	r3, r0
 8003d62:	4402      	add	r2, r0
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d100      	bne.n	8003d6a <memset+0xa>
 8003d68:	4770      	bx	lr
 8003d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d6e:	e7f9      	b.n	8003d64 <memset+0x4>

08003d70 <siprintf>:
 8003d70:	b40e      	push	{r1, r2, r3}
 8003d72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d76:	b500      	push	{lr}
 8003d78:	b09c      	sub	sp, #112	; 0x70
 8003d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d7c:	9002      	str	r0, [sp, #8]
 8003d7e:	9006      	str	r0, [sp, #24]
 8003d80:	9107      	str	r1, [sp, #28]
 8003d82:	9104      	str	r1, [sp, #16]
 8003d84:	4808      	ldr	r0, [pc, #32]	; (8003da8 <siprintf+0x38>)
 8003d86:	4909      	ldr	r1, [pc, #36]	; (8003dac <siprintf+0x3c>)
 8003d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d8c:	9105      	str	r1, [sp, #20]
 8003d8e:	6800      	ldr	r0, [r0, #0]
 8003d90:	a902      	add	r1, sp, #8
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	f000 f868 	bl	8003e68 <_svfiprintf_r>
 8003d98:	2200      	movs	r2, #0
 8003d9a:	9b02      	ldr	r3, [sp, #8]
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	b01c      	add	sp, #112	; 0x70
 8003da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003da4:	b003      	add	sp, #12
 8003da6:	4770      	bx	lr
 8003da8:	20000034 	.word	0x20000034
 8003dac:	ffff0208 	.word	0xffff0208

08003db0 <__ssputs_r>:
 8003db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db4:	688e      	ldr	r6, [r1, #8]
 8003db6:	4682      	mov	sl, r0
 8003db8:	429e      	cmp	r6, r3
 8003dba:	460c      	mov	r4, r1
 8003dbc:	4690      	mov	r8, r2
 8003dbe:	461f      	mov	r7, r3
 8003dc0:	d838      	bhi.n	8003e34 <__ssputs_r+0x84>
 8003dc2:	898a      	ldrh	r2, [r1, #12]
 8003dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dc8:	d032      	beq.n	8003e30 <__ssputs_r+0x80>
 8003dca:	6825      	ldr	r5, [r4, #0]
 8003dcc:	6909      	ldr	r1, [r1, #16]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	eba5 0901 	sub.w	r9, r5, r1
 8003dd4:	6965      	ldr	r5, [r4, #20]
 8003dd6:	444b      	add	r3, r9
 8003dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ddc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003de0:	106d      	asrs	r5, r5, #1
 8003de2:	429d      	cmp	r5, r3
 8003de4:	bf38      	it	cc
 8003de6:	461d      	movcc	r5, r3
 8003de8:	0553      	lsls	r3, r2, #21
 8003dea:	d531      	bpl.n	8003e50 <__ssputs_r+0xa0>
 8003dec:	4629      	mov	r1, r5
 8003dee:	f000 fb53 	bl	8004498 <_malloc_r>
 8003df2:	4606      	mov	r6, r0
 8003df4:	b950      	cbnz	r0, 8003e0c <__ssputs_r+0x5c>
 8003df6:	230c      	movs	r3, #12
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	f8ca 3000 	str.w	r3, [sl]
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e06:	81a3      	strh	r3, [r4, #12]
 8003e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e0c:	464a      	mov	r2, r9
 8003e0e:	6921      	ldr	r1, [r4, #16]
 8003e10:	f000 face 	bl	80043b0 <memcpy>
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1e:	81a3      	strh	r3, [r4, #12]
 8003e20:	6126      	str	r6, [r4, #16]
 8003e22:	444e      	add	r6, r9
 8003e24:	6026      	str	r6, [r4, #0]
 8003e26:	463e      	mov	r6, r7
 8003e28:	6165      	str	r5, [r4, #20]
 8003e2a:	eba5 0509 	sub.w	r5, r5, r9
 8003e2e:	60a5      	str	r5, [r4, #8]
 8003e30:	42be      	cmp	r6, r7
 8003e32:	d900      	bls.n	8003e36 <__ssputs_r+0x86>
 8003e34:	463e      	mov	r6, r7
 8003e36:	4632      	mov	r2, r6
 8003e38:	4641      	mov	r1, r8
 8003e3a:	6820      	ldr	r0, [r4, #0]
 8003e3c:	f000 fac6 	bl	80043cc <memmove>
 8003e40:	68a3      	ldr	r3, [r4, #8]
 8003e42:	6822      	ldr	r2, [r4, #0]
 8003e44:	1b9b      	subs	r3, r3, r6
 8003e46:	4432      	add	r2, r6
 8003e48:	2000      	movs	r0, #0
 8003e4a:	60a3      	str	r3, [r4, #8]
 8003e4c:	6022      	str	r2, [r4, #0]
 8003e4e:	e7db      	b.n	8003e08 <__ssputs_r+0x58>
 8003e50:	462a      	mov	r2, r5
 8003e52:	f000 fb7b 	bl	800454c <_realloc_r>
 8003e56:	4606      	mov	r6, r0
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d1e1      	bne.n	8003e20 <__ssputs_r+0x70>
 8003e5c:	4650      	mov	r0, sl
 8003e5e:	6921      	ldr	r1, [r4, #16]
 8003e60:	f000 face 	bl	8004400 <_free_r>
 8003e64:	e7c7      	b.n	8003df6 <__ssputs_r+0x46>
	...

08003e68 <_svfiprintf_r>:
 8003e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e6c:	4698      	mov	r8, r3
 8003e6e:	898b      	ldrh	r3, [r1, #12]
 8003e70:	4607      	mov	r7, r0
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	460d      	mov	r5, r1
 8003e76:	4614      	mov	r4, r2
 8003e78:	b09d      	sub	sp, #116	; 0x74
 8003e7a:	d50e      	bpl.n	8003e9a <_svfiprintf_r+0x32>
 8003e7c:	690b      	ldr	r3, [r1, #16]
 8003e7e:	b963      	cbnz	r3, 8003e9a <_svfiprintf_r+0x32>
 8003e80:	2140      	movs	r1, #64	; 0x40
 8003e82:	f000 fb09 	bl	8004498 <_malloc_r>
 8003e86:	6028      	str	r0, [r5, #0]
 8003e88:	6128      	str	r0, [r5, #16]
 8003e8a:	b920      	cbnz	r0, 8003e96 <_svfiprintf_r+0x2e>
 8003e8c:	230c      	movs	r3, #12
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295
 8003e94:	e0d1      	b.n	800403a <_svfiprintf_r+0x1d2>
 8003e96:	2340      	movs	r3, #64	; 0x40
 8003e98:	616b      	str	r3, [r5, #20]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e9e:	2320      	movs	r3, #32
 8003ea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ea4:	2330      	movs	r3, #48	; 0x30
 8003ea6:	f04f 0901 	mov.w	r9, #1
 8003eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004054 <_svfiprintf_r+0x1ec>
 8003eb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	469a      	mov	sl, r3
 8003eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ebe:	b10a      	cbz	r2, 8003ec4 <_svfiprintf_r+0x5c>
 8003ec0:	2a25      	cmp	r2, #37	; 0x25
 8003ec2:	d1f9      	bne.n	8003eb8 <_svfiprintf_r+0x50>
 8003ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ec8:	d00b      	beq.n	8003ee2 <_svfiprintf_r+0x7a>
 8003eca:	465b      	mov	r3, fp
 8003ecc:	4622      	mov	r2, r4
 8003ece:	4629      	mov	r1, r5
 8003ed0:	4638      	mov	r0, r7
 8003ed2:	f7ff ff6d 	bl	8003db0 <__ssputs_r>
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	f000 80aa 	beq.w	8004030 <_svfiprintf_r+0x1c8>
 8003edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ede:	445a      	add	r2, fp
 8003ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80a2 	beq.w	8004030 <_svfiprintf_r+0x1c8>
 8003eec:	2300      	movs	r3, #0
 8003eee:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ef6:	f10a 0a01 	add.w	sl, sl, #1
 8003efa:	9304      	str	r3, [sp, #16]
 8003efc:	9307      	str	r3, [sp, #28]
 8003efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f02:	931a      	str	r3, [sp, #104]	; 0x68
 8003f04:	4654      	mov	r4, sl
 8003f06:	2205      	movs	r2, #5
 8003f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f0c:	4851      	ldr	r0, [pc, #324]	; (8004054 <_svfiprintf_r+0x1ec>)
 8003f0e:	f000 fa41 	bl	8004394 <memchr>
 8003f12:	9a04      	ldr	r2, [sp, #16]
 8003f14:	b9d8      	cbnz	r0, 8003f4e <_svfiprintf_r+0xe6>
 8003f16:	06d0      	lsls	r0, r2, #27
 8003f18:	bf44      	itt	mi
 8003f1a:	2320      	movmi	r3, #32
 8003f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f20:	0711      	lsls	r1, r2, #28
 8003f22:	bf44      	itt	mi
 8003f24:	232b      	movmi	r3, #43	; 0x2b
 8003f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f30:	d015      	beq.n	8003f5e <_svfiprintf_r+0xf6>
 8003f32:	4654      	mov	r4, sl
 8003f34:	2000      	movs	r0, #0
 8003f36:	f04f 0c0a 	mov.w	ip, #10
 8003f3a:	9a07      	ldr	r2, [sp, #28]
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f42:	3b30      	subs	r3, #48	; 0x30
 8003f44:	2b09      	cmp	r3, #9
 8003f46:	d94e      	bls.n	8003fe6 <_svfiprintf_r+0x17e>
 8003f48:	b1b0      	cbz	r0, 8003f78 <_svfiprintf_r+0x110>
 8003f4a:	9207      	str	r2, [sp, #28]
 8003f4c:	e014      	b.n	8003f78 <_svfiprintf_r+0x110>
 8003f4e:	eba0 0308 	sub.w	r3, r0, r8
 8003f52:	fa09 f303 	lsl.w	r3, r9, r3
 8003f56:	4313      	orrs	r3, r2
 8003f58:	46a2      	mov	sl, r4
 8003f5a:	9304      	str	r3, [sp, #16]
 8003f5c:	e7d2      	b.n	8003f04 <_svfiprintf_r+0x9c>
 8003f5e:	9b03      	ldr	r3, [sp, #12]
 8003f60:	1d19      	adds	r1, r3, #4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	9103      	str	r1, [sp, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bfbb      	ittet	lt
 8003f6a:	425b      	neglt	r3, r3
 8003f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003f70:	9307      	strge	r3, [sp, #28]
 8003f72:	9307      	strlt	r3, [sp, #28]
 8003f74:	bfb8      	it	lt
 8003f76:	9204      	strlt	r2, [sp, #16]
 8003f78:	7823      	ldrb	r3, [r4, #0]
 8003f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003f7c:	d10c      	bne.n	8003f98 <_svfiprintf_r+0x130>
 8003f7e:	7863      	ldrb	r3, [r4, #1]
 8003f80:	2b2a      	cmp	r3, #42	; 0x2a
 8003f82:	d135      	bne.n	8003ff0 <_svfiprintf_r+0x188>
 8003f84:	9b03      	ldr	r3, [sp, #12]
 8003f86:	3402      	adds	r4, #2
 8003f88:	1d1a      	adds	r2, r3, #4
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	9203      	str	r2, [sp, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bfb8      	it	lt
 8003f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f96:	9305      	str	r3, [sp, #20]
 8003f98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004064 <_svfiprintf_r+0x1fc>
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	4650      	mov	r0, sl
 8003fa0:	7821      	ldrb	r1, [r4, #0]
 8003fa2:	f000 f9f7 	bl	8004394 <memchr>
 8003fa6:	b140      	cbz	r0, 8003fba <_svfiprintf_r+0x152>
 8003fa8:	2340      	movs	r3, #64	; 0x40
 8003faa:	eba0 000a 	sub.w	r0, r0, sl
 8003fae:	fa03 f000 	lsl.w	r0, r3, r0
 8003fb2:	9b04      	ldr	r3, [sp, #16]
 8003fb4:	3401      	adds	r4, #1
 8003fb6:	4303      	orrs	r3, r0
 8003fb8:	9304      	str	r3, [sp, #16]
 8003fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fbe:	2206      	movs	r2, #6
 8003fc0:	4825      	ldr	r0, [pc, #148]	; (8004058 <_svfiprintf_r+0x1f0>)
 8003fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fc6:	f000 f9e5 	bl	8004394 <memchr>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d038      	beq.n	8004040 <_svfiprintf_r+0x1d8>
 8003fce:	4b23      	ldr	r3, [pc, #140]	; (800405c <_svfiprintf_r+0x1f4>)
 8003fd0:	bb1b      	cbnz	r3, 800401a <_svfiprintf_r+0x1b2>
 8003fd2:	9b03      	ldr	r3, [sp, #12]
 8003fd4:	3307      	adds	r3, #7
 8003fd6:	f023 0307 	bic.w	r3, r3, #7
 8003fda:	3308      	adds	r3, #8
 8003fdc:	9303      	str	r3, [sp, #12]
 8003fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe0:	4433      	add	r3, r6
 8003fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe4:	e767      	b.n	8003eb6 <_svfiprintf_r+0x4e>
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	2001      	movs	r0, #1
 8003fea:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fee:	e7a5      	b.n	8003f3c <_svfiprintf_r+0xd4>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f04f 0c0a 	mov.w	ip, #10
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	3401      	adds	r4, #1
 8003ffa:	9305      	str	r3, [sp, #20]
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004002:	3a30      	subs	r2, #48	; 0x30
 8004004:	2a09      	cmp	r2, #9
 8004006:	d903      	bls.n	8004010 <_svfiprintf_r+0x1a8>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0c5      	beq.n	8003f98 <_svfiprintf_r+0x130>
 800400c:	9105      	str	r1, [sp, #20]
 800400e:	e7c3      	b.n	8003f98 <_svfiprintf_r+0x130>
 8004010:	4604      	mov	r4, r0
 8004012:	2301      	movs	r3, #1
 8004014:	fb0c 2101 	mla	r1, ip, r1, r2
 8004018:	e7f0      	b.n	8003ffc <_svfiprintf_r+0x194>
 800401a:	ab03      	add	r3, sp, #12
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	462a      	mov	r2, r5
 8004020:	4638      	mov	r0, r7
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <_svfiprintf_r+0x1f8>)
 8004024:	a904      	add	r1, sp, #16
 8004026:	f3af 8000 	nop.w
 800402a:	1c42      	adds	r2, r0, #1
 800402c:	4606      	mov	r6, r0
 800402e:	d1d6      	bne.n	8003fde <_svfiprintf_r+0x176>
 8004030:	89ab      	ldrh	r3, [r5, #12]
 8004032:	065b      	lsls	r3, r3, #25
 8004034:	f53f af2c 	bmi.w	8003e90 <_svfiprintf_r+0x28>
 8004038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800403a:	b01d      	add	sp, #116	; 0x74
 800403c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004040:	ab03      	add	r3, sp, #12
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	462a      	mov	r2, r5
 8004046:	4638      	mov	r0, r7
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <_svfiprintf_r+0x1f8>)
 800404a:	a904      	add	r1, sp, #16
 800404c:	f000 f87c 	bl	8004148 <_printf_i>
 8004050:	e7eb      	b.n	800402a <_svfiprintf_r+0x1c2>
 8004052:	bf00      	nop
 8004054:	08004644 	.word	0x08004644
 8004058:	0800464e 	.word	0x0800464e
 800405c:	00000000 	.word	0x00000000
 8004060:	08003db1 	.word	0x08003db1
 8004064:	0800464a 	.word	0x0800464a

08004068 <_printf_common>:
 8004068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800406c:	4616      	mov	r6, r2
 800406e:	4699      	mov	r9, r3
 8004070:	688a      	ldr	r2, [r1, #8]
 8004072:	690b      	ldr	r3, [r1, #16]
 8004074:	4607      	mov	r7, r0
 8004076:	4293      	cmp	r3, r2
 8004078:	bfb8      	it	lt
 800407a:	4613      	movlt	r3, r2
 800407c:	6033      	str	r3, [r6, #0]
 800407e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004082:	460c      	mov	r4, r1
 8004084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004088:	b10a      	cbz	r2, 800408e <_printf_common+0x26>
 800408a:	3301      	adds	r3, #1
 800408c:	6033      	str	r3, [r6, #0]
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	0699      	lsls	r1, r3, #26
 8004092:	bf42      	ittt	mi
 8004094:	6833      	ldrmi	r3, [r6, #0]
 8004096:	3302      	addmi	r3, #2
 8004098:	6033      	strmi	r3, [r6, #0]
 800409a:	6825      	ldr	r5, [r4, #0]
 800409c:	f015 0506 	ands.w	r5, r5, #6
 80040a0:	d106      	bne.n	80040b0 <_printf_common+0x48>
 80040a2:	f104 0a19 	add.w	sl, r4, #25
 80040a6:	68e3      	ldr	r3, [r4, #12]
 80040a8:	6832      	ldr	r2, [r6, #0]
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	42ab      	cmp	r3, r5
 80040ae:	dc28      	bgt.n	8004102 <_printf_common+0x9a>
 80040b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040b4:	1e13      	subs	r3, r2, #0
 80040b6:	6822      	ldr	r2, [r4, #0]
 80040b8:	bf18      	it	ne
 80040ba:	2301      	movne	r3, #1
 80040bc:	0692      	lsls	r2, r2, #26
 80040be:	d42d      	bmi.n	800411c <_printf_common+0xb4>
 80040c0:	4649      	mov	r1, r9
 80040c2:	4638      	mov	r0, r7
 80040c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040c8:	47c0      	blx	r8
 80040ca:	3001      	adds	r0, #1
 80040cc:	d020      	beq.n	8004110 <_printf_common+0xa8>
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	68e5      	ldr	r5, [r4, #12]
 80040d2:	f003 0306 	and.w	r3, r3, #6
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	bf18      	it	ne
 80040da:	2500      	movne	r5, #0
 80040dc:	6832      	ldr	r2, [r6, #0]
 80040de:	f04f 0600 	mov.w	r6, #0
 80040e2:	68a3      	ldr	r3, [r4, #8]
 80040e4:	bf08      	it	eq
 80040e6:	1aad      	subeq	r5, r5, r2
 80040e8:	6922      	ldr	r2, [r4, #16]
 80040ea:	bf08      	it	eq
 80040ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040f0:	4293      	cmp	r3, r2
 80040f2:	bfc4      	itt	gt
 80040f4:	1a9b      	subgt	r3, r3, r2
 80040f6:	18ed      	addgt	r5, r5, r3
 80040f8:	341a      	adds	r4, #26
 80040fa:	42b5      	cmp	r5, r6
 80040fc:	d11a      	bne.n	8004134 <_printf_common+0xcc>
 80040fe:	2000      	movs	r0, #0
 8004100:	e008      	b.n	8004114 <_printf_common+0xac>
 8004102:	2301      	movs	r3, #1
 8004104:	4652      	mov	r2, sl
 8004106:	4649      	mov	r1, r9
 8004108:	4638      	mov	r0, r7
 800410a:	47c0      	blx	r8
 800410c:	3001      	adds	r0, #1
 800410e:	d103      	bne.n	8004118 <_printf_common+0xb0>
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004118:	3501      	adds	r5, #1
 800411a:	e7c4      	b.n	80040a6 <_printf_common+0x3e>
 800411c:	2030      	movs	r0, #48	; 0x30
 800411e:	18e1      	adds	r1, r4, r3
 8004120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800412a:	4422      	add	r2, r4
 800412c:	3302      	adds	r3, #2
 800412e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004132:	e7c5      	b.n	80040c0 <_printf_common+0x58>
 8004134:	2301      	movs	r3, #1
 8004136:	4622      	mov	r2, r4
 8004138:	4649      	mov	r1, r9
 800413a:	4638      	mov	r0, r7
 800413c:	47c0      	blx	r8
 800413e:	3001      	adds	r0, #1
 8004140:	d0e6      	beq.n	8004110 <_printf_common+0xa8>
 8004142:	3601      	adds	r6, #1
 8004144:	e7d9      	b.n	80040fa <_printf_common+0x92>
	...

08004148 <_printf_i>:
 8004148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800414c:	460c      	mov	r4, r1
 800414e:	7e27      	ldrb	r7, [r4, #24]
 8004150:	4691      	mov	r9, r2
 8004152:	2f78      	cmp	r7, #120	; 0x78
 8004154:	4680      	mov	r8, r0
 8004156:	469a      	mov	sl, r3
 8004158:	990c      	ldr	r1, [sp, #48]	; 0x30
 800415a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800415e:	d807      	bhi.n	8004170 <_printf_i+0x28>
 8004160:	2f62      	cmp	r7, #98	; 0x62
 8004162:	d80a      	bhi.n	800417a <_printf_i+0x32>
 8004164:	2f00      	cmp	r7, #0
 8004166:	f000 80d9 	beq.w	800431c <_printf_i+0x1d4>
 800416a:	2f58      	cmp	r7, #88	; 0x58
 800416c:	f000 80a4 	beq.w	80042b8 <_printf_i+0x170>
 8004170:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004178:	e03a      	b.n	80041f0 <_printf_i+0xa8>
 800417a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800417e:	2b15      	cmp	r3, #21
 8004180:	d8f6      	bhi.n	8004170 <_printf_i+0x28>
 8004182:	a001      	add	r0, pc, #4	; (adr r0, 8004188 <_printf_i+0x40>)
 8004184:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004188:	080041e1 	.word	0x080041e1
 800418c:	080041f5 	.word	0x080041f5
 8004190:	08004171 	.word	0x08004171
 8004194:	08004171 	.word	0x08004171
 8004198:	08004171 	.word	0x08004171
 800419c:	08004171 	.word	0x08004171
 80041a0:	080041f5 	.word	0x080041f5
 80041a4:	08004171 	.word	0x08004171
 80041a8:	08004171 	.word	0x08004171
 80041ac:	08004171 	.word	0x08004171
 80041b0:	08004171 	.word	0x08004171
 80041b4:	08004303 	.word	0x08004303
 80041b8:	08004225 	.word	0x08004225
 80041bc:	080042e5 	.word	0x080042e5
 80041c0:	08004171 	.word	0x08004171
 80041c4:	08004171 	.word	0x08004171
 80041c8:	08004325 	.word	0x08004325
 80041cc:	08004171 	.word	0x08004171
 80041d0:	08004225 	.word	0x08004225
 80041d4:	08004171 	.word	0x08004171
 80041d8:	08004171 	.word	0x08004171
 80041dc:	080042ed 	.word	0x080042ed
 80041e0:	680b      	ldr	r3, [r1, #0]
 80041e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041e6:	1d1a      	adds	r2, r3, #4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	600a      	str	r2, [r1, #0]
 80041ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0a4      	b.n	800433e <_printf_i+0x1f6>
 80041f4:	6825      	ldr	r5, [r4, #0]
 80041f6:	6808      	ldr	r0, [r1, #0]
 80041f8:	062e      	lsls	r6, r5, #24
 80041fa:	f100 0304 	add.w	r3, r0, #4
 80041fe:	d50a      	bpl.n	8004216 <_printf_i+0xce>
 8004200:	6805      	ldr	r5, [r0, #0]
 8004202:	600b      	str	r3, [r1, #0]
 8004204:	2d00      	cmp	r5, #0
 8004206:	da03      	bge.n	8004210 <_printf_i+0xc8>
 8004208:	232d      	movs	r3, #45	; 0x2d
 800420a:	426d      	negs	r5, r5
 800420c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004210:	230a      	movs	r3, #10
 8004212:	485e      	ldr	r0, [pc, #376]	; (800438c <_printf_i+0x244>)
 8004214:	e019      	b.n	800424a <_printf_i+0x102>
 8004216:	f015 0f40 	tst.w	r5, #64	; 0x40
 800421a:	6805      	ldr	r5, [r0, #0]
 800421c:	600b      	str	r3, [r1, #0]
 800421e:	bf18      	it	ne
 8004220:	b22d      	sxthne	r5, r5
 8004222:	e7ef      	b.n	8004204 <_printf_i+0xbc>
 8004224:	680b      	ldr	r3, [r1, #0]
 8004226:	6825      	ldr	r5, [r4, #0]
 8004228:	1d18      	adds	r0, r3, #4
 800422a:	6008      	str	r0, [r1, #0]
 800422c:	0628      	lsls	r0, r5, #24
 800422e:	d501      	bpl.n	8004234 <_printf_i+0xec>
 8004230:	681d      	ldr	r5, [r3, #0]
 8004232:	e002      	b.n	800423a <_printf_i+0xf2>
 8004234:	0669      	lsls	r1, r5, #25
 8004236:	d5fb      	bpl.n	8004230 <_printf_i+0xe8>
 8004238:	881d      	ldrh	r5, [r3, #0]
 800423a:	2f6f      	cmp	r7, #111	; 0x6f
 800423c:	bf0c      	ite	eq
 800423e:	2308      	moveq	r3, #8
 8004240:	230a      	movne	r3, #10
 8004242:	4852      	ldr	r0, [pc, #328]	; (800438c <_printf_i+0x244>)
 8004244:	2100      	movs	r1, #0
 8004246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800424a:	6866      	ldr	r6, [r4, #4]
 800424c:	2e00      	cmp	r6, #0
 800424e:	bfa8      	it	ge
 8004250:	6821      	ldrge	r1, [r4, #0]
 8004252:	60a6      	str	r6, [r4, #8]
 8004254:	bfa4      	itt	ge
 8004256:	f021 0104 	bicge.w	r1, r1, #4
 800425a:	6021      	strge	r1, [r4, #0]
 800425c:	b90d      	cbnz	r5, 8004262 <_printf_i+0x11a>
 800425e:	2e00      	cmp	r6, #0
 8004260:	d04d      	beq.n	80042fe <_printf_i+0x1b6>
 8004262:	4616      	mov	r6, r2
 8004264:	fbb5 f1f3 	udiv	r1, r5, r3
 8004268:	fb03 5711 	mls	r7, r3, r1, r5
 800426c:	5dc7      	ldrb	r7, [r0, r7]
 800426e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004272:	462f      	mov	r7, r5
 8004274:	42bb      	cmp	r3, r7
 8004276:	460d      	mov	r5, r1
 8004278:	d9f4      	bls.n	8004264 <_printf_i+0x11c>
 800427a:	2b08      	cmp	r3, #8
 800427c:	d10b      	bne.n	8004296 <_printf_i+0x14e>
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	07df      	lsls	r7, r3, #31
 8004282:	d508      	bpl.n	8004296 <_printf_i+0x14e>
 8004284:	6923      	ldr	r3, [r4, #16]
 8004286:	6861      	ldr	r1, [r4, #4]
 8004288:	4299      	cmp	r1, r3
 800428a:	bfde      	ittt	le
 800428c:	2330      	movle	r3, #48	; 0x30
 800428e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004292:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004296:	1b92      	subs	r2, r2, r6
 8004298:	6122      	str	r2, [r4, #16]
 800429a:	464b      	mov	r3, r9
 800429c:	4621      	mov	r1, r4
 800429e:	4640      	mov	r0, r8
 80042a0:	f8cd a000 	str.w	sl, [sp]
 80042a4:	aa03      	add	r2, sp, #12
 80042a6:	f7ff fedf 	bl	8004068 <_printf_common>
 80042aa:	3001      	adds	r0, #1
 80042ac:	d14c      	bne.n	8004348 <_printf_i+0x200>
 80042ae:	f04f 30ff 	mov.w	r0, #4294967295
 80042b2:	b004      	add	sp, #16
 80042b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b8:	4834      	ldr	r0, [pc, #208]	; (800438c <_printf_i+0x244>)
 80042ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042be:	680e      	ldr	r6, [r1, #0]
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80042c6:	061f      	lsls	r7, r3, #24
 80042c8:	600e      	str	r6, [r1, #0]
 80042ca:	d514      	bpl.n	80042f6 <_printf_i+0x1ae>
 80042cc:	07d9      	lsls	r1, r3, #31
 80042ce:	bf44      	itt	mi
 80042d0:	f043 0320 	orrmi.w	r3, r3, #32
 80042d4:	6023      	strmi	r3, [r4, #0]
 80042d6:	b91d      	cbnz	r5, 80042e0 <_printf_i+0x198>
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	f023 0320 	bic.w	r3, r3, #32
 80042de:	6023      	str	r3, [r4, #0]
 80042e0:	2310      	movs	r3, #16
 80042e2:	e7af      	b.n	8004244 <_printf_i+0xfc>
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	f043 0320 	orr.w	r3, r3, #32
 80042ea:	6023      	str	r3, [r4, #0]
 80042ec:	2378      	movs	r3, #120	; 0x78
 80042ee:	4828      	ldr	r0, [pc, #160]	; (8004390 <_printf_i+0x248>)
 80042f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042f4:	e7e3      	b.n	80042be <_printf_i+0x176>
 80042f6:	065e      	lsls	r6, r3, #25
 80042f8:	bf48      	it	mi
 80042fa:	b2ad      	uxthmi	r5, r5
 80042fc:	e7e6      	b.n	80042cc <_printf_i+0x184>
 80042fe:	4616      	mov	r6, r2
 8004300:	e7bb      	b.n	800427a <_printf_i+0x132>
 8004302:	680b      	ldr	r3, [r1, #0]
 8004304:	6826      	ldr	r6, [r4, #0]
 8004306:	1d1d      	adds	r5, r3, #4
 8004308:	6960      	ldr	r0, [r4, #20]
 800430a:	600d      	str	r5, [r1, #0]
 800430c:	0635      	lsls	r5, r6, #24
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	d501      	bpl.n	8004316 <_printf_i+0x1ce>
 8004312:	6018      	str	r0, [r3, #0]
 8004314:	e002      	b.n	800431c <_printf_i+0x1d4>
 8004316:	0671      	lsls	r1, r6, #25
 8004318:	d5fb      	bpl.n	8004312 <_printf_i+0x1ca>
 800431a:	8018      	strh	r0, [r3, #0]
 800431c:	2300      	movs	r3, #0
 800431e:	4616      	mov	r6, r2
 8004320:	6123      	str	r3, [r4, #16]
 8004322:	e7ba      	b.n	800429a <_printf_i+0x152>
 8004324:	680b      	ldr	r3, [r1, #0]
 8004326:	1d1a      	adds	r2, r3, #4
 8004328:	600a      	str	r2, [r1, #0]
 800432a:	681e      	ldr	r6, [r3, #0]
 800432c:	2100      	movs	r1, #0
 800432e:	4630      	mov	r0, r6
 8004330:	6862      	ldr	r2, [r4, #4]
 8004332:	f000 f82f 	bl	8004394 <memchr>
 8004336:	b108      	cbz	r0, 800433c <_printf_i+0x1f4>
 8004338:	1b80      	subs	r0, r0, r6
 800433a:	6060      	str	r0, [r4, #4]
 800433c:	6863      	ldr	r3, [r4, #4]
 800433e:	6123      	str	r3, [r4, #16]
 8004340:	2300      	movs	r3, #0
 8004342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004346:	e7a8      	b.n	800429a <_printf_i+0x152>
 8004348:	4632      	mov	r2, r6
 800434a:	4649      	mov	r1, r9
 800434c:	4640      	mov	r0, r8
 800434e:	6923      	ldr	r3, [r4, #16]
 8004350:	47d0      	blx	sl
 8004352:	3001      	adds	r0, #1
 8004354:	d0ab      	beq.n	80042ae <_printf_i+0x166>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	079b      	lsls	r3, r3, #30
 800435a:	d413      	bmi.n	8004384 <_printf_i+0x23c>
 800435c:	68e0      	ldr	r0, [r4, #12]
 800435e:	9b03      	ldr	r3, [sp, #12]
 8004360:	4298      	cmp	r0, r3
 8004362:	bfb8      	it	lt
 8004364:	4618      	movlt	r0, r3
 8004366:	e7a4      	b.n	80042b2 <_printf_i+0x16a>
 8004368:	2301      	movs	r3, #1
 800436a:	4632      	mov	r2, r6
 800436c:	4649      	mov	r1, r9
 800436e:	4640      	mov	r0, r8
 8004370:	47d0      	blx	sl
 8004372:	3001      	adds	r0, #1
 8004374:	d09b      	beq.n	80042ae <_printf_i+0x166>
 8004376:	3501      	adds	r5, #1
 8004378:	68e3      	ldr	r3, [r4, #12]
 800437a:	9903      	ldr	r1, [sp, #12]
 800437c:	1a5b      	subs	r3, r3, r1
 800437e:	42ab      	cmp	r3, r5
 8004380:	dcf2      	bgt.n	8004368 <_printf_i+0x220>
 8004382:	e7eb      	b.n	800435c <_printf_i+0x214>
 8004384:	2500      	movs	r5, #0
 8004386:	f104 0619 	add.w	r6, r4, #25
 800438a:	e7f5      	b.n	8004378 <_printf_i+0x230>
 800438c:	08004655 	.word	0x08004655
 8004390:	08004666 	.word	0x08004666

08004394 <memchr>:
 8004394:	4603      	mov	r3, r0
 8004396:	b510      	push	{r4, lr}
 8004398:	b2c9      	uxtb	r1, r1
 800439a:	4402      	add	r2, r0
 800439c:	4293      	cmp	r3, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	d101      	bne.n	80043a6 <memchr+0x12>
 80043a2:	2000      	movs	r0, #0
 80043a4:	e003      	b.n	80043ae <memchr+0x1a>
 80043a6:	7804      	ldrb	r4, [r0, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	428c      	cmp	r4, r1
 80043ac:	d1f6      	bne.n	800439c <memchr+0x8>
 80043ae:	bd10      	pop	{r4, pc}

080043b0 <memcpy>:
 80043b0:	440a      	add	r2, r1
 80043b2:	4291      	cmp	r1, r2
 80043b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043b8:	d100      	bne.n	80043bc <memcpy+0xc>
 80043ba:	4770      	bx	lr
 80043bc:	b510      	push	{r4, lr}
 80043be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043c2:	4291      	cmp	r1, r2
 80043c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043c8:	d1f9      	bne.n	80043be <memcpy+0xe>
 80043ca:	bd10      	pop	{r4, pc}

080043cc <memmove>:
 80043cc:	4288      	cmp	r0, r1
 80043ce:	b510      	push	{r4, lr}
 80043d0:	eb01 0402 	add.w	r4, r1, r2
 80043d4:	d902      	bls.n	80043dc <memmove+0x10>
 80043d6:	4284      	cmp	r4, r0
 80043d8:	4623      	mov	r3, r4
 80043da:	d807      	bhi.n	80043ec <memmove+0x20>
 80043dc:	1e43      	subs	r3, r0, #1
 80043de:	42a1      	cmp	r1, r4
 80043e0:	d008      	beq.n	80043f4 <memmove+0x28>
 80043e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043ea:	e7f8      	b.n	80043de <memmove+0x12>
 80043ec:	4601      	mov	r1, r0
 80043ee:	4402      	add	r2, r0
 80043f0:	428a      	cmp	r2, r1
 80043f2:	d100      	bne.n	80043f6 <memmove+0x2a>
 80043f4:	bd10      	pop	{r4, pc}
 80043f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043fe:	e7f7      	b.n	80043f0 <memmove+0x24>

08004400 <_free_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	4605      	mov	r5, r0
 8004404:	2900      	cmp	r1, #0
 8004406:	d043      	beq.n	8004490 <_free_r+0x90>
 8004408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800440c:	1f0c      	subs	r4, r1, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	bfb8      	it	lt
 8004412:	18e4      	addlt	r4, r4, r3
 8004414:	f000 f8d0 	bl	80045b8 <__malloc_lock>
 8004418:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <_free_r+0x94>)
 800441a:	6813      	ldr	r3, [r2, #0]
 800441c:	4610      	mov	r0, r2
 800441e:	b933      	cbnz	r3, 800442e <_free_r+0x2e>
 8004420:	6063      	str	r3, [r4, #4]
 8004422:	6014      	str	r4, [r2, #0]
 8004424:	4628      	mov	r0, r5
 8004426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800442a:	f000 b8cb 	b.w	80045c4 <__malloc_unlock>
 800442e:	42a3      	cmp	r3, r4
 8004430:	d90a      	bls.n	8004448 <_free_r+0x48>
 8004432:	6821      	ldr	r1, [r4, #0]
 8004434:	1862      	adds	r2, r4, r1
 8004436:	4293      	cmp	r3, r2
 8004438:	bf01      	itttt	eq
 800443a:	681a      	ldreq	r2, [r3, #0]
 800443c:	685b      	ldreq	r3, [r3, #4]
 800443e:	1852      	addeq	r2, r2, r1
 8004440:	6022      	streq	r2, [r4, #0]
 8004442:	6063      	str	r3, [r4, #4]
 8004444:	6004      	str	r4, [r0, #0]
 8004446:	e7ed      	b.n	8004424 <_free_r+0x24>
 8004448:	461a      	mov	r2, r3
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	b10b      	cbz	r3, 8004452 <_free_r+0x52>
 800444e:	42a3      	cmp	r3, r4
 8004450:	d9fa      	bls.n	8004448 <_free_r+0x48>
 8004452:	6811      	ldr	r1, [r2, #0]
 8004454:	1850      	adds	r0, r2, r1
 8004456:	42a0      	cmp	r0, r4
 8004458:	d10b      	bne.n	8004472 <_free_r+0x72>
 800445a:	6820      	ldr	r0, [r4, #0]
 800445c:	4401      	add	r1, r0
 800445e:	1850      	adds	r0, r2, r1
 8004460:	4283      	cmp	r3, r0
 8004462:	6011      	str	r1, [r2, #0]
 8004464:	d1de      	bne.n	8004424 <_free_r+0x24>
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4401      	add	r1, r0
 800446c:	6011      	str	r1, [r2, #0]
 800446e:	6053      	str	r3, [r2, #4]
 8004470:	e7d8      	b.n	8004424 <_free_r+0x24>
 8004472:	d902      	bls.n	800447a <_free_r+0x7a>
 8004474:	230c      	movs	r3, #12
 8004476:	602b      	str	r3, [r5, #0]
 8004478:	e7d4      	b.n	8004424 <_free_r+0x24>
 800447a:	6820      	ldr	r0, [r4, #0]
 800447c:	1821      	adds	r1, r4, r0
 800447e:	428b      	cmp	r3, r1
 8004480:	bf01      	itttt	eq
 8004482:	6819      	ldreq	r1, [r3, #0]
 8004484:	685b      	ldreq	r3, [r3, #4]
 8004486:	1809      	addeq	r1, r1, r0
 8004488:	6021      	streq	r1, [r4, #0]
 800448a:	6063      	str	r3, [r4, #4]
 800448c:	6054      	str	r4, [r2, #4]
 800448e:	e7c9      	b.n	8004424 <_free_r+0x24>
 8004490:	bd38      	pop	{r3, r4, r5, pc}
 8004492:	bf00      	nop
 8004494:	200000f4 	.word	0x200000f4

08004498 <_malloc_r>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	1ccd      	adds	r5, r1, #3
 800449c:	f025 0503 	bic.w	r5, r5, #3
 80044a0:	3508      	adds	r5, #8
 80044a2:	2d0c      	cmp	r5, #12
 80044a4:	bf38      	it	cc
 80044a6:	250c      	movcc	r5, #12
 80044a8:	2d00      	cmp	r5, #0
 80044aa:	4606      	mov	r6, r0
 80044ac:	db01      	blt.n	80044b2 <_malloc_r+0x1a>
 80044ae:	42a9      	cmp	r1, r5
 80044b0:	d903      	bls.n	80044ba <_malloc_r+0x22>
 80044b2:	230c      	movs	r3, #12
 80044b4:	6033      	str	r3, [r6, #0]
 80044b6:	2000      	movs	r0, #0
 80044b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ba:	f000 f87d 	bl	80045b8 <__malloc_lock>
 80044be:	4921      	ldr	r1, [pc, #132]	; (8004544 <_malloc_r+0xac>)
 80044c0:	680a      	ldr	r2, [r1, #0]
 80044c2:	4614      	mov	r4, r2
 80044c4:	b99c      	cbnz	r4, 80044ee <_malloc_r+0x56>
 80044c6:	4f20      	ldr	r7, [pc, #128]	; (8004548 <_malloc_r+0xb0>)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	b923      	cbnz	r3, 80044d6 <_malloc_r+0x3e>
 80044cc:	4621      	mov	r1, r4
 80044ce:	4630      	mov	r0, r6
 80044d0:	f000 f862 	bl	8004598 <_sbrk_r>
 80044d4:	6038      	str	r0, [r7, #0]
 80044d6:	4629      	mov	r1, r5
 80044d8:	4630      	mov	r0, r6
 80044da:	f000 f85d 	bl	8004598 <_sbrk_r>
 80044de:	1c43      	adds	r3, r0, #1
 80044e0:	d123      	bne.n	800452a <_malloc_r+0x92>
 80044e2:	230c      	movs	r3, #12
 80044e4:	4630      	mov	r0, r6
 80044e6:	6033      	str	r3, [r6, #0]
 80044e8:	f000 f86c 	bl	80045c4 <__malloc_unlock>
 80044ec:	e7e3      	b.n	80044b6 <_malloc_r+0x1e>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	1b5b      	subs	r3, r3, r5
 80044f2:	d417      	bmi.n	8004524 <_malloc_r+0x8c>
 80044f4:	2b0b      	cmp	r3, #11
 80044f6:	d903      	bls.n	8004500 <_malloc_r+0x68>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	441c      	add	r4, r3
 80044fc:	6025      	str	r5, [r4, #0]
 80044fe:	e004      	b.n	800450a <_malloc_r+0x72>
 8004500:	6863      	ldr	r3, [r4, #4]
 8004502:	42a2      	cmp	r2, r4
 8004504:	bf0c      	ite	eq
 8004506:	600b      	streq	r3, [r1, #0]
 8004508:	6053      	strne	r3, [r2, #4]
 800450a:	4630      	mov	r0, r6
 800450c:	f000 f85a 	bl	80045c4 <__malloc_unlock>
 8004510:	f104 000b 	add.w	r0, r4, #11
 8004514:	1d23      	adds	r3, r4, #4
 8004516:	f020 0007 	bic.w	r0, r0, #7
 800451a:	1ac2      	subs	r2, r0, r3
 800451c:	d0cc      	beq.n	80044b8 <_malloc_r+0x20>
 800451e:	1a1b      	subs	r3, r3, r0
 8004520:	50a3      	str	r3, [r4, r2]
 8004522:	e7c9      	b.n	80044b8 <_malloc_r+0x20>
 8004524:	4622      	mov	r2, r4
 8004526:	6864      	ldr	r4, [r4, #4]
 8004528:	e7cc      	b.n	80044c4 <_malloc_r+0x2c>
 800452a:	1cc4      	adds	r4, r0, #3
 800452c:	f024 0403 	bic.w	r4, r4, #3
 8004530:	42a0      	cmp	r0, r4
 8004532:	d0e3      	beq.n	80044fc <_malloc_r+0x64>
 8004534:	1a21      	subs	r1, r4, r0
 8004536:	4630      	mov	r0, r6
 8004538:	f000 f82e 	bl	8004598 <_sbrk_r>
 800453c:	3001      	adds	r0, #1
 800453e:	d1dd      	bne.n	80044fc <_malloc_r+0x64>
 8004540:	e7cf      	b.n	80044e2 <_malloc_r+0x4a>
 8004542:	bf00      	nop
 8004544:	200000f4 	.word	0x200000f4
 8004548:	200000f8 	.word	0x200000f8

0800454c <_realloc_r>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	4607      	mov	r7, r0
 8004550:	4614      	mov	r4, r2
 8004552:	460e      	mov	r6, r1
 8004554:	b921      	cbnz	r1, 8004560 <_realloc_r+0x14>
 8004556:	4611      	mov	r1, r2
 8004558:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800455c:	f7ff bf9c 	b.w	8004498 <_malloc_r>
 8004560:	b922      	cbnz	r2, 800456c <_realloc_r+0x20>
 8004562:	f7ff ff4d 	bl	8004400 <_free_r>
 8004566:	4625      	mov	r5, r4
 8004568:	4628      	mov	r0, r5
 800456a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800456c:	f000 f830 	bl	80045d0 <_malloc_usable_size_r>
 8004570:	42a0      	cmp	r0, r4
 8004572:	d20f      	bcs.n	8004594 <_realloc_r+0x48>
 8004574:	4621      	mov	r1, r4
 8004576:	4638      	mov	r0, r7
 8004578:	f7ff ff8e 	bl	8004498 <_malloc_r>
 800457c:	4605      	mov	r5, r0
 800457e:	2800      	cmp	r0, #0
 8004580:	d0f2      	beq.n	8004568 <_realloc_r+0x1c>
 8004582:	4631      	mov	r1, r6
 8004584:	4622      	mov	r2, r4
 8004586:	f7ff ff13 	bl	80043b0 <memcpy>
 800458a:	4631      	mov	r1, r6
 800458c:	4638      	mov	r0, r7
 800458e:	f7ff ff37 	bl	8004400 <_free_r>
 8004592:	e7e9      	b.n	8004568 <_realloc_r+0x1c>
 8004594:	4635      	mov	r5, r6
 8004596:	e7e7      	b.n	8004568 <_realloc_r+0x1c>

08004598 <_sbrk_r>:
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	2300      	movs	r3, #0
 800459c:	4d05      	ldr	r5, [pc, #20]	; (80045b4 <_sbrk_r+0x1c>)
 800459e:	4604      	mov	r4, r0
 80045a0:	4608      	mov	r0, r1
 80045a2:	602b      	str	r3, [r5, #0]
 80045a4:	f7fc fdac 	bl	8001100 <_sbrk>
 80045a8:	1c43      	adds	r3, r0, #1
 80045aa:	d102      	bne.n	80045b2 <_sbrk_r+0x1a>
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	b103      	cbz	r3, 80045b2 <_sbrk_r+0x1a>
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	bd38      	pop	{r3, r4, r5, pc}
 80045b4:	200001f0 	.word	0x200001f0

080045b8 <__malloc_lock>:
 80045b8:	4801      	ldr	r0, [pc, #4]	; (80045c0 <__malloc_lock+0x8>)
 80045ba:	f000 b811 	b.w	80045e0 <__retarget_lock_acquire_recursive>
 80045be:	bf00      	nop
 80045c0:	200001f8 	.word	0x200001f8

080045c4 <__malloc_unlock>:
 80045c4:	4801      	ldr	r0, [pc, #4]	; (80045cc <__malloc_unlock+0x8>)
 80045c6:	f000 b80c 	b.w	80045e2 <__retarget_lock_release_recursive>
 80045ca:	bf00      	nop
 80045cc:	200001f8 	.word	0x200001f8

080045d0 <_malloc_usable_size_r>:
 80045d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d4:	1f18      	subs	r0, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bfbc      	itt	lt
 80045da:	580b      	ldrlt	r3, [r1, r0]
 80045dc:	18c0      	addlt	r0, r0, r3
 80045de:	4770      	bx	lr

080045e0 <__retarget_lock_acquire_recursive>:
 80045e0:	4770      	bx	lr

080045e2 <__retarget_lock_release_recursive>:
 80045e2:	4770      	bx	lr

080045e4 <_init>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	bf00      	nop
 80045e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ea:	bc08      	pop	{r3}
 80045ec:	469e      	mov	lr, r3
 80045ee:	4770      	bx	lr

080045f0 <_fini>:
 80045f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f2:	bf00      	nop
 80045f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f6:	bc08      	pop	{r3}
 80045f8:	469e      	mov	lr, r3
 80045fa:	4770      	bx	lr
