
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004504  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800468c  0800468c  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800468c  0800468c  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800468c  0800468c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004690  08004690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000098  0800472c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  0800472c  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e803  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002395  00000000  00000000  0002e8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00030c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00031948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018583  00000000  00000000  00032558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3e3  00000000  00000000  0004aadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af65  00000000  00000000  00058ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3e23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003908  00000000  00000000  000e3e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080045f8 	.word	0x080045f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080045f8 	.word	0x080045f8

0800014c <initial>:
int time2;
int mode;
int initial_flag=1;

void initial()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	status_1=AUTO_RED;
 8000150:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <initial+0x38>)
 8000152:	2200      	movs	r2, #0
 8000154:	601a      	str	r2, [r3, #0]
	status_2=AUTO_GREEN;
 8000156:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <initial+0x3c>)
 8000158:	2202      	movs	r2, #2
 800015a:	601a      	str	r2, [r3, #0]
	mode=1;
 800015c:	4b0b      	ldr	r3, [pc, #44]	; (800018c <initial+0x40>)
 800015e:	2201      	movs	r2, #1
 8000160:	601a      	str	r2, [r3, #0]
	time1=lightbufferRun[AUTO_RED];
 8000162:	4b0b      	ldr	r3, [pc, #44]	; (8000190 <initial+0x44>)
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	461a      	mov	r2, r3
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <initial+0x48>)
 800016a:	601a      	str	r2, [r3, #0]
	time2=lightbufferRun[AUTO_GREEN];
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <initial+0x44>)
 800016e:	789b      	ldrb	r3, [r3, #2]
 8000170:	461a      	mov	r2, r3
 8000172:	4b09      	ldr	r3, [pc, #36]	; (8000198 <initial+0x4c>)
 8000174:	601a      	str	r2, [r3, #0]
	setTimerRun(1000);
 8000176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800017a:	f001 f823 	bl	80011c4 <setTimerRun>
}
 800017e:	bf00      	nop
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	200000fc 	.word	0x200000fc
 8000188:	20000104 	.word	0x20000104
 800018c:	20000100 	.word	0x20000100
 8000190:	20000004 	.word	0x20000004
 8000194:	20000108 	.word	0x20000108
 8000198:	2000010c 	.word	0x2000010c

0800019c <traffic>:

void traffic()
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	if(status_1==AUTO_RED)
 80001a0:	4b80      	ldr	r3, [pc, #512]	; (80003a4 <traffic+0x208>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d122      	bne.n	80001ee <traffic+0x52>
	{
		HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
 80001a8:	2201      	movs	r2, #1
 80001aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ae:	487e      	ldr	r0, [pc, #504]	; (80003a8 <traffic+0x20c>)
 80001b0:	f001 fcd5 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2108      	movs	r1, #8
 80001b8:	487c      	ldr	r0, [pc, #496]	; (80003ac <traffic+0x210>)
 80001ba:	f001 fcd0 	bl	8001b5e <HAL_GPIO_WritePin>
		if(time1==0)
 80001be:	4b7c      	ldr	r3, [pc, #496]	; (80003b0 <traffic+0x214>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d160      	bne.n	8000288 <traffic+0xec>
		{
			status_1=AUTO_GREEN;
 80001c6:	4b77      	ldr	r3, [pc, #476]	; (80003a4 <traffic+0x208>)
 80001c8:	2202      	movs	r2, #2
 80001ca:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d2:	4875      	ldr	r0, [pc, #468]	; (80003a8 <traffic+0x20c>)
 80001d4:	f001 fcc3 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2108      	movs	r1, #8
 80001dc:	4873      	ldr	r0, [pc, #460]	; (80003ac <traffic+0x210>)
 80001de:	f001 fcbe 	bl	8001b5e <HAL_GPIO_WritePin>
			time1=lightbufferRun[AUTO_GREEN];
 80001e2:	4b74      	ldr	r3, [pc, #464]	; (80003b4 <traffic+0x218>)
 80001e4:	789b      	ldrb	r3, [r3, #2]
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b71      	ldr	r3, [pc, #452]	; (80003b0 <traffic+0x214>)
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	e04c      	b.n	8000288 <traffic+0xec>
		}
	}
	else if(status_1==AUTO_GREEN)
 80001ee:	4b6d      	ldr	r3, [pc, #436]	; (80003a4 <traffic+0x208>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b02      	cmp	r3, #2
 80001f4:	d122      	bne.n	800023c <traffic+0xa0>
	{
		HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fc:	486a      	ldr	r0, [pc, #424]	; (80003a8 <traffic+0x20c>)
 80001fe:	f001 fcae 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
 8000202:	2201      	movs	r2, #1
 8000204:	2108      	movs	r1, #8
 8000206:	4869      	ldr	r0, [pc, #420]	; (80003ac <traffic+0x210>)
 8000208:	f001 fca9 	bl	8001b5e <HAL_GPIO_WritePin>
		if(time1==0)
 800020c:	4b68      	ldr	r3, [pc, #416]	; (80003b0 <traffic+0x214>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d139      	bne.n	8000288 <traffic+0xec>
		{
			status_1=AUTO_YELLOW;
 8000214:	4b63      	ldr	r3, [pc, #396]	; (80003a4 <traffic+0x208>)
 8000216:	2201      	movs	r2, #1
 8000218:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	4861      	ldr	r0, [pc, #388]	; (80003a8 <traffic+0x20c>)
 8000222:	f001 fc9c 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
 8000226:	2201      	movs	r2, #1
 8000228:	2108      	movs	r1, #8
 800022a:	4860      	ldr	r0, [pc, #384]	; (80003ac <traffic+0x210>)
 800022c:	f001 fc97 	bl	8001b5e <HAL_GPIO_WritePin>
			time1=lightbufferRun[AUTO_YELLOW];
 8000230:	4b60      	ldr	r3, [pc, #384]	; (80003b4 <traffic+0x218>)
 8000232:	785b      	ldrb	r3, [r3, #1]
 8000234:	461a      	mov	r2, r3
 8000236:	4b5e      	ldr	r3, [pc, #376]	; (80003b0 <traffic+0x214>)
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	e025      	b.n	8000288 <traffic+0xec>
		}
	}
	else if(status_1==AUTO_YELLOW)
 800023c:	4b59      	ldr	r3, [pc, #356]	; (80003a4 <traffic+0x208>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d121      	bne.n	8000288 <traffic+0xec>
	{
		HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800024a:	4857      	ldr	r0, [pc, #348]	; (80003a8 <traffic+0x20c>)
 800024c:	f001 fc87 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
 8000250:	2201      	movs	r2, #1
 8000252:	2108      	movs	r1, #8
 8000254:	4855      	ldr	r0, [pc, #340]	; (80003ac <traffic+0x210>)
 8000256:	f001 fc82 	bl	8001b5e <HAL_GPIO_WritePin>
		if(time1==0)
 800025a:	4b55      	ldr	r3, [pc, #340]	; (80003b0 <traffic+0x214>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d112      	bne.n	8000288 <traffic+0xec>
		{
			status_1=AUTO_RED;
 8000262:	4b50      	ldr	r3, [pc, #320]	; (80003a4 <traffic+0x208>)
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800026e:	484e      	ldr	r0, [pc, #312]	; (80003a8 <traffic+0x20c>)
 8000270:	f001 fc75 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	2108      	movs	r1, #8
 8000278:	484c      	ldr	r0, [pc, #304]	; (80003ac <traffic+0x210>)
 800027a:	f001 fc70 	bl	8001b5e <HAL_GPIO_WritePin>
			time1=lightbufferRun[AUTO_RED];
 800027e:	4b4d      	ldr	r3, [pc, #308]	; (80003b4 <traffic+0x218>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	461a      	mov	r2, r3
 8000284:	4b4a      	ldr	r3, [pc, #296]	; (80003b0 <traffic+0x214>)
 8000286:	601a      	str	r2, [r3, #0]
		}
	}
	if(status_2==AUTO_RED)
 8000288:	4b4b      	ldr	r3, [pc, #300]	; (80003b8 <traffic+0x21c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d120      	bne.n	80002d2 <traffic+0x136>
	{
		HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
 8000290:	2201      	movs	r2, #1
 8000292:	2120      	movs	r1, #32
 8000294:	4845      	ldr	r0, [pc, #276]	; (80003ac <traffic+0x210>)
 8000296:	f001 fc62 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	2110      	movs	r1, #16
 800029e:	4843      	ldr	r0, [pc, #268]	; (80003ac <traffic+0x210>)
 80002a0:	f001 fc5d 	bl	8001b5e <HAL_GPIO_WritePin>
		if(time2==0)
 80002a4:	4b45      	ldr	r3, [pc, #276]	; (80003bc <traffic+0x220>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d15b      	bne.n	8000364 <traffic+0x1c8>
		{
			status_2=AUTO_GREEN;
 80002ac:	4b42      	ldr	r3, [pc, #264]	; (80003b8 <traffic+0x21c>)
 80002ae:	2202      	movs	r2, #2
 80002b0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2120      	movs	r1, #32
 80002b6:	483d      	ldr	r0, [pc, #244]	; (80003ac <traffic+0x210>)
 80002b8:	f001 fc51 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	2110      	movs	r1, #16
 80002c0:	483a      	ldr	r0, [pc, #232]	; (80003ac <traffic+0x210>)
 80002c2:	f001 fc4c 	bl	8001b5e <HAL_GPIO_WritePin>
			time2=lightbufferRun[AUTO_GREEN];
 80002c6:	4b3b      	ldr	r3, [pc, #236]	; (80003b4 <traffic+0x218>)
 80002c8:	789b      	ldrb	r3, [r3, #2]
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b3b      	ldr	r3, [pc, #236]	; (80003bc <traffic+0x220>)
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	e048      	b.n	8000364 <traffic+0x1c8>
		}
	}
	else if(status_2==AUTO_GREEN)
 80002d2:	4b39      	ldr	r3, [pc, #228]	; (80003b8 <traffic+0x21c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d120      	bne.n	800031c <traffic+0x180>
	{
		HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2120      	movs	r1, #32
 80002de:	4833      	ldr	r0, [pc, #204]	; (80003ac <traffic+0x210>)
 80002e0:	f001 fc3d 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	2110      	movs	r1, #16
 80002e8:	4830      	ldr	r0, [pc, #192]	; (80003ac <traffic+0x210>)
 80002ea:	f001 fc38 	bl	8001b5e <HAL_GPIO_WritePin>
		if(time2==0)
 80002ee:	4b33      	ldr	r3, [pc, #204]	; (80003bc <traffic+0x220>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d136      	bne.n	8000364 <traffic+0x1c8>
		{
			status_2=AUTO_YELLOW;
 80002f6:	4b30      	ldr	r3, [pc, #192]	; (80003b8 <traffic+0x21c>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2120      	movs	r1, #32
 8000300:	482a      	ldr	r0, [pc, #168]	; (80003ac <traffic+0x210>)
 8000302:	f001 fc2c 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
 8000306:	2201      	movs	r2, #1
 8000308:	2110      	movs	r1, #16
 800030a:	4828      	ldr	r0, [pc, #160]	; (80003ac <traffic+0x210>)
 800030c:	f001 fc27 	bl	8001b5e <HAL_GPIO_WritePin>
			time2=lightbufferRun[AUTO_YELLOW];
 8000310:	4b28      	ldr	r3, [pc, #160]	; (80003b4 <traffic+0x218>)
 8000312:	785b      	ldrb	r3, [r3, #1]
 8000314:	461a      	mov	r2, r3
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <traffic+0x220>)
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	e023      	b.n	8000364 <traffic+0x1c8>
		}
	}
	else if(status_2==AUTO_YELLOW)
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <traffic+0x21c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d11f      	bne.n	8000364 <traffic+0x1c8>
	{
		HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
 8000324:	2201      	movs	r2, #1
 8000326:	2120      	movs	r1, #32
 8000328:	4820      	ldr	r0, [pc, #128]	; (80003ac <traffic+0x210>)
 800032a:	f001 fc18 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2110      	movs	r1, #16
 8000332:	481e      	ldr	r0, [pc, #120]	; (80003ac <traffic+0x210>)
 8000334:	f001 fc13 	bl	8001b5e <HAL_GPIO_WritePin>
		if(time2==0)
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <traffic+0x220>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d111      	bne.n	8000364 <traffic+0x1c8>
		{
			status_2=AUTO_RED;
 8000340:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <traffic+0x21c>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2120      	movs	r1, #32
 800034a:	4818      	ldr	r0, [pc, #96]	; (80003ac <traffic+0x210>)
 800034c:	f001 fc07 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2110      	movs	r1, #16
 8000354:	4815      	ldr	r0, [pc, #84]	; (80003ac <traffic+0x210>)
 8000356:	f001 fc02 	bl	8001b5e <HAL_GPIO_WritePin>
			time2=lightbufferRun[AUTO_RED];
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <traffic+0x218>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	461a      	mov	r2, r3
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <traffic+0x220>)
 8000362:	601a      	str	r2, [r3, #0]
		}
	}
	if(mode==1 && run_flag==1)
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <traffic+0x224>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d119      	bne.n	80003a0 <traffic+0x204>
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <traffic+0x228>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d115      	bne.n	80003a0 <traffic+0x204>
	{
		send_uart(time1, time2);
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <traffic+0x214>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a10      	ldr	r2, [pc, #64]	; (80003bc <traffic+0x220>)
 800037a:	6812      	ldr	r2, [r2, #0]
 800037c:	4611      	mov	r1, r2
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fb90 	bl	8000aa4 <send_uart>
		time1--;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <traffic+0x214>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	3b01      	subs	r3, #1
 800038a:	4a09      	ldr	r2, [pc, #36]	; (80003b0 <traffic+0x214>)
 800038c:	6013      	str	r3, [r2, #0]
		time2--;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <traffic+0x220>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a09      	ldr	r2, [pc, #36]	; (80003bc <traffic+0x220>)
 8000396:	6013      	str	r3, [r2, #0]
		setTimerRun(1000);
 8000398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039c:	f000 ff12 	bl	80011c4 <setTimerRun>
	}
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	200000fc 	.word	0x200000fc
 80003a8:	40010800 	.word	0x40010800
 80003ac:	40010c00 	.word	0x40010c00
 80003b0:	20000108 	.word	0x20000108
 80003b4:	20000004 	.word	0x20000004
 80003b8:	20000104 	.word	0x20000104
 80003bc:	2000010c 	.word	0x2000010c
 80003c0:	20000100 	.word	0x20000100
 80003c4:	200000d4 	.word	0x200000d4

080003c8 <updateMode>:
void updateMode()
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	mode++;
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <updateMode+0x24>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	4a06      	ldr	r2, [pc, #24]	; (80003ec <updateMode+0x24>)
 80003d4:	6013      	str	r3, [r2, #0]
	if(mode>4)
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <updateMode+0x24>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b04      	cmp	r3, #4
 80003dc:	dd02      	ble.n	80003e4 <updateMode+0x1c>
	{
		mode=1;
 80003de:	4b03      	ldr	r3, [pc, #12]	; (80003ec <updateMode+0x24>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	601a      	str	r2, [r3, #0]
	}
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	20000100 	.word	0x20000100

080003f0 <increase>:
void increase(int index)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	lightbufferMod[index]++;
 80003f8:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <increase+0x40>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	b2d9      	uxtb	r1, r3
 8000404:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <increase+0x40>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	460a      	mov	r2, r1
 800040c:	701a      	strb	r2, [r3, #0]
	if(lightbufferMod[index]>99)
 800040e:	4a08      	ldr	r2, [pc, #32]	; (8000430 <increase+0x40>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4413      	add	r3, r2
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b63      	cmp	r3, #99	; 0x63
 8000418:	d904      	bls.n	8000424 <increase+0x34>
	{
		lightbufferMod[index]=1;
 800041a:	4a05      	ldr	r2, [pc, #20]	; (8000430 <increase+0x40>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	2201      	movs	r2, #1
 8000422:	701a      	strb	r2, [r3, #0]
	}
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000000 	.word	0x20000000

08000434 <copyModtoRun>:
void copyModtoRun()
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
	for(int i=0;i<2;i++)
 800043a:	2300      	movs	r3, #0
 800043c:	607b      	str	r3, [r7, #4]
 800043e:	e00b      	b.n	8000458 <copyModtoRun+0x24>
	{
		lightbufferRun[i]=lightbufferMod[i];
 8000440:	4a0a      	ldr	r2, [pc, #40]	; (800046c <copyModtoRun+0x38>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	7819      	ldrb	r1, [r3, #0]
 8000448:	4a09      	ldr	r2, [pc, #36]	; (8000470 <copyModtoRun+0x3c>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	460a      	mov	r2, r1
 8000450:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<2;i++)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3301      	adds	r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b01      	cmp	r3, #1
 800045c:	ddf0      	ble.n	8000440 <copyModtoRun+0xc>
	}
}
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000000 	.word	0x20000000
 8000470:	20000004 	.word	0x20000004

08000474 <blinkLed>:
void blinkLed(int led)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	if((mode!=1) && (blink_flag==1))
 800047c:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <blinkLed+0x84>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d034      	beq.n	80004ee <blinkLed+0x7a>
 8000484:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <blinkLed+0x88>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d130      	bne.n	80004ee <blinkLed+0x7a>
	{
		if(led==RED)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d109      	bne.n	80004a6 <blinkLed+0x32>
		{
			HAL_GPIO_TogglePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin);
 8000492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000496:	481a      	ldr	r0, [pc, #104]	; (8000500 <blinkLed+0x8c>)
 8000498:	f001 fb79 	bl	8001b8e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin);
 800049c:	2120      	movs	r1, #32
 800049e:	4819      	ldr	r0, [pc, #100]	; (8000504 <blinkLed+0x90>)
 80004a0:	f001 fb75 	bl	8001b8e <HAL_GPIO_TogglePin>
 80004a4:	e01f      	b.n	80004e6 <blinkLed+0x72>
		}
		else if(led==YELLOW)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d111      	bne.n	80004d0 <blinkLed+0x5c>
		{
			HAL_GPIO_TogglePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin);
 80004ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b0:	4813      	ldr	r0, [pc, #76]	; (8000500 <blinkLed+0x8c>)
 80004b2:	f001 fb6c 	bl	8001b8e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin);
 80004b6:	2120      	movs	r1, #32
 80004b8:	4812      	ldr	r0, [pc, #72]	; (8000504 <blinkLed+0x90>)
 80004ba:	f001 fb68 	bl	8001b8e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin);
 80004be:	2108      	movs	r1, #8
 80004c0:	4810      	ldr	r0, [pc, #64]	; (8000504 <blinkLed+0x90>)
 80004c2:	f001 fb64 	bl	8001b8e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin);
 80004c6:	2110      	movs	r1, #16
 80004c8:	480e      	ldr	r0, [pc, #56]	; (8000504 <blinkLed+0x90>)
 80004ca:	f001 fb60 	bl	8001b8e <HAL_GPIO_TogglePin>
 80004ce:	e00a      	b.n	80004e6 <blinkLed+0x72>
		}
		else if(led==GREEN)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d107      	bne.n	80004e6 <blinkLed+0x72>
		{
			HAL_GPIO_TogglePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin);
 80004d6:	2108      	movs	r1, #8
 80004d8:	480a      	ldr	r0, [pc, #40]	; (8000504 <blinkLed+0x90>)
 80004da:	f001 fb58 	bl	8001b8e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin);
 80004de:	2110      	movs	r1, #16
 80004e0:	4808      	ldr	r0, [pc, #32]	; (8000504 <blinkLed+0x90>)
 80004e2:	f001 fb54 	bl	8001b8e <HAL_GPIO_TogglePin>
		}
		setTimerBlink(500);
 80004e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ea:	f000 fea3 	bl	8001234 <setTimerBlink>
	}
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000100 	.word	0x20000100
 80004fc:	200000e4 	.word	0x200000e4
 8000500:	40010800 	.word	0x40010800
 8000504:	40010c00 	.word	0x40010c00

08000508 <checkpes>:
void checkpes()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	if(status_1==AUTO_RED || status_1==MAN_RED)
 800050c:	4b20      	ldr	r3, [pc, #128]	; (8000590 <checkpes+0x88>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d003      	beq.n	800051c <checkpes+0x14>
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <checkpes+0x88>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b0b      	cmp	r3, #11
 800051a:	d10c      	bne.n	8000536 <checkpes+0x2e>
	{
		HAL_GPIO_WritePin(PES_RED_GPIO_Port, PES_RED_Pin, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000522:	481c      	ldr	r0, [pc, #112]	; (8000594 <checkpes+0x8c>)
 8000524:	f001 fb1b 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PES_GREEN_GPIO_Port, PES_GREEN_Pin, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052e:	481a      	ldr	r0, [pc, #104]	; (8000598 <checkpes+0x90>)
 8000530:	f001 fb15 	bl	8001b5e <HAL_GPIO_WritePin>
 8000534:	e029      	b.n	800058a <checkpes+0x82>
	}
	else if(status_1==AUTO_GREEN || status_1==MAN_GREEN)
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <checkpes+0x88>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d003      	beq.n	8000546 <checkpes+0x3e>
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <checkpes+0x88>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b0d      	cmp	r3, #13
 8000544:	d10c      	bne.n	8000560 <checkpes+0x58>
	{
		HAL_GPIO_WritePin(PES_RED_GPIO_Port, PES_RED_Pin, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054c:	4811      	ldr	r0, [pc, #68]	; (8000594 <checkpes+0x8c>)
 800054e:	f001 fb06 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PES_GREEN_GPIO_Port, PES_GREEN_Pin, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000558:	480f      	ldr	r0, [pc, #60]	; (8000598 <checkpes+0x90>)
 800055a:	f001 fb00 	bl	8001b5e <HAL_GPIO_WritePin>
 800055e:	e014      	b.n	800058a <checkpes+0x82>
	}
	else if(status_1==AUTO_YELLOW || status_1==MAN_YELLOW)
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <checkpes+0x88>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d003      	beq.n	8000570 <checkpes+0x68>
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <checkpes+0x88>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b0c      	cmp	r3, #12
 800056e:	d10c      	bne.n	800058a <checkpes+0x82>
	{
		HAL_GPIO_WritePin(PES_RED_GPIO_Port, PES_RED_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <checkpes+0x8c>)
 8000578:	f001 faf1 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PES_GREEN_GPIO_Port, PES_GREEN_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <checkpes+0x90>)
 8000584:	f001 faeb 	bl	8001b5e <HAL_GPIO_WritePin>
	}
}
 8000588:	e7ff      	b.n	800058a <checkpes+0x82>
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200000fc 	.word	0x200000fc
 8000594:	40010c00 	.word	0x40010c00
 8000598:	40010800 	.word	0x40010800

0800059c <fsm_automatic>:
uint8_t str[30]="\0";
int init_for_pes=0;
uint8_t buzzer=0;
int pes_start=0;
void fsm_automatic()
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	if(is_button_pressed(button1))
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 fa38 	bl	8000a18 <is_button_pressed>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d004      	beq.n	80005b8 <fsm_automatic+0x1c>
	{
		updateMode();
 80005ae:	f7ff ff0b 	bl	80003c8 <updateMode>
		initial_flag=1;
 80005b2:	4b9d      	ldr	r3, [pc, #628]	; (8000828 <fsm_automatic+0x28c>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(pes_but))
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 fa2d 	bl	8000a18 <is_button_pressed>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d019      	beq.n	80005f8 <fsm_automatic+0x5c>
	{
		int all_time=(lightbufferRun[0]+lightbufferRun[1]+lightbufferRun[2])*2000;
 80005c4:	4b99      	ldr	r3, [pc, #612]	; (800082c <fsm_automatic+0x290>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b98      	ldr	r3, [pc, #608]	; (800082c <fsm_automatic+0x290>)
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a96      	ldr	r2, [pc, #600]	; (800082c <fsm_automatic+0x290>)
 80005d2:	7892      	ldrb	r2, [r2, #2]
 80005d4:	4413      	add	r3, r2
 80005d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005da:	fb02 f303 	mul.w	r3, r2, r3
 80005de:	607b      	str	r3, [r7, #4]
		setTimerPesBut(all_time);
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 fe0b 	bl	80011fc <setTimerPesBut>
		pes_start=1;
 80005e6:	4b92      	ldr	r3, [pc, #584]	; (8000830 <fsm_automatic+0x294>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
		buzzer_flag=1;
 80005ec:	4b91      	ldr	r3, [pc, #580]	; (8000834 <fsm_automatic+0x298>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
		buzzer=0;
 80005f2:	4b91      	ldr	r3, [pc, #580]	; (8000838 <fsm_automatic+0x29c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
	}
	if(pes_start==1)
 80005f8:	4b8d      	ldr	r3, [pc, #564]	; (8000830 <fsm_automatic+0x294>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d11b      	bne.n	8000638 <fsm_automatic+0x9c>
	{
		checkpes();
 8000600:	f7ff ff82 	bl	8000508 <checkpes>
		buzzer_boi(buzzer);
 8000604:	4b8c      	ldr	r3, [pc, #560]	; (8000838 <fsm_automatic+0x29c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fa3b 	bl	8000a84 <buzzer_boi>
		if(buzzer_flag==1)
 800060e:	4b89      	ldr	r3, [pc, #548]	; (8000834 <fsm_automatic+0x298>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d110      	bne.n	8000638 <fsm_automatic+0x9c>
		{
			buzzer+=30;
 8000616:	4b88      	ldr	r3, [pc, #544]	; (8000838 <fsm_automatic+0x29c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	331e      	adds	r3, #30
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b86      	ldr	r3, [pc, #536]	; (8000838 <fsm_automatic+0x29c>)
 8000620:	701a      	strb	r2, [r3, #0]
			if(buzzer>=99)
 8000622:	4b85      	ldr	r3, [pc, #532]	; (8000838 <fsm_automatic+0x29c>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b62      	cmp	r3, #98	; 0x62
 8000628:	d902      	bls.n	8000630 <fsm_automatic+0x94>
			{
				buzzer=99;
 800062a:	4b83      	ldr	r3, [pc, #524]	; (8000838 <fsm_automatic+0x29c>)
 800062c:	2263      	movs	r2, #99	; 0x63
 800062e:	701a      	strb	r2, [r3, #0]
			}
			setTimerBuzzer(1000);
 8000630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000634:	f000 fe1a 	bl	800126c <setTimerBuzzer>
		}
	}
	if(pes_flag==1)
 8000638:	4b80      	ldr	r3, [pc, #512]	; (800083c <fsm_automatic+0x2a0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d111      	bne.n	8000664 <fsm_automatic+0xc8>
	{
		HAL_GPIO_WritePin(PES_RED_GPIO_Port, PES_RED_Pin, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000646:	487e      	ldr	r0, [pc, #504]	; (8000840 <fsm_automatic+0x2a4>)
 8000648:	f001 fa89 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PES_GREEN_GPIO_Port, PES_GREEN_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000652:	487c      	ldr	r0, [pc, #496]	; (8000844 <fsm_automatic+0x2a8>)
 8000654:	f001 fa83 	bl	8001b5e <HAL_GPIO_WritePin>
		buzzer=0;
 8000658:	4b77      	ldr	r3, [pc, #476]	; (8000838 <fsm_automatic+0x29c>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
		pes_start=0;
 800065e:	4b74      	ldr	r3, [pc, #464]	; (8000830 <fsm_automatic+0x294>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
	}
	switch(mode)
 8000664:	4b78      	ldr	r3, [pc, #480]	; (8000848 <fsm_automatic+0x2ac>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3b01      	subs	r3, #1
 800066a:	2b03      	cmp	r3, #3
 800066c:	f200 8152 	bhi.w	8000914 <fsm_automatic+0x378>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <fsm_automatic+0xdc>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000689 	.word	0x08000689
 800067c:	080006c5 	.word	0x080006c5
 8000680:	08000777 	.word	0x08000777
 8000684:	08000865 	.word	0x08000865
	{
	case 1:
		if(initial_flag==1)
 8000688:	4b67      	ldr	r3, [pc, #412]	; (8000828 <fsm_automatic+0x28c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d116      	bne.n	80006be <fsm_automatic+0x122>
		{
			initial_flag=0;
 8000690:	4b65      	ldr	r3, [pc, #404]	; (8000828 <fsm_automatic+0x28c>)
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
			status_1=AUTO_RED;
 8000696:	4b6d      	ldr	r3, [pc, #436]	; (800084c <fsm_automatic+0x2b0>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
			status_2=AUTO_GREEN;
 800069c:	4b6c      	ldr	r3, [pc, #432]	; (8000850 <fsm_automatic+0x2b4>)
 800069e:	2202      	movs	r2, #2
 80006a0:	601a      	str	r2, [r3, #0]
			time1=lightbufferRun[AUTO_RED];
 80006a2:	4b62      	ldr	r3, [pc, #392]	; (800082c <fsm_automatic+0x290>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b6a      	ldr	r3, [pc, #424]	; (8000854 <fsm_automatic+0x2b8>)
 80006aa:	601a      	str	r2, [r3, #0]
			time2=lightbufferRun[AUTO_GREEN];
 80006ac:	4b5f      	ldr	r3, [pc, #380]	; (800082c <fsm_automatic+0x290>)
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b69      	ldr	r3, [pc, #420]	; (8000858 <fsm_automatic+0x2bc>)
 80006b4:	601a      	str	r2, [r3, #0]
			setTimerRun(1000);
 80006b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ba:	f000 fd83 	bl	80011c4 <setTimerRun>
		}
		traffic();
 80006be:	f7ff fd6d 	bl	800019c <traffic>
		//send signal

		break;
 80006c2:	e12e      	b.n	8000922 <fsm_automatic+0x386>
	case 2:
		if(initial_flag==1)
 80006c4:	4b58      	ldr	r3, [pc, #352]	; (8000828 <fsm_automatic+0x28c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d124      	bne.n	8000716 <fsm_automatic+0x17a>
		{
			initial_flag=0;
 80006cc:	4b56      	ldr	r3, [pc, #344]	; (8000828 <fsm_automatic+0x28c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 80006d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80006d6:	f000 fd59 	bl	800118c <setTimerReset>
			status_1=MAN_RED;
 80006da:	4b5c      	ldr	r3, [pc, #368]	; (800084c <fsm_automatic+0x2b0>)
 80006dc:	220b      	movs	r2, #11
 80006de:	601a      	str	r2, [r3, #0]
			status_2=MAN_RED;
 80006e0:	4b5b      	ldr	r3, [pc, #364]	; (8000850 <fsm_automatic+0x2b4>)
 80006e2:	220b      	movs	r2, #11
 80006e4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ec:	4855      	ldr	r0, [pc, #340]	; (8000844 <fsm_automatic+0x2a8>)
 80006ee:	f001 fa36 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2120      	movs	r1, #32
 80006f6:	4852      	ldr	r0, [pc, #328]	; (8000840 <fsm_automatic+0x2a4>)
 80006f8:	f001 fa31 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2108      	movs	r1, #8
 8000700:	484f      	ldr	r0, [pc, #316]	; (8000840 <fsm_automatic+0x2a4>)
 8000702:	f001 fa2c 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2110      	movs	r1, #16
 800070a:	484d      	ldr	r0, [pc, #308]	; (8000840 <fsm_automatic+0x2a4>)
 800070c:	f001 fa27 	bl	8001b5e <HAL_GPIO_WritePin>
			blink_flag=1;
 8000710:	4b52      	ldr	r3, [pc, #328]	; (800085c <fsm_automatic+0x2c0>)
 8000712:	2201      	movs	r2, #1
 8000714:	601a      	str	r2, [r3, #0]
		}
		blinkLed(RED);
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff feac 	bl	8000474 <blinkLed>
		if(is_button_pressed(button2))
 800071c:	2001      	movs	r0, #1
 800071e:	f000 f97b 	bl	8000a18 <is_button_pressed>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00c      	beq.n	8000742 <fsm_automatic+0x1a6>
		{
			status_1=MAN_RED;
 8000728:	4b48      	ldr	r3, [pc, #288]	; (800084c <fsm_automatic+0x2b0>)
 800072a:	220b      	movs	r2, #11
 800072c:	601a      	str	r2, [r3, #0]
			status_2=MAN_RED;
 800072e:	4b48      	ldr	r3, [pc, #288]	; (8000850 <fsm_automatic+0x2b4>)
 8000730:	220b      	movs	r2, #11
 8000732:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 8000734:	f241 3088 	movw	r0, #5000	; 0x1388
 8000738:	f000 fd28 	bl	800118c <setTimerReset>
			increase(RED);
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff fe57 	bl	80003f0 <increase>
		}
		if(is_button_pressed(button3))
 8000742:	2002      	movs	r0, #2
 8000744:	f000 f968 	bl	8000a18 <is_button_pressed>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d007      	beq.n	800075e <fsm_automatic+0x1c2>
		{
			copyModtoRun();
 800074e:	f7ff fe71 	bl	8000434 <copyModtoRun>
			mode=1;
 8000752:	4b3d      	ldr	r3, [pc, #244]	; (8000848 <fsm_automatic+0x2ac>)
 8000754:	2201      	movs	r2, #1
 8000756:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 8000758:	4b33      	ldr	r3, [pc, #204]	; (8000828 <fsm_automatic+0x28c>)
 800075a:	2201      	movs	r2, #1
 800075c:	601a      	str	r2, [r3, #0]
		}
		if(reset_flag==1)
 800075e:	4b40      	ldr	r3, [pc, #256]	; (8000860 <fsm_automatic+0x2c4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	f040 80d8 	bne.w	8000918 <fsm_automatic+0x37c>
		{
			mode=1;
 8000768:	4b37      	ldr	r3, [pc, #220]	; (8000848 <fsm_automatic+0x2ac>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 800076e:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <fsm_automatic+0x28c>)
 8000770:	2201      	movs	r2, #1
 8000772:	601a      	str	r2, [r3, #0]
		}

		//send signal
		break;
 8000774:	e0d0      	b.n	8000918 <fsm_automatic+0x37c>
	case 3:
		if(initial_flag==1)
 8000776:	4b2c      	ldr	r3, [pc, #176]	; (8000828 <fsm_automatic+0x28c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d124      	bne.n	80007c8 <fsm_automatic+0x22c>
		{
			initial_flag=0;
 800077e:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <fsm_automatic+0x28c>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 8000784:	f241 3088 	movw	r0, #5000	; 0x1388
 8000788:	f000 fd00 	bl	800118c <setTimerReset>
			status_1=MAN_YELLOW;
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <fsm_automatic+0x2b0>)
 800078e:	220c      	movs	r2, #12
 8000790:	601a      	str	r2, [r3, #0]
			status_2=MAN_YELLOW;
 8000792:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <fsm_automatic+0x2b4>)
 8000794:	220c      	movs	r2, #12
 8000796:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800079e:	4829      	ldr	r0, [pc, #164]	; (8000844 <fsm_automatic+0x2a8>)
 80007a0:	f001 f9dd 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	4825      	ldr	r0, [pc, #148]	; (8000840 <fsm_automatic+0x2a4>)
 80007aa:	f001 f9d8 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2108      	movs	r1, #8
 80007b2:	4823      	ldr	r0, [pc, #140]	; (8000840 <fsm_automatic+0x2a4>)
 80007b4:	f001 f9d3 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2110      	movs	r1, #16
 80007bc:	4820      	ldr	r0, [pc, #128]	; (8000840 <fsm_automatic+0x2a4>)
 80007be:	f001 f9ce 	bl	8001b5e <HAL_GPIO_WritePin>
			blink_flag=1;
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <fsm_automatic+0x2c0>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	601a      	str	r2, [r3, #0]
		}
		blinkLed(YELLOW);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fe53 	bl	8000474 <blinkLed>
		if(is_button_pressed(button2))
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 f922 	bl	8000a18 <is_button_pressed>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00c      	beq.n	80007f4 <fsm_automatic+0x258>
		{
			status_1=MAN_YELLOW;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <fsm_automatic+0x2b0>)
 80007dc:	220c      	movs	r2, #12
 80007de:	601a      	str	r2, [r3, #0]
			status_2=MAN_YELLOW;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <fsm_automatic+0x2b4>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 80007e6:	f241 3088 	movw	r0, #5000	; 0x1388
 80007ea:	f000 fccf 	bl	800118c <setTimerReset>
			increase(YELLOW);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff fdfe 	bl	80003f0 <increase>
		}
		if(is_button_pressed(button3))
 80007f4:	2002      	movs	r0, #2
 80007f6:	f000 f90f 	bl	8000a18 <is_button_pressed>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d007      	beq.n	8000810 <fsm_automatic+0x274>
		{
			copyModtoRun();
 8000800:	f7ff fe18 	bl	8000434 <copyModtoRun>
			mode=1;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <fsm_automatic+0x2ac>)
 8000806:	2201      	movs	r2, #1
 8000808:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <fsm_automatic+0x28c>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
		}
		if(reset_flag==1)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <fsm_automatic+0x2c4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	f040 8081 	bne.w	800091c <fsm_automatic+0x380>
		{
			mode=1;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <fsm_automatic+0x2ac>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 8000820:	4b01      	ldr	r3, [pc, #4]	; (8000828 <fsm_automatic+0x28c>)
 8000822:	2201      	movs	r2, #1
 8000824:	601a      	str	r2, [r3, #0]
		}
		//send signal

		break;
 8000826:	e079      	b.n	800091c <fsm_automatic+0x380>
 8000828:	20000008 	.word	0x20000008
 800082c:	20000004 	.word	0x20000004
 8000830:	200000b8 	.word	0x200000b8
 8000834:	200000ec 	.word	0x200000ec
 8000838:	200000b4 	.word	0x200000b4
 800083c:	200000dc 	.word	0x200000dc
 8000840:	40010c00 	.word	0x40010c00
 8000844:	40010800 	.word	0x40010800
 8000848:	20000100 	.word	0x20000100
 800084c:	200000fc 	.word	0x200000fc
 8000850:	20000104 	.word	0x20000104
 8000854:	20000108 	.word	0x20000108
 8000858:	2000010c 	.word	0x2000010c
 800085c:	200000e4 	.word	0x200000e4
 8000860:	200000cc 	.word	0x200000cc
	case 4:
		if(initial_flag==1)
 8000864:	4b31      	ldr	r3, [pc, #196]	; (800092c <fsm_automatic+0x390>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d124      	bne.n	80008b6 <fsm_automatic+0x31a>
		{
			initial_flag=0;
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <fsm_automatic+0x390>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 8000872:	f241 3088 	movw	r0, #5000	; 0x1388
 8000876:	f000 fc89 	bl	800118c <setTimerReset>
			status_1=MAN_GREEN;
 800087a:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <fsm_automatic+0x394>)
 800087c:	220d      	movs	r2, #13
 800087e:	601a      	str	r2, [r3, #0]
			status_2=MAN_GREEN;
 8000880:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <fsm_automatic+0x398>)
 8000882:	220d      	movs	r2, #13
 8000884:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088c:	482a      	ldr	r0, [pc, #168]	; (8000938 <fsm_automatic+0x39c>)
 800088e:	f001 f966 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	4829      	ldr	r0, [pc, #164]	; (800093c <fsm_automatic+0x3a0>)
 8000898:	f001 f961 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2108      	movs	r1, #8
 80008a0:	4826      	ldr	r0, [pc, #152]	; (800093c <fsm_automatic+0x3a0>)
 80008a2:	f001 f95c 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2110      	movs	r1, #16
 80008aa:	4824      	ldr	r0, [pc, #144]	; (800093c <fsm_automatic+0x3a0>)
 80008ac:	f001 f957 	bl	8001b5e <HAL_GPIO_WritePin>
			blink_flag=1;
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <fsm_automatic+0x3a4>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	601a      	str	r2, [r3, #0]
		}
		blinkLed(GREEN);
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff fddc 	bl	8000474 <blinkLed>
		if(is_button_pressed(button2))
 80008bc:	2001      	movs	r0, #1
 80008be:	f000 f8ab 	bl	8000a18 <is_button_pressed>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d00c      	beq.n	80008e2 <fsm_automatic+0x346>
		{
			status_1=MAN_GREEN;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <fsm_automatic+0x394>)
 80008ca:	220d      	movs	r2, #13
 80008cc:	601a      	str	r2, [r3, #0]
			status_2=MAN_GREEN;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <fsm_automatic+0x398>)
 80008d0:	220d      	movs	r2, #13
 80008d2:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 80008d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80008d8:	f000 fc58 	bl	800118c <setTimerReset>
			increase(GREEN);
 80008dc:	2002      	movs	r0, #2
 80008de:	f7ff fd87 	bl	80003f0 <increase>
		}
		if(is_button_pressed(button3))
 80008e2:	2002      	movs	r0, #2
 80008e4:	f000 f898 	bl	8000a18 <is_button_pressed>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d007      	beq.n	80008fe <fsm_automatic+0x362>
		{
			copyModtoRun();
 80008ee:	f7ff fda1 	bl	8000434 <copyModtoRun>
			mode=1;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <fsm_automatic+0x3a8>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <fsm_automatic+0x390>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
		}
		if(reset_flag==1)
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <fsm_automatic+0x3ac>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d10c      	bne.n	8000920 <fsm_automatic+0x384>
		{
			mode=1;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <fsm_automatic+0x3a8>)
 8000908:	2201      	movs	r2, #1
 800090a:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <fsm_automatic+0x390>)
 800090e:	2201      	movs	r2, #1
 8000910:	601a      	str	r2, [r3, #0]
		}
		//send signal

		break;
 8000912:	e005      	b.n	8000920 <fsm_automatic+0x384>
	default:
		break;
 8000914:	bf00      	nop
 8000916:	e004      	b.n	8000922 <fsm_automatic+0x386>
		break;
 8000918:	bf00      	nop
 800091a:	e002      	b.n	8000922 <fsm_automatic+0x386>
		break;
 800091c:	bf00      	nop
 800091e:	e000      	b.n	8000922 <fsm_automatic+0x386>
		break;
 8000920:	bf00      	nop
	}

}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008
 8000930:	200000fc 	.word	0x200000fc
 8000934:	20000104 	.word	0x20000104
 8000938:	40010800 	.word	0x40010800
 800093c:	40010c00 	.word	0x40010c00
 8000940:	200000e4 	.word	0x200000e4
 8000944:	20000100 	.word	0x20000100
 8000948:	200000cc 	.word	0x200000cc

0800094c <button_reading>:

static uint16_t buttonPin[NO_OF_BUTTONS]={BUT_1_Pin,BUT_2_Pin,BUT_3_Pin,PES_BUT_Pin};
static GPIO_TypeDef* buttonPort[NO_OF_BUTTONS]={BUT_1_GPIO_Port,BUT_2_GPIO_Port,BUT_3_GPIO_Port,PES_BUT_GPIO_Port};
int duration_for_buttons;
void button_reading()
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<NO_OF_BUTTONS;i++)
 8000952:	2300      	movs	r3, #0
 8000954:	71fb      	strb	r3, [r7, #7]
 8000956:	e049      	b.n	80009ec <button_reading+0xa0>
	{
		debounceButtonBuffer2[i]=debounceButtonBuffer1[i];
 8000958:	79fa      	ldrb	r2, [r7, #7]
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	4927      	ldr	r1, [pc, #156]	; (80009fc <button_reading+0xb0>)
 800095e:	5c89      	ldrb	r1, [r1, r2]
 8000960:	4a27      	ldr	r2, [pc, #156]	; (8000a00 <button_reading+0xb4>)
 8000962:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i]=HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <button_reading+0xb8>)
 8000968:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	4926      	ldr	r1, [pc, #152]	; (8000a08 <button_reading+0xbc>)
 8000970:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000974:	79fc      	ldrb	r4, [r7, #7]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f001 f8d9 	bl	8001b30 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <button_reading+0xb0>)
 8000984:	551a      	strb	r2, [r3, r4]
		if(debounceButtonBuffer1[i]==debounceButtonBuffer2[i])
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <button_reading+0xb0>)
 800098a:	5cd2      	ldrb	r2, [r2, r3]
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	491c      	ldr	r1, [pc, #112]	; (8000a00 <button_reading+0xb4>)
 8000990:	5ccb      	ldrb	r3, [r1, r3]
 8000992:	429a      	cmp	r2, r3
 8000994:	d127      	bne.n	80009e6 <button_reading+0x9a>
		{
			if(debounceButtonBuffer3[i]!=debounceButtonBuffer1[i])
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <button_reading+0xc0>)
 800099a:	5cd2      	ldrb	r2, [r2, r3]
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4917      	ldr	r1, [pc, #92]	; (80009fc <button_reading+0xb0>)
 80009a0:	5ccb      	ldrb	r3, [r1, r3]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d012      	beq.n	80009cc <button_reading+0x80>
			{
				debounceButtonBuffer3[i]=debounceButtonBuffer1[i];
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4914      	ldr	r1, [pc, #80]	; (80009fc <button_reading+0xb0>)
 80009ac:	5c89      	ldrb	r1, [r1, r2]
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <button_reading+0xc0>)
 80009b0:	54d1      	strb	r1, [r2, r3]
				if(debounceButtonBuffer1[i]==BUTTON_IS_PRESSED)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4a11      	ldr	r2, [pc, #68]	; (80009fc <button_reading+0xb0>)
 80009b6:	5cd3      	ldrb	r3, [r2, r3]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d114      	bne.n	80009e6 <button_reading+0x9a>
				{
					buttonBuffer[i]=BUTTON_IS_PRESSED;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <button_reading+0xc4>)
 80009c0:	2100      	movs	r1, #0
 80009c2:	54d1      	strb	r1, [r2, r3]
					duration_for_buttons=100;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <button_reading+0xc8>)
 80009c6:	2264      	movs	r2, #100	; 0x64
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e00c      	b.n	80009e6 <button_reading+0x9a>
				}
			}
			else
			{
				duration_for_buttons--;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <button_reading+0xc8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <button_reading+0xc8>)
 80009d4:	6013      	str	r3, [r2, #0]
				if(duration_for_buttons<=0)
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <button_reading+0xc8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	dc03      	bgt.n	80009e6 <button_reading+0x9a>
				{
					debounceButtonBuffer3[i]=BUTTON_IS_RELEASED;
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <button_reading+0xc0>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<NO_OF_BUTTONS;i++)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	3301      	adds	r3, #1
 80009ea:	71fb      	strb	r3, [r7, #7]
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d9b2      	bls.n	8000958 <button_reading+0xc>
				}
			}
		}
	}
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	200000bc 	.word	0x200000bc
 8000a00:	200000c0 	.word	0x200000c0
 8000a04:	20000018 	.word	0x20000018
 8000a08:	20000010 	.word	0x20000010
 8000a0c:	200000c4 	.word	0x200000c4
 8000a10:	2000000c 	.word	0x2000000c
 8000a14:	20000110 	.word	0x20000110

08000a18 <is_button_pressed>:

int is_button_pressed(uint8_t index)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	if(buttonBuffer[index]==BUTTON_IS_PRESSED)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <is_button_pressed+0x2c>)
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d105      	bne.n	8000a38 <is_button_pressed+0x20>
	{
		buttonBuffer[index]=BUTTON_IS_RELEASED;
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <is_button_pressed+0x2c>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <is_button_pressed+0x22>
	}
	else return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	2000000c 	.word	0x2000000c

08000a48 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rx_data;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_UART_RxCpltCallback+0x30>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d10a      	bne.n	8000a70 <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Transmit(&huart2,&rx_data,sizeof(rx_data), 50);
 8000a5a:	2332      	movs	r3, #50	; 0x32
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4907      	ldr	r1, [pc, #28]	; (8000a7c <HAL_UART_RxCpltCallback+0x34>)
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <HAL_UART_RxCpltCallback+0x38>)
 8000a62:	f002 fc72 	bl	800334a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	4904      	ldr	r1, [pc, #16]	; (8000a7c <HAL_UART_RxCpltCallback+0x34>)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <HAL_UART_RxCpltCallback+0x38>)
 8000a6c:	f002 fcff 	bl	800346e <HAL_UART_Receive_IT>
	}
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	2000015c 	.word	0x2000015c
 8000a80:	200001a8 	.word	0x200001a8

08000a84 <buzzer_boi>:
void buzzer_boi(uint8_t buzzer)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,buzzer);
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <buzzer_boi+0x1c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	20000114 	.word	0x20000114

08000aa4 <send_uart>:
void send_uart(int value1,int value2)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
	uint8_t str[30]="\0";
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
 8000ac2:	615a      	str	r2, [r3, #20]
 8000ac4:	831a      	strh	r2, [r3, #24]
	sprintf(str,"!7SEG_1#: %d\r\n",value1);
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	490e      	ldr	r1, [pc, #56]	; (8000b08 <send_uart+0x64>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f003 f958 	bl	8003d84 <siprintf>
	HAL_UART_Transmit(&huart2,str,sizeof(str),50);
 8000ad4:	f107 0108 	add.w	r1, r7, #8
 8000ad8:	2332      	movs	r3, #50	; 0x32
 8000ada:	221e      	movs	r2, #30
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <send_uart+0x68>)
 8000ade:	f002 fc34 	bl	800334a <HAL_UART_Transmit>
	sprintf(str,"!7SEG_2#: %d\r\n",value2);
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	4909      	ldr	r1, [pc, #36]	; (8000b10 <send_uart+0x6c>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 f94a 	bl	8003d84 <siprintf>
	HAL_UART_Transmit(&huart2,str,sizeof(str),50);
 8000af0:	f107 0108 	add.w	r1, r7, #8
 8000af4:	2332      	movs	r3, #50	; 0x32
 8000af6:	221e      	movs	r2, #30
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <send_uart+0x68>)
 8000afa:	f002 fc26 	bl	800334a <HAL_UART_Transmit>
}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	08004610 	.word	0x08004610
 8000b0c:	200001a8 	.word	0x200001a8
 8000b10:	08004620 	.word	0x08004620

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b18:	f000 fc66 	bl	80013e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1c:	f000 f822 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b20:	f000 f948 	bl	8000db4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b24:	f000 f8a6 	bl	8000c74 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000b28:	f000 f858 	bl	8000bdc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b2c:	f000 f918 	bl	8000d60 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <main+0x40>)
 8000b32:	f001 fcaf 	bl	8002494 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (& huart2 , &rx_data , 1) ;
 8000b36:	2201      	movs	r2, #1
 8000b38:	4907      	ldr	r1, [pc, #28]	; (8000b58 <main+0x44>)
 8000b3a:	4808      	ldr	r0, [pc, #32]	; (8000b5c <main+0x48>)
 8000b3c:	f002 fc97 	bl	800346e <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000b40:	2100      	movs	r1, #0
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <main+0x4c>)
 8000b44:	f001 fd50 	bl	80025e8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initial();
 8000b48:	f7ff fb00 	bl	800014c <initial>
//HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, 0);
//HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, 0);
  while (1)
  {
	  fsm_automatic();
 8000b4c:	f7ff fd26 	bl	800059c <fsm_automatic>
 8000b50:	e7fc      	b.n	8000b4c <main+0x38>
 8000b52:	bf00      	nop
 8000b54:	20000160 	.word	0x20000160
 8000b58:	2000015c 	.word	0x2000015c
 8000b5c:	200001a8 	.word	0x200001a8
 8000b60:	20000114 	.word	0x20000114

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b090      	sub	sp, #64	; 0x40
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 0318 	add.w	r3, r7, #24
 8000b6e:	2228      	movs	r2, #40	; 0x28
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 f8fe 	bl	8003d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8e:	2310      	movs	r3, #16
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 f810 	bl	8001bc0 <HAL_RCC_OscConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ba6:	f000 f973 	bl	8000e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000baa:	230f      	movs	r3, #15
 8000bac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 fa7c 	bl	80020c0 <HAL_RCC_ClockConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bce:	f000 f95f 	bl	8000e90 <Error_Handler>
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3740      	adds	r7, #64	; 0x40
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000bfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c02:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c10:	2209      	movs	r2, #9
 8000c12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c20:	4813      	ldr	r0, [pc, #76]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c22:	f001 fbe7 	bl	80023f4 <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c2c:	f000 f930 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c3e:	f001 ff3b 	bl	8002ab8 <HAL_TIM_ConfigClockSource>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c48:	f000 f922 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c5a:	f002 fab9 	bl	80031d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c64:	f000 f914 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000160 	.word	0x20000160

08000c74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	; 0x38
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	f107 0320 	add.w	r3, r7, #32
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	615a      	str	r2, [r3, #20]
 8000ca2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca4:	4b2c      	ldr	r3, [pc, #176]	; (8000d58 <MX_TIM3_Init+0xe4>)
 8000ca6:	4a2d      	ldr	r2, [pc, #180]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000ca8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 122;
 8000caa:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <MX_TIM3_Init+0xe4>)
 8000cac:	227a      	movs	r2, #122	; 0x7a
 8000cae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb0:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <MX_TIM3_Init+0xe4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 8000cb6:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <MX_TIM3_Init+0xe4>)
 8000cb8:	22fe      	movs	r2, #254	; 0xfe
 8000cba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <MX_TIM3_Init+0xe4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc2:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <MX_TIM3_Init+0xe4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cc8:	4823      	ldr	r0, [pc, #140]	; (8000d58 <MX_TIM3_Init+0xe4>)
 8000cca:	f001 fb93 	bl	80023f4 <HAL_TIM_Base_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000cd4:	f000 f8dc 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	481c      	ldr	r0, [pc, #112]	; (8000d58 <MX_TIM3_Init+0xe4>)
 8000ce6:	f001 fee7 	bl	8002ab8 <HAL_TIM_ConfigClockSource>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000cf0:	f000 f8ce 	bl	8000e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cf4:	4818      	ldr	r0, [pc, #96]	; (8000d58 <MX_TIM3_Init+0xe4>)
 8000cf6:	f001 fc1f 	bl	8002538 <HAL_TIM_PWM_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000d00:	f000 f8c6 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d0c:	f107 0320 	add.w	r3, r7, #32
 8000d10:	4619      	mov	r1, r3
 8000d12:	4811      	ldr	r0, [pc, #68]	; (8000d58 <MX_TIM3_Init+0xe4>)
 8000d14:	f002 fa5c 	bl	80031d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000d1e:	f000 f8b7 	bl	8000e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d22:	2360      	movs	r3, #96	; 0x60
 8000d24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	4807      	ldr	r0, [pc, #28]	; (8000d58 <MX_TIM3_Init+0xe4>)
 8000d3a:	f001 fdff 	bl	800293c <HAL_TIM_PWM_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000d44:	f000 f8a4 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d48:	4803      	ldr	r0, [pc, #12]	; (8000d58 <MX_TIM3_Init+0xe4>)
 8000d4a:	f000 f919 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 8000d4e:	bf00      	nop
 8000d50:	3738      	adds	r7, #56	; 0x38
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000114 	.word	0x20000114
 8000d5c:	40000400 	.word	0x40000400

08000d60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <MX_USART2_UART_Init+0x50>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d98:	f002 fa8a 	bl	80032b0 <HAL_UART_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000da2:	f000 f875 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200001a8 	.word	0x200001a8
 8000db0:	40004400 	.word	0x40004400

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a27      	ldr	r2, [pc, #156]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000de6:	f043 0308 	orr.w	r3, r3, #8
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <MX_GPIO_Init+0xd0>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PES_RED_Pin|Traffic_1_GREEN_Pin|Traffic_2_GREEN_Pin|Traffic_2_RED_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000dfe:	4822      	ldr	r0, [pc, #136]	; (8000e88 <MX_GPIO_Init+0xd4>)
 8000e00:	f000 fead 	bl	8001b5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PES_GREEN_Pin|Traffic_1_RED_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000e0a:	4820      	ldr	r0, [pc, #128]	; (8000e8c <MX_GPIO_Init+0xd8>)
 8000e0c:	f000 fea7 	bl	8001b5e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PES_BUT_Pin BUT_1_Pin BUT_2_Pin */
  GPIO_InitStruct.Pin = PES_BUT_Pin|BUT_1_Pin|BUT_2_Pin;
 8000e10:	2313      	movs	r3, #19
 8000e12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	4619      	mov	r1, r3
 8000e22:	481a      	ldr	r0, [pc, #104]	; (8000e8c <MX_GPIO_Init+0xd8>)
 8000e24:	f000 fd00 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_3_Pin */
  GPIO_InitStruct.Pin = BUT_3_Pin;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUT_3_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4813      	ldr	r0, [pc, #76]	; (8000e88 <MX_GPIO_Init+0xd4>)
 8000e3c:	f000 fcf4 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PES_RED_Pin Traffic_1_GREEN_Pin Traffic_2_GREEN_Pin Traffic_2_RED_Pin */
  GPIO_InitStruct.Pin = PES_RED_Pin|Traffic_1_GREEN_Pin|Traffic_2_GREEN_Pin|Traffic_2_RED_Pin;
 8000e40:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4619      	mov	r1, r3
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <MX_GPIO_Init+0xd4>)
 8000e5a:	f000 fce5 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PES_GREEN_Pin Traffic_1_RED_Pin */
  GPIO_InitStruct.Pin = PES_GREEN_Pin|Traffic_1_RED_Pin;
 8000e5e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 0308 	add.w	r3, r7, #8
 8000e74:	4619      	mov	r1, r3
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_GPIO_Init+0xd8>)
 8000e78:	f000 fcd6 	bl	8001828 <HAL_GPIO_Init>

}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010c00 	.word	0x40010c00
 8000e8c:	40010800 	.word	0x40010800

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <Error_Handler+0x8>
	...

08000e9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6193      	str	r3, [r2, #24]
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	61d3      	str	r3, [r2, #28]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_MspInit+0x60>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_MspInit+0x60>)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000

08000f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f10:	d114      	bne.n	8000f3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_TIM_Base_MspInit+0x78>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <HAL_TIM_Base_MspInit+0x78>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	61d3      	str	r3, [r2, #28]
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_TIM_Base_MspInit+0x78>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	201c      	movs	r0, #28
 8000f30:	f000 fb93 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f34:	201c      	movs	r0, #28
 8000f36:	f000 fbac 	bl	8001692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f3a:	e018      	b.n	8000f6e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <HAL_TIM_Base_MspInit+0x7c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d113      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_TIM_Base_MspInit+0x78>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <HAL_TIM_Base_MspInit+0x78>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_TIM_Base_MspInit+0x78>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	201d      	movs	r0, #29
 8000f64:	f000 fb79 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f68:	201d      	movs	r0, #29
 8000f6a:	f000 fb92 	bl	8001692 <HAL_NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40000400 	.word	0x40000400

08000f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_TIM_MspPostInit+0x58>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d117      	bne.n	8000fd0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_TIM_MspPostInit+0x5c>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_TIM_MspPostInit+0x5c>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_TIM_MspPostInit+0x5c>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8000fb8:	2340      	movs	r3, #64	; 0x40
 8000fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <HAL_TIM_MspPostInit+0x60>)
 8000fcc:	f000 fc2c 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40000400 	.word	0x40000400
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010800 	.word	0x40010800

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	; (800107c <HAL_UART_MspInit+0x98>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d137      	bne.n	8001074 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001004:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <HAL_UART_MspInit+0x9c>)
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <HAL_UART_MspInit+0x9c>)
 800100a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100e:	61d3      	str	r3, [r2, #28]
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_UART_MspInit+0x9c>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_UART_MspInit+0x9c>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_UART_MspInit+0x9c>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_UART_MspInit+0x9c>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001034:	2304      	movs	r3, #4
 8001036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	480f      	ldr	r0, [pc, #60]	; (8001084 <HAL_UART_MspInit+0xa0>)
 8001048:	f000 fbee 	bl	8001828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800104c:	2308      	movs	r3, #8
 800104e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	4809      	ldr	r0, [pc, #36]	; (8001084 <HAL_UART_MspInit+0xa0>)
 8001060:	f000 fbe2 	bl	8001828 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	2026      	movs	r0, #38	; 0x26
 800106a:	f000 faf6 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800106e:	2026      	movs	r0, #38	; 0x26
 8001070:	f000 fb0f 	bl	8001692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40004400 	.word	0x40004400
 8001080:	40021000 	.word	0x40021000
 8001084:	40010800 	.word	0x40010800

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x4>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ce:	f000 f9d1 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <TIM2_IRQHandler+0x10>)
 80010de:	f001 fb25 	bl	800272c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000160 	.word	0x20000160

080010ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM3_IRQHandler+0x10>)
 80010f2:	f001 fb1b 	bl	800272c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000114 	.word	0x20000114

08001100 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <USART2_IRQHandler+0x10>)
 8001106:	f002 f9e3 	bl	80034d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200001a8 	.word	0x200001a8

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f002 fdec 	bl	8003d20 <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20005000 	.word	0x20005000
 8001174:	00000400 	.word	0x00000400
 8001178:	200000c8 	.word	0x200000c8
 800117c:	20000200 	.word	0x20000200

08001180 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <setTimerReset>:
int blink_flag=0;
int blink_counter=0;
int buzzer_flag=0;
int buzzer_counter=0;
void setTimerReset(int duration)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	reset_counter=duration/10;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <setTimerReset+0x2c>)
 8001198:	fb82 1203 	smull	r1, r2, r2, r3
 800119c:	1092      	asrs	r2, r2, #2
 800119e:	17db      	asrs	r3, r3, #31
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	4a06      	ldr	r2, [pc, #24]	; (80011bc <setTimerReset+0x30>)
 80011a4:	6013      	str	r3, [r2, #0]
	reset_flag=0;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <setTimerReset+0x34>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	66666667 	.word	0x66666667
 80011bc:	200000d0 	.word	0x200000d0
 80011c0:	200000cc 	.word	0x200000cc

080011c4 <setTimerRun>:
void setTimerRun(int duration)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	run_counter=duration/10;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <setTimerRun+0x2c>)
 80011d0:	fb82 1203 	smull	r1, r2, r2, r3
 80011d4:	1092      	asrs	r2, r2, #2
 80011d6:	17db      	asrs	r3, r3, #31
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <setTimerRun+0x30>)
 80011dc:	6013      	str	r3, [r2, #0]
	run_flag=0;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <setTimerRun+0x34>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	66666667 	.word	0x66666667
 80011f4:	200000d8 	.word	0x200000d8
 80011f8:	200000d4 	.word	0x200000d4

080011fc <setTimerPesBut>:
void setTimerPesBut(int duration)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	pes_counter=duration/10;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <setTimerPesBut+0x2c>)
 8001208:	fb82 1203 	smull	r1, r2, r2, r3
 800120c:	1092      	asrs	r2, r2, #2
 800120e:	17db      	asrs	r3, r3, #31
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	4a06      	ldr	r2, [pc, #24]	; (800122c <setTimerPesBut+0x30>)
 8001214:	6013      	str	r3, [r2, #0]
	pes_flag=0;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <setTimerPesBut+0x34>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	66666667 	.word	0x66666667
 800122c:	200000e0 	.word	0x200000e0
 8001230:	200000dc 	.word	0x200000dc

08001234 <setTimerBlink>:
void setTimerBlink(int duration)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	blink_counter=duration/10;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <setTimerBlink+0x2c>)
 8001240:	fb82 1203 	smull	r1, r2, r2, r3
 8001244:	1092      	asrs	r2, r2, #2
 8001246:	17db      	asrs	r3, r3, #31
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	4a06      	ldr	r2, [pc, #24]	; (8001264 <setTimerBlink+0x30>)
 800124c:	6013      	str	r3, [r2, #0]
	blink_flag=0;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <setTimerBlink+0x34>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	66666667 	.word	0x66666667
 8001264:	200000e8 	.word	0x200000e8
 8001268:	200000e4 	.word	0x200000e4

0800126c <setTimerBuzzer>:
void setTimerBuzzer(int duration)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	buzzer_counter=duration/10;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <setTimerBuzzer+0x2c>)
 8001278:	fb82 1203 	smull	r1, r2, r2, r3
 800127c:	1092      	asrs	r2, r2, #2
 800127e:	17db      	asrs	r3, r3, #31
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	4a06      	ldr	r2, [pc, #24]	; (800129c <setTimerBuzzer+0x30>)
 8001284:	6013      	str	r3, [r2, #0]
	buzzer_flag=0;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <setTimerBuzzer+0x34>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	66666667 	.word	0x66666667
 800129c:	200000f0 	.word	0x200000f0
 80012a0:	200000ec 	.word	0x200000ec

080012a4 <timerRun>:
void timerRun()
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	if(reset_counter>0)
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <timerRun+0xac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	dd0b      	ble.n	80012c8 <timerRun+0x24>
	{
		reset_counter--;
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <timerRun+0xac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4a26      	ldr	r2, [pc, #152]	; (8001350 <timerRun+0xac>)
 80012b8:	6013      	str	r3, [r2, #0]
		if(reset_counter<=0)
 80012ba:	4b25      	ldr	r3, [pc, #148]	; (8001350 <timerRun+0xac>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc02      	bgt.n	80012c8 <timerRun+0x24>
		{
			reset_flag=1;
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <timerRun+0xb0>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
		}
	}
	if(pes_counter>0)
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <timerRun+0xb4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dd0b      	ble.n	80012e8 <timerRun+0x44>
	{
		pes_counter--;
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <timerRun+0xb4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	4a20      	ldr	r2, [pc, #128]	; (8001358 <timerRun+0xb4>)
 80012d8:	6013      	str	r3, [r2, #0]
		if(pes_counter<=0)
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <timerRun+0xb4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	dc02      	bgt.n	80012e8 <timerRun+0x44>
		{
			pes_flag=1;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <timerRun+0xb8>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
		}
	}
	if(run_counter>0)
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <timerRun+0xbc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dd0b      	ble.n	8001308 <timerRun+0x64>
	{
		run_counter--;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <timerRun+0xbc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <timerRun+0xbc>)
 80012f8:	6013      	str	r3, [r2, #0]
		if(run_counter<=0)
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <timerRun+0xbc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dc02      	bgt.n	8001308 <timerRun+0x64>
		{
			run_flag=1;
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <timerRun+0xc0>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
		}
	}
	if(blink_counter>0)
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <timerRun+0xc4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	dd0b      	ble.n	8001328 <timerRun+0x84>
	{
		blink_counter--;
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <timerRun+0xc4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3b01      	subs	r3, #1
 8001316:	4a14      	ldr	r2, [pc, #80]	; (8001368 <timerRun+0xc4>)
 8001318:	6013      	str	r3, [r2, #0]
		if(blink_counter<=0)
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <timerRun+0xc4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	dc02      	bgt.n	8001328 <timerRun+0x84>
		{
			blink_flag=1;
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <timerRun+0xc8>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
		}
	}
	if(buzzer_counter>0)
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <timerRun+0xcc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	dd0b      	ble.n	8001348 <timerRun+0xa4>
	{
		buzzer_counter--;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <timerRun+0xcc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3b01      	subs	r3, #1
 8001336:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <timerRun+0xcc>)
 8001338:	6013      	str	r3, [r2, #0]
		if(buzzer_counter<=0)
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <timerRun+0xcc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	dc02      	bgt.n	8001348 <timerRun+0xa4>
		{
			buzzer_flag=1;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <timerRun+0xd0>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	200000d0 	.word	0x200000d0
 8001354:	200000cc 	.word	0x200000cc
 8001358:	200000e0 	.word	0x200000e0
 800135c:	200000dc 	.word	0x200000dc
 8001360:	200000d8 	.word	0x200000d8
 8001364:	200000d4 	.word	0x200000d4
 8001368:	200000e8 	.word	0x200000e8
 800136c:	200000e4 	.word	0x200000e4
 8001370:	200000f0 	.word	0x200000f0
 8001374:	200000ec 	.word	0x200000ec

08001378 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM2 ) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001388:	d103      	bne.n	8001392 <HAL_TIM_PeriodElapsedCallback+0x1a>
button_reading() ;
 800138a:	f7ff fadf 	bl	800094c <button_reading>
timerRun();
 800138e:	f7ff ff89 	bl	80012a4 <timerRun>
}
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800139e:	490d      	ldr	r1, [pc, #52]	; (80013d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b4:	4c0a      	ldr	r4, [pc, #40]	; (80013e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013c2:	f7ff fedd 	bl	8001180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c6:	f002 fcb1 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ca:	f7ff fba3 	bl	8000b14 <main>
  bx lr
 80013ce:	4770      	bx	lr
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80013d8:	08004694 	.word	0x08004694
  ldr r2, =_sbss
 80013dc:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80013e0:	20000200 	.word	0x20000200

080013e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC1_2_IRQHandler>
	...

080013e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_Init+0x28>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_Init+0x28>)
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 f923 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fe:	200f      	movs	r0, #15
 8001400:	f000 f808 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001404:	f7ff fd4a 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40022000 	.word	0x40022000

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x54>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x58>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f93b 	bl	80016ae <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00e      	b.n	8001460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d80a      	bhi.n	800145e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f000 f903 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_InitTick+0x5c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000028 	.word	0x20000028
 800146c:	20000030 	.word	0x20000030
 8001470:	2000002c 	.word	0x2000002c

08001474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_IncTick+0x1c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_IncTick+0x20>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a03      	ldr	r2, [pc, #12]	; (8001494 <HAL_IncTick+0x20>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	20000030 	.word	0x20000030
 8001494:	200001ec 	.word	0x200001ec

08001498 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b02      	ldr	r3, [pc, #8]	; (80014a8 <HAL_GetTick+0x10>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	200001ec 	.word	0x200001ec

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4906      	ldr	r1, [pc, #24]	; (8001544 <__NVIC_EnableIRQ+0x34>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff90 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff2d 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff42 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff90 	bl	800159c <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5f 	bl	8001548 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff35 	bl	8001510 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b085      	sub	sp, #20
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d008      	beq.n	80016ee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2204      	movs	r2, #4
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e020      	b.n	8001730 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 020e 	bic.w	r2, r2, #14
 80016fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f202 	lsl.w	r2, r1, r2
 800171c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800174e:	2b02      	cmp	r3, #2
 8001750:	d005      	beq.n	800175e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2204      	movs	r2, #4
 8001756:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e051      	b.n	8001802 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 020e 	bic.w	r2, r2, #14
 800176c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a22      	ldr	r2, [pc, #136]	; (800180c <HAL_DMA_Abort_IT+0xd0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d029      	beq.n	80017dc <HAL_DMA_Abort_IT+0xa0>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a20      	ldr	r2, [pc, #128]	; (8001810 <HAL_DMA_Abort_IT+0xd4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d022      	beq.n	80017d8 <HAL_DMA_Abort_IT+0x9c>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_DMA_Abort_IT+0xd8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d01a      	beq.n	80017d2 <HAL_DMA_Abort_IT+0x96>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <HAL_DMA_Abort_IT+0xdc>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d012      	beq.n	80017cc <HAL_DMA_Abort_IT+0x90>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <HAL_DMA_Abort_IT+0xe0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00a      	beq.n	80017c6 <HAL_DMA_Abort_IT+0x8a>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <HAL_DMA_Abort_IT+0xe4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d102      	bne.n	80017c0 <HAL_DMA_Abort_IT+0x84>
 80017ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017be:	e00e      	b.n	80017de <HAL_DMA_Abort_IT+0xa2>
 80017c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c4:	e00b      	b.n	80017de <HAL_DMA_Abort_IT+0xa2>
 80017c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ca:	e008      	b.n	80017de <HAL_DMA_Abort_IT+0xa2>
 80017cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d0:	e005      	b.n	80017de <HAL_DMA_Abort_IT+0xa2>
 80017d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d6:	e002      	b.n	80017de <HAL_DMA_Abort_IT+0xa2>
 80017d8:	2310      	movs	r3, #16
 80017da:	e000      	b.n	80017de <HAL_DMA_Abort_IT+0xa2>
 80017dc:	2301      	movs	r3, #1
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_DMA_Abort_IT+0xe8>)
 80017e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
    } 
  }
  return status;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40020008 	.word	0x40020008
 8001810:	4002001c 	.word	0x4002001c
 8001814:	40020030 	.word	0x40020030
 8001818:	40020044 	.word	0x40020044
 800181c:	40020058 	.word	0x40020058
 8001820:	4002006c 	.word	0x4002006c
 8001824:	40020000 	.word	0x40020000

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b08b      	sub	sp, #44	; 0x2c
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183a:	e169      	b.n	8001b10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800183c:	2201      	movs	r2, #1
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	429a      	cmp	r2, r3
 8001856:	f040 8158 	bne.w	8001b0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a9a      	ldr	r2, [pc, #616]	; (8001ac8 <HAL_GPIO_Init+0x2a0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d05e      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001864:	4a98      	ldr	r2, [pc, #608]	; (8001ac8 <HAL_GPIO_Init+0x2a0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d875      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800186a:	4a98      	ldr	r2, [pc, #608]	; (8001acc <HAL_GPIO_Init+0x2a4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d058      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001870:	4a96      	ldr	r2, [pc, #600]	; (8001acc <HAL_GPIO_Init+0x2a4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d86f      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 8001876:	4a96      	ldr	r2, [pc, #600]	; (8001ad0 <HAL_GPIO_Init+0x2a8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d052      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 800187c:	4a94      	ldr	r2, [pc, #592]	; (8001ad0 <HAL_GPIO_Init+0x2a8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d869      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 8001882:	4a94      	ldr	r2, [pc, #592]	; (8001ad4 <HAL_GPIO_Init+0x2ac>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d04c      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001888:	4a92      	ldr	r2, [pc, #584]	; (8001ad4 <HAL_GPIO_Init+0x2ac>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d863      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800188e:	4a92      	ldr	r2, [pc, #584]	; (8001ad8 <HAL_GPIO_Init+0x2b0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d046      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001894:	4a90      	ldr	r2, [pc, #576]	; (8001ad8 <HAL_GPIO_Init+0x2b0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d85d      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800189a:	2b12      	cmp	r3, #18
 800189c:	d82a      	bhi.n	80018f4 <HAL_GPIO_Init+0xcc>
 800189e:	2b12      	cmp	r3, #18
 80018a0:	d859      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 80018a2:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <HAL_GPIO_Init+0x80>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	08001923 	.word	0x08001923
 80018ac:	080018fd 	.word	0x080018fd
 80018b0:	0800190f 	.word	0x0800190f
 80018b4:	08001951 	.word	0x08001951
 80018b8:	08001957 	.word	0x08001957
 80018bc:	08001957 	.word	0x08001957
 80018c0:	08001957 	.word	0x08001957
 80018c4:	08001957 	.word	0x08001957
 80018c8:	08001957 	.word	0x08001957
 80018cc:	08001957 	.word	0x08001957
 80018d0:	08001957 	.word	0x08001957
 80018d4:	08001957 	.word	0x08001957
 80018d8:	08001957 	.word	0x08001957
 80018dc:	08001957 	.word	0x08001957
 80018e0:	08001957 	.word	0x08001957
 80018e4:	08001957 	.word	0x08001957
 80018e8:	08001957 	.word	0x08001957
 80018ec:	08001905 	.word	0x08001905
 80018f0:	08001919 	.word	0x08001919
 80018f4:	4a79      	ldr	r2, [pc, #484]	; (8001adc <HAL_GPIO_Init+0x2b4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018fa:	e02c      	b.n	8001956 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e029      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	3304      	adds	r3, #4
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e024      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	3308      	adds	r3, #8
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e01f      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	330c      	adds	r3, #12
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e01a      	b.n	8001958 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800192a:	2304      	movs	r3, #4
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e013      	b.n	8001958 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001938:	2308      	movs	r3, #8
 800193a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	611a      	str	r2, [r3, #16]
          break;
 8001942:	e009      	b.n	8001958 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	615a      	str	r2, [r3, #20]
          break;
 800194e:	e003      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
          break;
 8001954:	e000      	b.n	8001958 <HAL_GPIO_Init+0x130>
          break;
 8001956:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2bff      	cmp	r3, #255	; 0xff
 800195c:	d801      	bhi.n	8001962 <HAL_GPIO_Init+0x13a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_Init+0x13e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3304      	adds	r3, #4
 8001966:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d802      	bhi.n	8001974 <HAL_GPIO_Init+0x14c>
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	e002      	b.n	800197a <HAL_GPIO_Init+0x152>
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3b08      	subs	r3, #8
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	210f      	movs	r1, #15
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	6a39      	ldr	r1, [r7, #32]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	431a      	orrs	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80b1 	beq.w	8001b0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a8:	4b4d      	ldr	r3, [pc, #308]	; (8001ae0 <HAL_GPIO_Init+0x2b8>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a4c      	ldr	r2, [pc, #304]	; (8001ae0 <HAL_GPIO_Init+0x2b8>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <HAL_GPIO_Init+0x2b8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019c0:	4a48      	ldr	r2, [pc, #288]	; (8001ae4 <HAL_GPIO_Init+0x2bc>)
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a40      	ldr	r2, [pc, #256]	; (8001ae8 <HAL_GPIO_Init+0x2c0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d013      	beq.n	8001a14 <HAL_GPIO_Init+0x1ec>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a3f      	ldr	r2, [pc, #252]	; (8001aec <HAL_GPIO_Init+0x2c4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d00d      	beq.n	8001a10 <HAL_GPIO_Init+0x1e8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a3e      	ldr	r2, [pc, #248]	; (8001af0 <HAL_GPIO_Init+0x2c8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d007      	beq.n	8001a0c <HAL_GPIO_Init+0x1e4>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a3d      	ldr	r2, [pc, #244]	; (8001af4 <HAL_GPIO_Init+0x2cc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_GPIO_Init+0x1e0>
 8001a04:	2303      	movs	r3, #3
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a08:	2304      	movs	r3, #4
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a14:	2300      	movs	r3, #0
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a26:	492f      	ldr	r1, [pc, #188]	; (8001ae4 <HAL_GPIO_Init+0x2bc>)
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	492c      	ldr	r1, [pc, #176]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4928      	ldr	r1, [pc, #160]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4922      	ldr	r1, [pc, #136]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	491e      	ldr	r1, [pc, #120]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4918      	ldr	r1, [pc, #96]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	4914      	ldr	r1, [pc, #80]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d021      	beq.n	8001afc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	490e      	ldr	r1, [pc, #56]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60cb      	str	r3, [r1, #12]
 8001ac4:	e021      	b.n	8001b0a <HAL_GPIO_Init+0x2e2>
 8001ac6:	bf00      	nop
 8001ac8:	10320000 	.word	0x10320000
 8001acc:	10310000 	.word	0x10310000
 8001ad0:	10220000 	.word	0x10220000
 8001ad4:	10210000 	.word	0x10210000
 8001ad8:	10120000 	.word	0x10120000
 8001adc:	10110000 	.word	0x10110000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	40010c00 	.word	0x40010c00
 8001af0:	40011000 	.word	0x40011000
 8001af4:	40011400 	.word	0x40011400
 8001af8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4909      	ldr	r1, [pc, #36]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f47f ae8e 	bne.w	800183c <HAL_GPIO_Init+0x14>
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	372c      	adds	r7, #44	; 0x2c
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e001      	b.n	8001b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	460b      	mov	r3, r1
 8001b68:	807b      	strh	r3, [r7, #2]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b6e:	787b      	ldrb	r3, [r7, #1]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b74:	887a      	ldrh	r2, [r7, #2]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b7a:	e003      	b.n	8001b84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	041a      	lsls	r2, r3, #16
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	611a      	str	r2, [r3, #16]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b085      	sub	sp, #20
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ba0:	887a      	ldrh	r2, [r7, #2]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	041a      	lsls	r2, r3, #16
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	400b      	ands	r3, r1
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	611a      	str	r2, [r3, #16]
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e26c      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8087 	beq.w	8001cee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be0:	4b92      	ldr	r3, [pc, #584]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d00c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bec:	4b8f      	ldr	r3, [pc, #572]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d112      	bne.n	8001c1e <HAL_RCC_OscConfig+0x5e>
 8001bf8:	4b8c      	ldr	r3, [pc, #560]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c04:	d10b      	bne.n	8001c1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c06:	4b89      	ldr	r3, [pc, #548]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d06c      	beq.n	8001cec <HAL_RCC_OscConfig+0x12c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d168      	bne.n	8001cec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e246      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x76>
 8001c28:	4b80      	ldr	r3, [pc, #512]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a7f      	ldr	r2, [pc, #508]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	e02e      	b.n	8001c94 <HAL_RCC_OscConfig+0xd4>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x98>
 8001c3e:	4b7b      	ldr	r3, [pc, #492]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7a      	ldr	r2, [pc, #488]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b78      	ldr	r3, [pc, #480]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a77      	ldr	r2, [pc, #476]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e01d      	b.n	8001c94 <HAL_RCC_OscConfig+0xd4>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0xbc>
 8001c62:	4b72      	ldr	r3, [pc, #456]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a71      	ldr	r2, [pc, #452]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b6f      	ldr	r3, [pc, #444]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6e      	ldr	r2, [pc, #440]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0xd4>
 8001c7c:	4b6b      	ldr	r3, [pc, #428]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6a      	ldr	r2, [pc, #424]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b68      	ldr	r3, [pc, #416]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a67      	ldr	r2, [pc, #412]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fbfc 	bl	8001498 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fbf8 	bl	8001498 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1fa      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b5d      	ldr	r3, [pc, #372]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe4>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fbe8 	bl	8001498 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fbe4 	bl	8001498 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e1e6      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x10c>
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d063      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfa:	4b4c      	ldr	r3, [pc, #304]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d06:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d11c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x18c>
 8001d12:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d116      	bne.n	8001d4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x176>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e1ba      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d36:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4939      	ldr	r1, [pc, #228]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	e03a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d54:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <HAL_RCC_OscConfig+0x270>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fb9d 	bl	8001498 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d62:	f7ff fb99 	bl	8001498 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e19b      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4927      	ldr	r1, [pc, #156]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
 8001d94:	e015      	b.n	8001dc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <HAL_RCC_OscConfig+0x270>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fb7c 	bl	8001498 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da4:	f7ff fb78 	bl	8001498 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e17a      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d03a      	beq.n	8001e44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d019      	beq.n	8001e0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fb5c 	bl	8001498 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de4:	f7ff fb58 	bl	8001498 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e15a      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f000 fad8 	bl	80023b8 <RCC_Delay>
 8001e08:	e01c      	b.n	8001e44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e10:	f7ff fb42 	bl	8001498 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e16:	e00f      	b.n	8001e38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e18:	f7ff fb3e 	bl	8001498 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d908      	bls.n	8001e38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e140      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	42420000 	.word	0x42420000
 8001e34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e38:	4b9e      	ldr	r3, [pc, #632]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1e9      	bne.n	8001e18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80a6 	beq.w	8001f9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e56:	4b97      	ldr	r3, [pc, #604]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10d      	bne.n	8001e7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4b94      	ldr	r3, [pc, #592]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	4a93      	ldr	r2, [pc, #588]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	61d3      	str	r3, [r2, #28]
 8001e6e:	4b91      	ldr	r3, [pc, #580]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	4b8e      	ldr	r3, [pc, #568]	; (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d118      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8a:	4b8b      	ldr	r3, [pc, #556]	; (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a8a      	ldr	r2, [pc, #552]	; (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e96:	f7ff faff 	bl	8001498 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9e:	f7ff fafb 	bl	8001498 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b64      	cmp	r3, #100	; 0x64
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e0fd      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	4b81      	ldr	r3, [pc, #516]	; (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x312>
 8001ec4:	4b7b      	ldr	r3, [pc, #492]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a7a      	ldr	r2, [pc, #488]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6213      	str	r3, [r2, #32]
 8001ed0:	e02d      	b.n	8001f2e <HAL_RCC_OscConfig+0x36e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x334>
 8001eda:	4b76      	ldr	r3, [pc, #472]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a75      	ldr	r2, [pc, #468]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	4b73      	ldr	r3, [pc, #460]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a72      	ldr	r2, [pc, #456]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	f023 0304 	bic.w	r3, r3, #4
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	e01c      	b.n	8001f2e <HAL_RCC_OscConfig+0x36e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d10c      	bne.n	8001f16 <HAL_RCC_OscConfig+0x356>
 8001efc:	4b6d      	ldr	r3, [pc, #436]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a6c      	ldr	r2, [pc, #432]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a69      	ldr	r2, [pc, #420]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e00b      	b.n	8001f2e <HAL_RCC_OscConfig+0x36e>
 8001f16:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a66      	ldr	r2, [pc, #408]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6213      	str	r3, [r2, #32]
 8001f22:	4b64      	ldr	r3, [pc, #400]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a63      	ldr	r2, [pc, #396]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d015      	beq.n	8001f62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f36:	f7ff faaf 	bl	8001498 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7ff faab 	bl	8001498 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0ab      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f54:	4b57      	ldr	r3, [pc, #348]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ee      	beq.n	8001f3e <HAL_RCC_OscConfig+0x37e>
 8001f60:	e014      	b.n	8001f8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fa99 	bl	8001498 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff fa95 	bl	8001498 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e095      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f80:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ee      	bne.n	8001f6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b48      	ldr	r3, [pc, #288]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4a47      	ldr	r2, [pc, #284]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8081 	beq.w	80020aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa8:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d061      	beq.n	8002078 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d146      	bne.n	800204a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <HAL_RCC_OscConfig+0x4fc>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fa69 	bl	8001498 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff fa65 	bl	8001498 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e067      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	4b35      	ldr	r3, [pc, #212]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff0:	d108      	bne.n	8002004 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ff2:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	492d      	ldr	r1, [pc, #180]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002004:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a19      	ldr	r1, [r3, #32]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	430b      	orrs	r3, r1
 8002016:	4927      	ldr	r1, [pc, #156]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x4fc>)
 800201e:	2201      	movs	r2, #1
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff fa39 	bl	8001498 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202a:	f7ff fa35 	bl	8001498 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e037      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x46a>
 8002048:	e02f      	b.n	80020aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_RCC_OscConfig+0x4fc>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fa22 	bl	8001498 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff fa1e 	bl	8001498 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e020      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x498>
 8002076:	e018      	b.n	80020aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e013      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	429a      	cmp	r2, r3
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40007000 	.word	0x40007000
 80020bc:	42420060 	.word	0x42420060

080020c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0d0      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d910      	bls.n	8002104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b67      	ldr	r3, [pc, #412]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0207 	bic.w	r2, r3, #7
 80020ea:	4965      	ldr	r1, [pc, #404]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b63      	ldr	r3, [pc, #396]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0b8      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d020      	beq.n	8002152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800211c:	4b59      	ldr	r3, [pc, #356]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a58      	ldr	r2, [pc, #352]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002134:	4b53      	ldr	r3, [pc, #332]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a52      	ldr	r2, [pc, #328]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800213e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b50      	ldr	r3, [pc, #320]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	494d      	ldr	r1, [pc, #308]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d040      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b47      	ldr	r3, [pc, #284]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d115      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e07f      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b41      	ldr	r3, [pc, #260]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e073      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e06b      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b39      	ldr	r3, [pc, #228]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4936      	ldr	r1, [pc, #216]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7ff f972 	bl	8001498 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff f96e 	bl	8001498 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e053      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d210      	bcs.n	8002210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	4922      	ldr	r1, [pc, #136]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e032      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4916      	ldr	r1, [pc, #88]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	490e      	ldr	r1, [pc, #56]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800224e:	f000 f821 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8002252:	4602      	mov	r2, r0
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	490a      	ldr	r1, [pc, #40]	; (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	5ccb      	ldrb	r3, [r1, r3]
 8002262:	fa22 f303 	lsr.w	r3, r2, r3
 8002266:	4a09      	ldr	r2, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1cc>)
 8002268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_ClockConfig+0x1d0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f8d0 	bl	8001414 <HAL_InitTick>

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40022000 	.word	0x40022000
 8002284:	40021000 	.word	0x40021000
 8002288:	08004640 	.word	0x08004640
 800228c:	20000028 	.word	0x20000028
 8002290:	2000002c 	.word	0x2000002c

08002294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002294:	b490      	push	{r4, r7}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800229a:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <HAL_RCC_GetSysClockFreq+0xb0>)
 800229c:	1d3c      	adds	r4, r7, #4
 800229e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022a4:	f240 2301 	movw	r3, #513	; 0x201
 80022a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d002      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x40>
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x46>
 80022d2:	e02d      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022d6:	623b      	str	r3, [r7, #32]
      break;
 80022d8:	e02d      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	0c9b      	lsrs	r3, r3, #18
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022e6:	4413      	add	r3, r2
 80022e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	0c5b      	lsrs	r3, r3, #17
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002306:	4413      	add	r3, r2
 8002308:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800230c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	4a0e      	ldr	r2, [pc, #56]	; (800234c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002312:	fb02 f203 	mul.w	r2, r2, r3
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	fbb2 f3f3 	udiv	r3, r2, r3
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
 800231e:	e004      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	623b      	str	r3, [r7, #32]
      break;
 800232e:	e002      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002332:	623b      	str	r3, [r7, #32]
      break;
 8002334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002336:	6a3b      	ldr	r3, [r7, #32]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3728      	adds	r7, #40	; 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bc90      	pop	{r4, r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	08004630 	.word	0x08004630
 8002348:	40021000 	.word	0x40021000
 800234c:	007a1200 	.word	0x007a1200
 8002350:	003d0900 	.word	0x003d0900

08002354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <HAL_RCC_GetHCLKFreq+0x10>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	20000028 	.word	0x20000028

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800236c:	f7ff fff2 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4903      	ldr	r1, [pc, #12]	; (800238c <HAL_RCC_GetPCLK1Freq+0x24>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	08004650 	.word	0x08004650

08002390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002394:	f7ff ffde 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0adb      	lsrs	r3, r3, #11
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4903      	ldr	r1, [pc, #12]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08004650 	.word	0x08004650

080023b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <RCC_Delay+0x34>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <RCC_Delay+0x38>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0a5b      	lsrs	r3, r3, #9
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d4:	bf00      	nop
  }
  while (Delay --);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1e5a      	subs	r2, r3, #1
 80023da:	60fa      	str	r2, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <RCC_Delay+0x1c>
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	20000028 	.word	0x20000028
 80023f0:	10624dd3 	.word	0x10624dd3

080023f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e041      	b.n	800248a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fd70 	bl	8000f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3304      	adds	r3, #4
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f000 fc28 	bl	8002c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d001      	beq.n	80024ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e03a      	b.n	8002522 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_TIM_Base_Start_IT+0x98>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00e      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x58>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d6:	d009      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x58>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_TIM_Base_Start_IT+0x9c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d004      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x58>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a13      	ldr	r2, [pc, #76]	; (8002534 <HAL_TIM_Base_Start_IT+0xa0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d111      	bne.n	8002510 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d010      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250e:	e007      	b.n	8002520 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40000400 	.word	0x40000400
 8002534:	40000800 	.word	0x40000800

08002538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e041      	b.n	80025ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f839 	bl	80025d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f000 fb86 	bl	8002c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_TIM_PWM_Start+0x24>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b01      	cmp	r3, #1
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	e022      	b.n	8002652 <HAL_TIM_PWM_Start+0x6a>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b04      	cmp	r3, #4
 8002610:	d109      	bne.n	8002626 <HAL_TIM_PWM_Start+0x3e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	e015      	b.n	8002652 <HAL_TIM_PWM_Start+0x6a>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d109      	bne.n	8002640 <HAL_TIM_PWM_Start+0x58>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e008      	b.n	8002652 <HAL_TIM_PWM_Start+0x6a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e05e      	b.n	8002718 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <HAL_TIM_PWM_Start+0x82>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002668:	e013      	b.n	8002692 <HAL_TIM_PWM_Start+0xaa>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d104      	bne.n	800267a <HAL_TIM_PWM_Start+0x92>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002678:	e00b      	b.n	8002692 <HAL_TIM_PWM_Start+0xaa>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d104      	bne.n	800268a <HAL_TIM_PWM_Start+0xa2>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002688:	e003      	b.n	8002692 <HAL_TIM_PWM_Start+0xaa>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2201      	movs	r2, #1
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fd74 	bl	8003188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <HAL_TIM_PWM_Start+0x138>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d107      	bne.n	80026ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a18      	ldr	r2, [pc, #96]	; (8002720 <HAL_TIM_PWM_Start+0x138>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00e      	beq.n	80026e2 <HAL_TIM_PWM_Start+0xfa>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026cc:	d009      	beq.n	80026e2 <HAL_TIM_PWM_Start+0xfa>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a14      	ldr	r2, [pc, #80]	; (8002724 <HAL_TIM_PWM_Start+0x13c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d004      	beq.n	80026e2 <HAL_TIM_PWM_Start+0xfa>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a12      	ldr	r2, [pc, #72]	; (8002728 <HAL_TIM_PWM_Start+0x140>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d111      	bne.n	8002706 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b06      	cmp	r3, #6
 80026f2:	d010      	beq.n	8002716 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002704:	e007      	b.n	8002716 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40012c00 	.word	0x40012c00
 8002724:	40000400 	.word	0x40000400
 8002728:	40000800 	.word	0x40000800

0800272c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b02      	cmp	r3, #2
 8002740:	d122      	bne.n	8002788 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b02      	cmp	r3, #2
 800274e:	d11b      	bne.n	8002788 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0202 	mvn.w	r2, #2
 8002758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fa6f 	bl	8002c52 <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa62 	bl	8002c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fa71 	bl	8002c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b04      	cmp	r3, #4
 8002794:	d122      	bne.n	80027dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d11b      	bne.n	80027dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0204 	mvn.w	r2, #4
 80027ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fa45 	bl	8002c52 <HAL_TIM_IC_CaptureCallback>
 80027c8:	e005      	b.n	80027d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fa38 	bl	8002c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fa47 	bl	8002c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d122      	bne.n	8002830 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d11b      	bne.n	8002830 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0208 	mvn.w	r2, #8
 8002800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa1b 	bl	8002c52 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fa0e 	bl	8002c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fa1d 	bl	8002c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b10      	cmp	r3, #16
 800283c:	d122      	bne.n	8002884 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b10      	cmp	r3, #16
 800284a:	d11b      	bne.n	8002884 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0210 	mvn.w	r2, #16
 8002854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2208      	movs	r2, #8
 800285a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f9f1 	bl	8002c52 <HAL_TIM_IC_CaptureCallback>
 8002870:	e005      	b.n	800287e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f9e4 	bl	8002c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f9f3 	bl	8002c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10e      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d107      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0201 	mvn.w	r2, #1
 80028a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fd64 	bl	8001378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b80      	cmp	r3, #128	; 0x80
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c8:	2b80      	cmp	r3, #128	; 0x80
 80028ca:	d107      	bne.n	80028dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fce1 	bl	800329e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b40      	cmp	r3, #64	; 0x40
 80028f6:	d107      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f9b7 	bl	8002c76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b20      	cmp	r3, #32
 8002914:	d10e      	bne.n	8002934 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b20      	cmp	r3, #32
 8002922:	d107      	bne.n	8002934 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0220 	mvn.w	r2, #32
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fcac 	bl	800328c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002952:	2302      	movs	r3, #2
 8002954:	e0ac      	b.n	8002ab0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0c      	cmp	r3, #12
 8002962:	f200 809f 	bhi.w	8002aa4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002966:	a201      	add	r2, pc, #4	; (adr r2, 800296c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296c:	080029a1 	.word	0x080029a1
 8002970:	08002aa5 	.word	0x08002aa5
 8002974:	08002aa5 	.word	0x08002aa5
 8002978:	08002aa5 	.word	0x08002aa5
 800297c:	080029e1 	.word	0x080029e1
 8002980:	08002aa5 	.word	0x08002aa5
 8002984:	08002aa5 	.word	0x08002aa5
 8002988:	08002aa5 	.word	0x08002aa5
 800298c:	08002a23 	.word	0x08002a23
 8002990:	08002aa5 	.word	0x08002aa5
 8002994:	08002aa5 	.word	0x08002aa5
 8002998:	08002aa5 	.word	0x08002aa5
 800299c:	08002a63 	.word	0x08002a63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f9d0 	bl	8002d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0208 	orr.w	r2, r2, #8
 80029ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0204 	bic.w	r2, r2, #4
 80029ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6999      	ldr	r1, [r3, #24]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	619a      	str	r2, [r3, #24]
      break;
 80029de:	e062      	b.n	8002aa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fa16 	bl	8002e18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6999      	ldr	r1, [r3, #24]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	021a      	lsls	r2, r3, #8
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	619a      	str	r2, [r3, #24]
      break;
 8002a20:	e041      	b.n	8002aa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fa5f 	bl	8002eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0208 	orr.w	r2, r2, #8
 8002a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0204 	bic.w	r2, r2, #4
 8002a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69d9      	ldr	r1, [r3, #28]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	61da      	str	r2, [r3, #28]
      break;
 8002a60:	e021      	b.n	8002aa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 faa9 	bl	8002fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69d9      	ldr	r1, [r3, #28]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	021a      	lsls	r2, r3, #8
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	61da      	str	r2, [r3, #28]
      break;
 8002aa2:	e000      	b.n	8002aa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002aa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_TIM_ConfigClockSource+0x18>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e0b3      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x180>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002af6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b08:	d03e      	beq.n	8002b88 <HAL_TIM_ConfigClockSource+0xd0>
 8002b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0e:	f200 8087 	bhi.w	8002c20 <HAL_TIM_ConfigClockSource+0x168>
 8002b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b16:	f000 8085 	beq.w	8002c24 <HAL_TIM_ConfigClockSource+0x16c>
 8002b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1e:	d87f      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x168>
 8002b20:	2b70      	cmp	r3, #112	; 0x70
 8002b22:	d01a      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0xa2>
 8002b24:	2b70      	cmp	r3, #112	; 0x70
 8002b26:	d87b      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x168>
 8002b28:	2b60      	cmp	r3, #96	; 0x60
 8002b2a:	d050      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x116>
 8002b2c:	2b60      	cmp	r3, #96	; 0x60
 8002b2e:	d877      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x168>
 8002b30:	2b50      	cmp	r3, #80	; 0x50
 8002b32:	d03c      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0xf6>
 8002b34:	2b50      	cmp	r3, #80	; 0x50
 8002b36:	d873      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x168>
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d058      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x136>
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d86f      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x168>
 8002b40:	2b30      	cmp	r3, #48	; 0x30
 8002b42:	d064      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0x156>
 8002b44:	2b30      	cmp	r3, #48	; 0x30
 8002b46:	d86b      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x168>
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d060      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0x156>
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d867      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x168>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d05c      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0x156>
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d05a      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b58:	e062      	b.n	8002c20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6899      	ldr	r1, [r3, #8]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f000 faee 	bl	800314a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	609a      	str	r2, [r3, #8]
      break;
 8002b86:	e04e      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6899      	ldr	r1, [r3, #8]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f000 fad7 	bl	800314a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002baa:	609a      	str	r2, [r3, #8]
      break;
 8002bac:	e03b      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f000 fa4e 	bl	800305c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2150      	movs	r1, #80	; 0x50
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 faa5 	bl	8003116 <TIM_ITRx_SetConfig>
      break;
 8002bcc:	e02b      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f000 fa6c 	bl	80030b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2160      	movs	r1, #96	; 0x60
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fa95 	bl	8003116 <TIM_ITRx_SetConfig>
      break;
 8002bec:	e01b      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	6859      	ldr	r1, [r3, #4]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f000 fa2e 	bl	800305c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2140      	movs	r1, #64	; 0x40
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fa85 	bl	8003116 <TIM_ITRx_SetConfig>
      break;
 8002c0c:	e00b      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4619      	mov	r1, r3
 8002c18:	4610      	mov	r0, r2
 8002c1a:	f000 fa7c 	bl	8003116 <TIM_ITRx_SetConfig>
        break;
 8002c1e:	e002      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c20:	bf00      	nop
 8002c22:	e000      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a29      	ldr	r2, [pc, #164]	; (8002d40 <TIM_Base_SetConfig+0xb8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00b      	beq.n	8002cb8 <TIM_Base_SetConfig+0x30>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d007      	beq.n	8002cb8 <TIM_Base_SetConfig+0x30>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <TIM_Base_SetConfig+0xbc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <TIM_Base_SetConfig+0x30>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <TIM_Base_SetConfig+0xc0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d108      	bne.n	8002cca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <TIM_Base_SetConfig+0xb8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00b      	beq.n	8002cea <TIM_Base_SetConfig+0x62>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d007      	beq.n	8002cea <TIM_Base_SetConfig+0x62>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <TIM_Base_SetConfig+0xbc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d003      	beq.n	8002cea <TIM_Base_SetConfig+0x62>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <TIM_Base_SetConfig+0xc0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d108      	bne.n	8002cfc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <TIM_Base_SetConfig+0xb8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d103      	bne.n	8002d30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	615a      	str	r2, [r3, #20]
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	40012c00 	.word	0x40012c00
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40000800 	.word	0x40000800

08002d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f023 0201 	bic.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0303 	bic.w	r3, r3, #3
 8002d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f023 0302 	bic.w	r3, r3, #2
 8002d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a1c      	ldr	r2, [pc, #112]	; (8002e14 <TIM_OC1_SetConfig+0xc8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d10c      	bne.n	8002dc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f023 0308 	bic.w	r3, r3, #8
 8002dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <TIM_OC1_SetConfig+0xc8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d111      	bne.n	8002dee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	621a      	str	r2, [r3, #32]
}
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40012c00 	.word	0x40012c00

08002e18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0210 	bic.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f023 0320 	bic.w	r3, r3, #32
 8002e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <TIM_OC2_SetConfig+0xd0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d10d      	bne.n	8002e94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <TIM_OC2_SetConfig+0xd0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d113      	bne.n	8002ec4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ea2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	40012c00 	.word	0x40012c00

08002eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <TIM_OC3_SetConfig+0xd0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d10d      	bne.n	8002f66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <TIM_OC3_SetConfig+0xd0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d113      	bne.n	8002f96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	621a      	str	r2, [r3, #32]
}
 8002fb0:	bf00      	nop
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40012c00 	.word	0x40012c00

08002fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800300a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	031b      	lsls	r3, r3, #12
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a0f      	ldr	r2, [pc, #60]	; (8003058 <TIM_OC4_SetConfig+0x98>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d109      	bne.n	8003034 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003026:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	019b      	lsls	r3, r3, #6
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	621a      	str	r2, [r3, #32]
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	40012c00 	.word	0x40012c00

0800305c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f023 0201 	bic.w	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f023 030a 	bic.w	r3, r3, #10
 8003098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f023 0210 	bic.w	r2, r3, #16
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	031b      	lsls	r3, r3, #12
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	621a      	str	r2, [r3, #32]
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003116:	b480      	push	{r7}
 8003118:	b085      	sub	sp, #20
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	f043 0307 	orr.w	r3, r3, #7
 8003138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	609a      	str	r2, [r3, #8]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800314a:	b480      	push	{r7}
 800314c:	b087      	sub	sp, #28
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003164:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	021a      	lsls	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	431a      	orrs	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	4313      	orrs	r3, r2
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	609a      	str	r2, [r3, #8]
}
 800317e:	bf00      	nop
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2201      	movs	r2, #1
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	401a      	ands	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a1a      	ldr	r2, [r3, #32]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	fa01 f303 	lsl.w	r3, r1, r3
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	621a      	str	r2, [r3, #32]
}
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e046      	b.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a16      	ldr	r2, [pc, #88]	; (8003280 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00e      	beq.n	800324a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d009      	beq.n	800324a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a10      	ldr	r2, [pc, #64]	; (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d10c      	bne.n	8003264 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	4313      	orrs	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	40012c00 	.word	0x40012c00
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800

0800328c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e03f      	b.n	8003342 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fe84 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	; 0x24
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fc85 	bl	8003c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b08a      	sub	sp, #40	; 0x28
 800334e:	af02      	add	r7, sp, #8
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	4613      	mov	r3, r2
 8003358:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b20      	cmp	r3, #32
 8003368:	d17c      	bne.n	8003464 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_UART_Transmit+0x2c>
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e075      	b.n	8003466 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_UART_Transmit+0x3e>
 8003384:	2302      	movs	r3, #2
 8003386:	e06e      	b.n	8003466 <HAL_UART_Transmit+0x11c>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2221      	movs	r2, #33	; 0x21
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800339e:	f7fe f87b 	bl	8001498 <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	88fa      	ldrh	r2, [r7, #6]
 80033ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b8:	d108      	bne.n	80033cc <HAL_UART_Transmit+0x82>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d104      	bne.n	80033cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	e003      	b.n	80033d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033dc:	e02a      	b.n	8003434 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2200      	movs	r2, #0
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fa38 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e036      	b.n	8003466 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10b      	bne.n	8003416 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800340c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	3302      	adds	r3, #2
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	e007      	b.n	8003426 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	3301      	adds	r3, #1
 8003424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1cf      	bne.n	80033de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	2140      	movs	r1, #64	; 0x40
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fa08 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e006      	b.n	8003466 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e000      	b.n	8003466 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003464:	2302      	movs	r3, #2
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	3720      	adds	r7, #32
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	4613      	mov	r3, r2
 800347a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b20      	cmp	r3, #32
 8003486:	d11d      	bne.n	80034c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_UART_Receive_IT+0x26>
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e016      	b.n	80034c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Receive_IT+0x38>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e00f      	b.n	80034c6 <HAL_UART_Receive_IT+0x58>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	461a      	mov	r2, r3
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fa19 	bl	80038f2 <UART_Start_Receive_IT>
 80034c0:	4603      	mov	r3, r0
 80034c2:	e000      	b.n	80034c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_UART_IRQHandler+0x52>
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fac9 	bl	8003ab2 <UART_Receive_IT>
      return;
 8003520:	e17b      	b.n	800381a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80b1 	beq.w	800368c <HAL_UART_IRQHandler+0x1bc>
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <HAL_UART_IRQHandler+0x70>
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80a6 	beq.w	800368c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_UART_IRQHandler+0x90>
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_UART_IRQHandler+0xb0>
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f043 0202 	orr.w	r2, r3, #2
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_UART_IRQHandler+0xd0>
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f043 0204 	orr.w	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00f      	beq.n	80035ca <HAL_UART_IRQHandler+0xfa>
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <HAL_UART_IRQHandler+0xee>
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f043 0208 	orr.w	r2, r3, #8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 811e 	beq.w	8003810 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <HAL_UART_IRQHandler+0x11e>
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fa62 	bl	8003ab2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <HAL_UART_IRQHandler+0x146>
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d031      	beq.n	800367a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f9a4 	bl	8003964 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d023      	beq.n	8003672 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003638:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	2b00      	cmp	r3, #0
 8003640:	d013      	beq.n	800366a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	4a76      	ldr	r2, [pc, #472]	; (8003820 <HAL_UART_IRQHandler+0x350>)
 8003648:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe f874 	bl	800173c <HAL_DMA_Abort_IT>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003664:	4610      	mov	r0, r2
 8003666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003668:	e00e      	b.n	8003688 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f8e3 	bl	8003836 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	e00a      	b.n	8003688 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f8df 	bl	8003836 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003678:	e006      	b.n	8003688 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8db 	bl	8003836 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003686:	e0c3      	b.n	8003810 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	bf00      	nop
    return;
 800368a:	e0c1      	b.n	8003810 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	2b01      	cmp	r3, #1
 8003692:	f040 80a1 	bne.w	80037d8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 809b 	beq.w	80037d8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8095 	beq.w	80037d8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d04e      	beq.n	8003770 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80036dc:	8a3b      	ldrh	r3, [r7, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8098 	beq.w	8003814 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036e8:	8a3a      	ldrh	r2, [r7, #16]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	f080 8092 	bcs.w	8003814 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8a3a      	ldrh	r2, [r7, #16]
 80036f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d02b      	beq.n	8003758 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800370e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800372e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0210 	bic.w	r2, r2, #16
 800374c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd ffb7 	bl	80016c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003760:	b29b      	uxth	r3, r3
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	b29b      	uxth	r3, r3
 8003766:	4619      	mov	r1, r3
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f86d 	bl	8003848 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800376e:	e051      	b.n	8003814 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003778:	b29b      	uxth	r3, r3
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d047      	beq.n	8003818 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003788:	8a7b      	ldrh	r3, [r7, #18]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d044      	beq.n	8003818 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800379c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0210 	bic.w	r2, r2, #16
 80037ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037cc:	8a7b      	ldrh	r3, [r7, #18]
 80037ce:	4619      	mov	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f839 	bl	8003848 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037d6:	e01f      	b.n	8003818 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_UART_IRQHandler+0x324>
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f8f9 	bl	80039e4 <UART_Transmit_IT>
    return;
 80037f2:	e012      	b.n	800381a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <HAL_UART_IRQHandler+0x34a>
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f93a 	bl	8003a82 <UART_EndTransmit_IT>
    return;
 800380e:	e004      	b.n	800381a <HAL_UART_IRQHandler+0x34a>
    return;
 8003810:	bf00      	nop
 8003812:	e002      	b.n	800381a <HAL_UART_IRQHandler+0x34a>
      return;
 8003814:	bf00      	nop
 8003816:	e000      	b.n	800381a <HAL_UART_IRQHandler+0x34a>
      return;
 8003818:	bf00      	nop
  }
}
 800381a:	3728      	adds	r7, #40	; 0x28
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	080039bd 	.word	0x080039bd

08003824 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386e:	e02c      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003876:	d028      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0x30>
 800387e:	f7fd fe0b 	bl	8001498 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	429a      	cmp	r2, r3
 800388c:	d21d      	bcs.n	80038ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800389c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e00f      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d0c3      	beq.n	8003870 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	4613      	mov	r3, r2
 80038fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2222      	movs	r2, #34	; 0x22
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003936:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0220 	orr.w	r2, r2, #32
 8003956:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800397a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	2b01      	cmp	r3, #1
 8003992:	d107      	bne.n	80039a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0210 	bic.w	r2, r2, #16
 80039a2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7ff ff2d 	bl	8003836 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b21      	cmp	r3, #33	; 0x21
 80039f6:	d13e      	bne.n	8003a76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a00:	d114      	bne.n	8003a2c <UART_Transmit_IT+0x48>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d110      	bne.n	8003a2c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	621a      	str	r2, [r3, #32]
 8003a2a:	e008      	b.n	8003a3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	1c59      	adds	r1, r3, #1
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6211      	str	r1, [r2, #32]
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e000      	b.n	8003a78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
  }
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr

08003a82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff febe 	bl	8003824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b086      	sub	sp, #24
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b22      	cmp	r3, #34	; 0x22
 8003ac4:	f040 8099 	bne.w	8003bfa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad0:	d117      	bne.n	8003b02 <UART_Receive_IT+0x50>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d113      	bne.n	8003b02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	1c9a      	adds	r2, r3, #2
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28
 8003b00:	e026      	b.n	8003b50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b14:	d007      	beq.n	8003b26 <UART_Receive_IT+0x74>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10a      	bne.n	8003b34 <UART_Receive_IT+0x82>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	e008      	b.n	8003b46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d148      	bne.n	8003bf6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0220 	bic.w	r2, r2, #32
 8003b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d123      	bne.n	8003bec <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0210 	bic.w	r2, r2, #16
 8003bb8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d10a      	bne.n	8003bde <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fe2f 	bl	8003848 <HAL_UARTEx_RxEventCallback>
 8003bea:	e002      	b.n	8003bf2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7fc ff2b 	bl	8000a48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e002      	b.n	8003bfc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c3e:	f023 030c 	bic.w	r3, r3, #12
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2c      	ldr	r2, [pc, #176]	; (8003d18 <UART_SetConfig+0x114>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d103      	bne.n	8003c74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c6c:	f7fe fb90 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	e002      	b.n	8003c7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c74:	f7fe fb78 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8003c78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009a      	lsls	r2, r3, #2
 8003c84:	441a      	add	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	4a22      	ldr	r2, [pc, #136]	; (8003d1c <UART_SetConfig+0x118>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	0119      	lsls	r1, r3, #4
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <UART_SetConfig+0x118>)
 8003cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2064      	movs	r0, #100	; 0x64
 8003cba:	fb00 f303 	mul.w	r3, r0, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	3332      	adds	r3, #50	; 0x32
 8003cc4:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <UART_SetConfig+0x118>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd0:	4419      	add	r1, r3
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009a      	lsls	r2, r3, #2
 8003cdc:	441a      	add	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <UART_SetConfig+0x118>)
 8003cea:	fba3 0302 	umull	r0, r3, r3, r2
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2064      	movs	r0, #100	; 0x64
 8003cf2:	fb00 f303 	mul.w	r3, r0, r3
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	3332      	adds	r3, #50	; 0x32
 8003cfc:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <UART_SetConfig+0x118>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	f003 020f 	and.w	r2, r3, #15
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	440a      	add	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40013800 	.word	0x40013800
 8003d1c:	51eb851f 	.word	0x51eb851f

08003d20 <__errno>:
 8003d20:	4b01      	ldr	r3, [pc, #4]	; (8003d28 <__errno+0x8>)
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000034 	.word	0x20000034

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	2600      	movs	r6, #0
 8003d30:	4d0c      	ldr	r5, [pc, #48]	; (8003d64 <__libc_init_array+0x38>)
 8003d32:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d34:	1b64      	subs	r4, r4, r5
 8003d36:	10a4      	asrs	r4, r4, #2
 8003d38:	42a6      	cmp	r6, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	f000 fc5c 	bl	80045f8 <_init>
 8003d40:	2600      	movs	r6, #0
 8003d42:	4d0a      	ldr	r5, [pc, #40]	; (8003d6c <__libc_init_array+0x40>)
 8003d44:	4c0a      	ldr	r4, [pc, #40]	; (8003d70 <__libc_init_array+0x44>)
 8003d46:	1b64      	subs	r4, r4, r5
 8003d48:	10a4      	asrs	r4, r4, #2
 8003d4a:	42a6      	cmp	r6, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d54:	4798      	blx	r3
 8003d56:	3601      	adds	r6, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5e:	4798      	blx	r3
 8003d60:	3601      	adds	r6, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	0800468c 	.word	0x0800468c
 8003d68:	0800468c 	.word	0x0800468c
 8003d6c:	0800468c 	.word	0x0800468c
 8003d70:	08004690 	.word	0x08004690

08003d74 <memset>:
 8003d74:	4603      	mov	r3, r0
 8003d76:	4402      	add	r2, r0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <memset+0xa>
 8003d7c:	4770      	bx	lr
 8003d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d82:	e7f9      	b.n	8003d78 <memset+0x4>

08003d84 <siprintf>:
 8003d84:	b40e      	push	{r1, r2, r3}
 8003d86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d8a:	b500      	push	{lr}
 8003d8c:	b09c      	sub	sp, #112	; 0x70
 8003d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d90:	9002      	str	r0, [sp, #8]
 8003d92:	9006      	str	r0, [sp, #24]
 8003d94:	9107      	str	r1, [sp, #28]
 8003d96:	9104      	str	r1, [sp, #16]
 8003d98:	4808      	ldr	r0, [pc, #32]	; (8003dbc <siprintf+0x38>)
 8003d9a:	4909      	ldr	r1, [pc, #36]	; (8003dc0 <siprintf+0x3c>)
 8003d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003da0:	9105      	str	r1, [sp, #20]
 8003da2:	6800      	ldr	r0, [r0, #0]
 8003da4:	a902      	add	r1, sp, #8
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	f000 f868 	bl	8003e7c <_svfiprintf_r>
 8003dac:	2200      	movs	r2, #0
 8003dae:	9b02      	ldr	r3, [sp, #8]
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	b01c      	add	sp, #112	; 0x70
 8003db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003db8:	b003      	add	sp, #12
 8003dba:	4770      	bx	lr
 8003dbc:	20000034 	.word	0x20000034
 8003dc0:	ffff0208 	.word	0xffff0208

08003dc4 <__ssputs_r>:
 8003dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc8:	688e      	ldr	r6, [r1, #8]
 8003dca:	4682      	mov	sl, r0
 8003dcc:	429e      	cmp	r6, r3
 8003dce:	460c      	mov	r4, r1
 8003dd0:	4690      	mov	r8, r2
 8003dd2:	461f      	mov	r7, r3
 8003dd4:	d838      	bhi.n	8003e48 <__ssputs_r+0x84>
 8003dd6:	898a      	ldrh	r2, [r1, #12]
 8003dd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ddc:	d032      	beq.n	8003e44 <__ssputs_r+0x80>
 8003dde:	6825      	ldr	r5, [r4, #0]
 8003de0:	6909      	ldr	r1, [r1, #16]
 8003de2:	3301      	adds	r3, #1
 8003de4:	eba5 0901 	sub.w	r9, r5, r1
 8003de8:	6965      	ldr	r5, [r4, #20]
 8003dea:	444b      	add	r3, r9
 8003dec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003df0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003df4:	106d      	asrs	r5, r5, #1
 8003df6:	429d      	cmp	r5, r3
 8003df8:	bf38      	it	cc
 8003dfa:	461d      	movcc	r5, r3
 8003dfc:	0553      	lsls	r3, r2, #21
 8003dfe:	d531      	bpl.n	8003e64 <__ssputs_r+0xa0>
 8003e00:	4629      	mov	r1, r5
 8003e02:	f000 fb53 	bl	80044ac <_malloc_r>
 8003e06:	4606      	mov	r6, r0
 8003e08:	b950      	cbnz	r0, 8003e20 <__ssputs_r+0x5c>
 8003e0a:	230c      	movs	r3, #12
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	f8ca 3000 	str.w	r3, [sl]
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e1a:	81a3      	strh	r3, [r4, #12]
 8003e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e20:	464a      	mov	r2, r9
 8003e22:	6921      	ldr	r1, [r4, #16]
 8003e24:	f000 face 	bl	80043c4 <memcpy>
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e32:	81a3      	strh	r3, [r4, #12]
 8003e34:	6126      	str	r6, [r4, #16]
 8003e36:	444e      	add	r6, r9
 8003e38:	6026      	str	r6, [r4, #0]
 8003e3a:	463e      	mov	r6, r7
 8003e3c:	6165      	str	r5, [r4, #20]
 8003e3e:	eba5 0509 	sub.w	r5, r5, r9
 8003e42:	60a5      	str	r5, [r4, #8]
 8003e44:	42be      	cmp	r6, r7
 8003e46:	d900      	bls.n	8003e4a <__ssputs_r+0x86>
 8003e48:	463e      	mov	r6, r7
 8003e4a:	4632      	mov	r2, r6
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	6820      	ldr	r0, [r4, #0]
 8003e50:	f000 fac6 	bl	80043e0 <memmove>
 8003e54:	68a3      	ldr	r3, [r4, #8]
 8003e56:	6822      	ldr	r2, [r4, #0]
 8003e58:	1b9b      	subs	r3, r3, r6
 8003e5a:	4432      	add	r2, r6
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	60a3      	str	r3, [r4, #8]
 8003e60:	6022      	str	r2, [r4, #0]
 8003e62:	e7db      	b.n	8003e1c <__ssputs_r+0x58>
 8003e64:	462a      	mov	r2, r5
 8003e66:	f000 fb7b 	bl	8004560 <_realloc_r>
 8003e6a:	4606      	mov	r6, r0
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d1e1      	bne.n	8003e34 <__ssputs_r+0x70>
 8003e70:	4650      	mov	r0, sl
 8003e72:	6921      	ldr	r1, [r4, #16]
 8003e74:	f000 face 	bl	8004414 <_free_r>
 8003e78:	e7c7      	b.n	8003e0a <__ssputs_r+0x46>
	...

08003e7c <_svfiprintf_r>:
 8003e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e80:	4698      	mov	r8, r3
 8003e82:	898b      	ldrh	r3, [r1, #12]
 8003e84:	4607      	mov	r7, r0
 8003e86:	061b      	lsls	r3, r3, #24
 8003e88:	460d      	mov	r5, r1
 8003e8a:	4614      	mov	r4, r2
 8003e8c:	b09d      	sub	sp, #116	; 0x74
 8003e8e:	d50e      	bpl.n	8003eae <_svfiprintf_r+0x32>
 8003e90:	690b      	ldr	r3, [r1, #16]
 8003e92:	b963      	cbnz	r3, 8003eae <_svfiprintf_r+0x32>
 8003e94:	2140      	movs	r1, #64	; 0x40
 8003e96:	f000 fb09 	bl	80044ac <_malloc_r>
 8003e9a:	6028      	str	r0, [r5, #0]
 8003e9c:	6128      	str	r0, [r5, #16]
 8003e9e:	b920      	cbnz	r0, 8003eaa <_svfiprintf_r+0x2e>
 8003ea0:	230c      	movs	r3, #12
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea8:	e0d1      	b.n	800404e <_svfiprintf_r+0x1d2>
 8003eaa:	2340      	movs	r3, #64	; 0x40
 8003eac:	616b      	str	r3, [r5, #20]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eb8:	2330      	movs	r3, #48	; 0x30
 8003eba:	f04f 0901 	mov.w	r9, #1
 8003ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ec2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004068 <_svfiprintf_r+0x1ec>
 8003ec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003eca:	4623      	mov	r3, r4
 8003ecc:	469a      	mov	sl, r3
 8003ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ed2:	b10a      	cbz	r2, 8003ed8 <_svfiprintf_r+0x5c>
 8003ed4:	2a25      	cmp	r2, #37	; 0x25
 8003ed6:	d1f9      	bne.n	8003ecc <_svfiprintf_r+0x50>
 8003ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8003edc:	d00b      	beq.n	8003ef6 <_svfiprintf_r+0x7a>
 8003ede:	465b      	mov	r3, fp
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f7ff ff6d 	bl	8003dc4 <__ssputs_r>
 8003eea:	3001      	adds	r0, #1
 8003eec:	f000 80aa 	beq.w	8004044 <_svfiprintf_r+0x1c8>
 8003ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ef2:	445a      	add	r2, fp
 8003ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 80a2 	beq.w	8004044 <_svfiprintf_r+0x1c8>
 8003f00:	2300      	movs	r3, #0
 8003f02:	f04f 32ff 	mov.w	r2, #4294967295
 8003f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f0a:	f10a 0a01 	add.w	sl, sl, #1
 8003f0e:	9304      	str	r3, [sp, #16]
 8003f10:	9307      	str	r3, [sp, #28]
 8003f12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f16:	931a      	str	r3, [sp, #104]	; 0x68
 8003f18:	4654      	mov	r4, sl
 8003f1a:	2205      	movs	r2, #5
 8003f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f20:	4851      	ldr	r0, [pc, #324]	; (8004068 <_svfiprintf_r+0x1ec>)
 8003f22:	f000 fa41 	bl	80043a8 <memchr>
 8003f26:	9a04      	ldr	r2, [sp, #16]
 8003f28:	b9d8      	cbnz	r0, 8003f62 <_svfiprintf_r+0xe6>
 8003f2a:	06d0      	lsls	r0, r2, #27
 8003f2c:	bf44      	itt	mi
 8003f2e:	2320      	movmi	r3, #32
 8003f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f34:	0711      	lsls	r1, r2, #28
 8003f36:	bf44      	itt	mi
 8003f38:	232b      	movmi	r3, #43	; 0x2b
 8003f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f42:	2b2a      	cmp	r3, #42	; 0x2a
 8003f44:	d015      	beq.n	8003f72 <_svfiprintf_r+0xf6>
 8003f46:	4654      	mov	r4, sl
 8003f48:	2000      	movs	r0, #0
 8003f4a:	f04f 0c0a 	mov.w	ip, #10
 8003f4e:	9a07      	ldr	r2, [sp, #28]
 8003f50:	4621      	mov	r1, r4
 8003f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f56:	3b30      	subs	r3, #48	; 0x30
 8003f58:	2b09      	cmp	r3, #9
 8003f5a:	d94e      	bls.n	8003ffa <_svfiprintf_r+0x17e>
 8003f5c:	b1b0      	cbz	r0, 8003f8c <_svfiprintf_r+0x110>
 8003f5e:	9207      	str	r2, [sp, #28]
 8003f60:	e014      	b.n	8003f8c <_svfiprintf_r+0x110>
 8003f62:	eba0 0308 	sub.w	r3, r0, r8
 8003f66:	fa09 f303 	lsl.w	r3, r9, r3
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	46a2      	mov	sl, r4
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	e7d2      	b.n	8003f18 <_svfiprintf_r+0x9c>
 8003f72:	9b03      	ldr	r3, [sp, #12]
 8003f74:	1d19      	adds	r1, r3, #4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	9103      	str	r1, [sp, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bfbb      	ittet	lt
 8003f7e:	425b      	neglt	r3, r3
 8003f80:	f042 0202 	orrlt.w	r2, r2, #2
 8003f84:	9307      	strge	r3, [sp, #28]
 8003f86:	9307      	strlt	r3, [sp, #28]
 8003f88:	bfb8      	it	lt
 8003f8a:	9204      	strlt	r2, [sp, #16]
 8003f8c:	7823      	ldrb	r3, [r4, #0]
 8003f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f90:	d10c      	bne.n	8003fac <_svfiprintf_r+0x130>
 8003f92:	7863      	ldrb	r3, [r4, #1]
 8003f94:	2b2a      	cmp	r3, #42	; 0x2a
 8003f96:	d135      	bne.n	8004004 <_svfiprintf_r+0x188>
 8003f98:	9b03      	ldr	r3, [sp, #12]
 8003f9a:	3402      	adds	r4, #2
 8003f9c:	1d1a      	adds	r2, r3, #4
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	9203      	str	r2, [sp, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bfb8      	it	lt
 8003fa6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003faa:	9305      	str	r3, [sp, #20]
 8003fac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004078 <_svfiprintf_r+0x1fc>
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	4650      	mov	r0, sl
 8003fb4:	7821      	ldrb	r1, [r4, #0]
 8003fb6:	f000 f9f7 	bl	80043a8 <memchr>
 8003fba:	b140      	cbz	r0, 8003fce <_svfiprintf_r+0x152>
 8003fbc:	2340      	movs	r3, #64	; 0x40
 8003fbe:	eba0 000a 	sub.w	r0, r0, sl
 8003fc2:	fa03 f000 	lsl.w	r0, r3, r0
 8003fc6:	9b04      	ldr	r3, [sp, #16]
 8003fc8:	3401      	adds	r4, #1
 8003fca:	4303      	orrs	r3, r0
 8003fcc:	9304      	str	r3, [sp, #16]
 8003fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd2:	2206      	movs	r2, #6
 8003fd4:	4825      	ldr	r0, [pc, #148]	; (800406c <_svfiprintf_r+0x1f0>)
 8003fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fda:	f000 f9e5 	bl	80043a8 <memchr>
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d038      	beq.n	8004054 <_svfiprintf_r+0x1d8>
 8003fe2:	4b23      	ldr	r3, [pc, #140]	; (8004070 <_svfiprintf_r+0x1f4>)
 8003fe4:	bb1b      	cbnz	r3, 800402e <_svfiprintf_r+0x1b2>
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	3307      	adds	r3, #7
 8003fea:	f023 0307 	bic.w	r3, r3, #7
 8003fee:	3308      	adds	r3, #8
 8003ff0:	9303      	str	r3, [sp, #12]
 8003ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff4:	4433      	add	r3, r6
 8003ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff8:	e767      	b.n	8003eca <_svfiprintf_r+0x4e>
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004002:	e7a5      	b.n	8003f50 <_svfiprintf_r+0xd4>
 8004004:	2300      	movs	r3, #0
 8004006:	f04f 0c0a 	mov.w	ip, #10
 800400a:	4619      	mov	r1, r3
 800400c:	3401      	adds	r4, #1
 800400e:	9305      	str	r3, [sp, #20]
 8004010:	4620      	mov	r0, r4
 8004012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004016:	3a30      	subs	r2, #48	; 0x30
 8004018:	2a09      	cmp	r2, #9
 800401a:	d903      	bls.n	8004024 <_svfiprintf_r+0x1a8>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0c5      	beq.n	8003fac <_svfiprintf_r+0x130>
 8004020:	9105      	str	r1, [sp, #20]
 8004022:	e7c3      	b.n	8003fac <_svfiprintf_r+0x130>
 8004024:	4604      	mov	r4, r0
 8004026:	2301      	movs	r3, #1
 8004028:	fb0c 2101 	mla	r1, ip, r1, r2
 800402c:	e7f0      	b.n	8004010 <_svfiprintf_r+0x194>
 800402e:	ab03      	add	r3, sp, #12
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	462a      	mov	r2, r5
 8004034:	4638      	mov	r0, r7
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <_svfiprintf_r+0x1f8>)
 8004038:	a904      	add	r1, sp, #16
 800403a:	f3af 8000 	nop.w
 800403e:	1c42      	adds	r2, r0, #1
 8004040:	4606      	mov	r6, r0
 8004042:	d1d6      	bne.n	8003ff2 <_svfiprintf_r+0x176>
 8004044:	89ab      	ldrh	r3, [r5, #12]
 8004046:	065b      	lsls	r3, r3, #25
 8004048:	f53f af2c 	bmi.w	8003ea4 <_svfiprintf_r+0x28>
 800404c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800404e:	b01d      	add	sp, #116	; 0x74
 8004050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004054:	ab03      	add	r3, sp, #12
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	462a      	mov	r2, r5
 800405a:	4638      	mov	r0, r7
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <_svfiprintf_r+0x1f8>)
 800405e:	a904      	add	r1, sp, #16
 8004060:	f000 f87c 	bl	800415c <_printf_i>
 8004064:	e7eb      	b.n	800403e <_svfiprintf_r+0x1c2>
 8004066:	bf00      	nop
 8004068:	08004658 	.word	0x08004658
 800406c:	08004662 	.word	0x08004662
 8004070:	00000000 	.word	0x00000000
 8004074:	08003dc5 	.word	0x08003dc5
 8004078:	0800465e 	.word	0x0800465e

0800407c <_printf_common>:
 800407c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004080:	4616      	mov	r6, r2
 8004082:	4699      	mov	r9, r3
 8004084:	688a      	ldr	r2, [r1, #8]
 8004086:	690b      	ldr	r3, [r1, #16]
 8004088:	4607      	mov	r7, r0
 800408a:	4293      	cmp	r3, r2
 800408c:	bfb8      	it	lt
 800408e:	4613      	movlt	r3, r2
 8004090:	6033      	str	r3, [r6, #0]
 8004092:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004096:	460c      	mov	r4, r1
 8004098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800409c:	b10a      	cbz	r2, 80040a2 <_printf_common+0x26>
 800409e:	3301      	adds	r3, #1
 80040a0:	6033      	str	r3, [r6, #0]
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	0699      	lsls	r1, r3, #26
 80040a6:	bf42      	ittt	mi
 80040a8:	6833      	ldrmi	r3, [r6, #0]
 80040aa:	3302      	addmi	r3, #2
 80040ac:	6033      	strmi	r3, [r6, #0]
 80040ae:	6825      	ldr	r5, [r4, #0]
 80040b0:	f015 0506 	ands.w	r5, r5, #6
 80040b4:	d106      	bne.n	80040c4 <_printf_common+0x48>
 80040b6:	f104 0a19 	add.w	sl, r4, #25
 80040ba:	68e3      	ldr	r3, [r4, #12]
 80040bc:	6832      	ldr	r2, [r6, #0]
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	42ab      	cmp	r3, r5
 80040c2:	dc28      	bgt.n	8004116 <_printf_common+0x9a>
 80040c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040c8:	1e13      	subs	r3, r2, #0
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	bf18      	it	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	0692      	lsls	r2, r2, #26
 80040d2:	d42d      	bmi.n	8004130 <_printf_common+0xb4>
 80040d4:	4649      	mov	r1, r9
 80040d6:	4638      	mov	r0, r7
 80040d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040dc:	47c0      	blx	r8
 80040de:	3001      	adds	r0, #1
 80040e0:	d020      	beq.n	8004124 <_printf_common+0xa8>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	68e5      	ldr	r5, [r4, #12]
 80040e6:	f003 0306 	and.w	r3, r3, #6
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	bf18      	it	ne
 80040ee:	2500      	movne	r5, #0
 80040f0:	6832      	ldr	r2, [r6, #0]
 80040f2:	f04f 0600 	mov.w	r6, #0
 80040f6:	68a3      	ldr	r3, [r4, #8]
 80040f8:	bf08      	it	eq
 80040fa:	1aad      	subeq	r5, r5, r2
 80040fc:	6922      	ldr	r2, [r4, #16]
 80040fe:	bf08      	it	eq
 8004100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004104:	4293      	cmp	r3, r2
 8004106:	bfc4      	itt	gt
 8004108:	1a9b      	subgt	r3, r3, r2
 800410a:	18ed      	addgt	r5, r5, r3
 800410c:	341a      	adds	r4, #26
 800410e:	42b5      	cmp	r5, r6
 8004110:	d11a      	bne.n	8004148 <_printf_common+0xcc>
 8004112:	2000      	movs	r0, #0
 8004114:	e008      	b.n	8004128 <_printf_common+0xac>
 8004116:	2301      	movs	r3, #1
 8004118:	4652      	mov	r2, sl
 800411a:	4649      	mov	r1, r9
 800411c:	4638      	mov	r0, r7
 800411e:	47c0      	blx	r8
 8004120:	3001      	adds	r0, #1
 8004122:	d103      	bne.n	800412c <_printf_common+0xb0>
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412c:	3501      	adds	r5, #1
 800412e:	e7c4      	b.n	80040ba <_printf_common+0x3e>
 8004130:	2030      	movs	r0, #48	; 0x30
 8004132:	18e1      	adds	r1, r4, r3
 8004134:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800413e:	4422      	add	r2, r4
 8004140:	3302      	adds	r3, #2
 8004142:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004146:	e7c5      	b.n	80040d4 <_printf_common+0x58>
 8004148:	2301      	movs	r3, #1
 800414a:	4622      	mov	r2, r4
 800414c:	4649      	mov	r1, r9
 800414e:	4638      	mov	r0, r7
 8004150:	47c0      	blx	r8
 8004152:	3001      	adds	r0, #1
 8004154:	d0e6      	beq.n	8004124 <_printf_common+0xa8>
 8004156:	3601      	adds	r6, #1
 8004158:	e7d9      	b.n	800410e <_printf_common+0x92>
	...

0800415c <_printf_i>:
 800415c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004160:	460c      	mov	r4, r1
 8004162:	7e27      	ldrb	r7, [r4, #24]
 8004164:	4691      	mov	r9, r2
 8004166:	2f78      	cmp	r7, #120	; 0x78
 8004168:	4680      	mov	r8, r0
 800416a:	469a      	mov	sl, r3
 800416c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800416e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004172:	d807      	bhi.n	8004184 <_printf_i+0x28>
 8004174:	2f62      	cmp	r7, #98	; 0x62
 8004176:	d80a      	bhi.n	800418e <_printf_i+0x32>
 8004178:	2f00      	cmp	r7, #0
 800417a:	f000 80d9 	beq.w	8004330 <_printf_i+0x1d4>
 800417e:	2f58      	cmp	r7, #88	; 0x58
 8004180:	f000 80a4 	beq.w	80042cc <_printf_i+0x170>
 8004184:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800418c:	e03a      	b.n	8004204 <_printf_i+0xa8>
 800418e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004192:	2b15      	cmp	r3, #21
 8004194:	d8f6      	bhi.n	8004184 <_printf_i+0x28>
 8004196:	a001      	add	r0, pc, #4	; (adr r0, 800419c <_printf_i+0x40>)
 8004198:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800419c:	080041f5 	.word	0x080041f5
 80041a0:	08004209 	.word	0x08004209
 80041a4:	08004185 	.word	0x08004185
 80041a8:	08004185 	.word	0x08004185
 80041ac:	08004185 	.word	0x08004185
 80041b0:	08004185 	.word	0x08004185
 80041b4:	08004209 	.word	0x08004209
 80041b8:	08004185 	.word	0x08004185
 80041bc:	08004185 	.word	0x08004185
 80041c0:	08004185 	.word	0x08004185
 80041c4:	08004185 	.word	0x08004185
 80041c8:	08004317 	.word	0x08004317
 80041cc:	08004239 	.word	0x08004239
 80041d0:	080042f9 	.word	0x080042f9
 80041d4:	08004185 	.word	0x08004185
 80041d8:	08004185 	.word	0x08004185
 80041dc:	08004339 	.word	0x08004339
 80041e0:	08004185 	.word	0x08004185
 80041e4:	08004239 	.word	0x08004239
 80041e8:	08004185 	.word	0x08004185
 80041ec:	08004185 	.word	0x08004185
 80041f0:	08004301 	.word	0x08004301
 80041f4:	680b      	ldr	r3, [r1, #0]
 80041f6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041fa:	1d1a      	adds	r2, r3, #4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	600a      	str	r2, [r1, #0]
 8004200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004204:	2301      	movs	r3, #1
 8004206:	e0a4      	b.n	8004352 <_printf_i+0x1f6>
 8004208:	6825      	ldr	r5, [r4, #0]
 800420a:	6808      	ldr	r0, [r1, #0]
 800420c:	062e      	lsls	r6, r5, #24
 800420e:	f100 0304 	add.w	r3, r0, #4
 8004212:	d50a      	bpl.n	800422a <_printf_i+0xce>
 8004214:	6805      	ldr	r5, [r0, #0]
 8004216:	600b      	str	r3, [r1, #0]
 8004218:	2d00      	cmp	r5, #0
 800421a:	da03      	bge.n	8004224 <_printf_i+0xc8>
 800421c:	232d      	movs	r3, #45	; 0x2d
 800421e:	426d      	negs	r5, r5
 8004220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004224:	230a      	movs	r3, #10
 8004226:	485e      	ldr	r0, [pc, #376]	; (80043a0 <_printf_i+0x244>)
 8004228:	e019      	b.n	800425e <_printf_i+0x102>
 800422a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800422e:	6805      	ldr	r5, [r0, #0]
 8004230:	600b      	str	r3, [r1, #0]
 8004232:	bf18      	it	ne
 8004234:	b22d      	sxthne	r5, r5
 8004236:	e7ef      	b.n	8004218 <_printf_i+0xbc>
 8004238:	680b      	ldr	r3, [r1, #0]
 800423a:	6825      	ldr	r5, [r4, #0]
 800423c:	1d18      	adds	r0, r3, #4
 800423e:	6008      	str	r0, [r1, #0]
 8004240:	0628      	lsls	r0, r5, #24
 8004242:	d501      	bpl.n	8004248 <_printf_i+0xec>
 8004244:	681d      	ldr	r5, [r3, #0]
 8004246:	e002      	b.n	800424e <_printf_i+0xf2>
 8004248:	0669      	lsls	r1, r5, #25
 800424a:	d5fb      	bpl.n	8004244 <_printf_i+0xe8>
 800424c:	881d      	ldrh	r5, [r3, #0]
 800424e:	2f6f      	cmp	r7, #111	; 0x6f
 8004250:	bf0c      	ite	eq
 8004252:	2308      	moveq	r3, #8
 8004254:	230a      	movne	r3, #10
 8004256:	4852      	ldr	r0, [pc, #328]	; (80043a0 <_printf_i+0x244>)
 8004258:	2100      	movs	r1, #0
 800425a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800425e:	6866      	ldr	r6, [r4, #4]
 8004260:	2e00      	cmp	r6, #0
 8004262:	bfa8      	it	ge
 8004264:	6821      	ldrge	r1, [r4, #0]
 8004266:	60a6      	str	r6, [r4, #8]
 8004268:	bfa4      	itt	ge
 800426a:	f021 0104 	bicge.w	r1, r1, #4
 800426e:	6021      	strge	r1, [r4, #0]
 8004270:	b90d      	cbnz	r5, 8004276 <_printf_i+0x11a>
 8004272:	2e00      	cmp	r6, #0
 8004274:	d04d      	beq.n	8004312 <_printf_i+0x1b6>
 8004276:	4616      	mov	r6, r2
 8004278:	fbb5 f1f3 	udiv	r1, r5, r3
 800427c:	fb03 5711 	mls	r7, r3, r1, r5
 8004280:	5dc7      	ldrb	r7, [r0, r7]
 8004282:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004286:	462f      	mov	r7, r5
 8004288:	42bb      	cmp	r3, r7
 800428a:	460d      	mov	r5, r1
 800428c:	d9f4      	bls.n	8004278 <_printf_i+0x11c>
 800428e:	2b08      	cmp	r3, #8
 8004290:	d10b      	bne.n	80042aa <_printf_i+0x14e>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	07df      	lsls	r7, r3, #31
 8004296:	d508      	bpl.n	80042aa <_printf_i+0x14e>
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	6861      	ldr	r1, [r4, #4]
 800429c:	4299      	cmp	r1, r3
 800429e:	bfde      	ittt	le
 80042a0:	2330      	movle	r3, #48	; 0x30
 80042a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042aa:	1b92      	subs	r2, r2, r6
 80042ac:	6122      	str	r2, [r4, #16]
 80042ae:	464b      	mov	r3, r9
 80042b0:	4621      	mov	r1, r4
 80042b2:	4640      	mov	r0, r8
 80042b4:	f8cd a000 	str.w	sl, [sp]
 80042b8:	aa03      	add	r2, sp, #12
 80042ba:	f7ff fedf 	bl	800407c <_printf_common>
 80042be:	3001      	adds	r0, #1
 80042c0:	d14c      	bne.n	800435c <_printf_i+0x200>
 80042c2:	f04f 30ff 	mov.w	r0, #4294967295
 80042c6:	b004      	add	sp, #16
 80042c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042cc:	4834      	ldr	r0, [pc, #208]	; (80043a0 <_printf_i+0x244>)
 80042ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042d2:	680e      	ldr	r6, [r1, #0]
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80042da:	061f      	lsls	r7, r3, #24
 80042dc:	600e      	str	r6, [r1, #0]
 80042de:	d514      	bpl.n	800430a <_printf_i+0x1ae>
 80042e0:	07d9      	lsls	r1, r3, #31
 80042e2:	bf44      	itt	mi
 80042e4:	f043 0320 	orrmi.w	r3, r3, #32
 80042e8:	6023      	strmi	r3, [r4, #0]
 80042ea:	b91d      	cbnz	r5, 80042f4 <_printf_i+0x198>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	f023 0320 	bic.w	r3, r3, #32
 80042f2:	6023      	str	r3, [r4, #0]
 80042f4:	2310      	movs	r3, #16
 80042f6:	e7af      	b.n	8004258 <_printf_i+0xfc>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	f043 0320 	orr.w	r3, r3, #32
 80042fe:	6023      	str	r3, [r4, #0]
 8004300:	2378      	movs	r3, #120	; 0x78
 8004302:	4828      	ldr	r0, [pc, #160]	; (80043a4 <_printf_i+0x248>)
 8004304:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004308:	e7e3      	b.n	80042d2 <_printf_i+0x176>
 800430a:	065e      	lsls	r6, r3, #25
 800430c:	bf48      	it	mi
 800430e:	b2ad      	uxthmi	r5, r5
 8004310:	e7e6      	b.n	80042e0 <_printf_i+0x184>
 8004312:	4616      	mov	r6, r2
 8004314:	e7bb      	b.n	800428e <_printf_i+0x132>
 8004316:	680b      	ldr	r3, [r1, #0]
 8004318:	6826      	ldr	r6, [r4, #0]
 800431a:	1d1d      	adds	r5, r3, #4
 800431c:	6960      	ldr	r0, [r4, #20]
 800431e:	600d      	str	r5, [r1, #0]
 8004320:	0635      	lsls	r5, r6, #24
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	d501      	bpl.n	800432a <_printf_i+0x1ce>
 8004326:	6018      	str	r0, [r3, #0]
 8004328:	e002      	b.n	8004330 <_printf_i+0x1d4>
 800432a:	0671      	lsls	r1, r6, #25
 800432c:	d5fb      	bpl.n	8004326 <_printf_i+0x1ca>
 800432e:	8018      	strh	r0, [r3, #0]
 8004330:	2300      	movs	r3, #0
 8004332:	4616      	mov	r6, r2
 8004334:	6123      	str	r3, [r4, #16]
 8004336:	e7ba      	b.n	80042ae <_printf_i+0x152>
 8004338:	680b      	ldr	r3, [r1, #0]
 800433a:	1d1a      	adds	r2, r3, #4
 800433c:	600a      	str	r2, [r1, #0]
 800433e:	681e      	ldr	r6, [r3, #0]
 8004340:	2100      	movs	r1, #0
 8004342:	4630      	mov	r0, r6
 8004344:	6862      	ldr	r2, [r4, #4]
 8004346:	f000 f82f 	bl	80043a8 <memchr>
 800434a:	b108      	cbz	r0, 8004350 <_printf_i+0x1f4>
 800434c:	1b80      	subs	r0, r0, r6
 800434e:	6060      	str	r0, [r4, #4]
 8004350:	6863      	ldr	r3, [r4, #4]
 8004352:	6123      	str	r3, [r4, #16]
 8004354:	2300      	movs	r3, #0
 8004356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800435a:	e7a8      	b.n	80042ae <_printf_i+0x152>
 800435c:	4632      	mov	r2, r6
 800435e:	4649      	mov	r1, r9
 8004360:	4640      	mov	r0, r8
 8004362:	6923      	ldr	r3, [r4, #16]
 8004364:	47d0      	blx	sl
 8004366:	3001      	adds	r0, #1
 8004368:	d0ab      	beq.n	80042c2 <_printf_i+0x166>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	079b      	lsls	r3, r3, #30
 800436e:	d413      	bmi.n	8004398 <_printf_i+0x23c>
 8004370:	68e0      	ldr	r0, [r4, #12]
 8004372:	9b03      	ldr	r3, [sp, #12]
 8004374:	4298      	cmp	r0, r3
 8004376:	bfb8      	it	lt
 8004378:	4618      	movlt	r0, r3
 800437a:	e7a4      	b.n	80042c6 <_printf_i+0x16a>
 800437c:	2301      	movs	r3, #1
 800437e:	4632      	mov	r2, r6
 8004380:	4649      	mov	r1, r9
 8004382:	4640      	mov	r0, r8
 8004384:	47d0      	blx	sl
 8004386:	3001      	adds	r0, #1
 8004388:	d09b      	beq.n	80042c2 <_printf_i+0x166>
 800438a:	3501      	adds	r5, #1
 800438c:	68e3      	ldr	r3, [r4, #12]
 800438e:	9903      	ldr	r1, [sp, #12]
 8004390:	1a5b      	subs	r3, r3, r1
 8004392:	42ab      	cmp	r3, r5
 8004394:	dcf2      	bgt.n	800437c <_printf_i+0x220>
 8004396:	e7eb      	b.n	8004370 <_printf_i+0x214>
 8004398:	2500      	movs	r5, #0
 800439a:	f104 0619 	add.w	r6, r4, #25
 800439e:	e7f5      	b.n	800438c <_printf_i+0x230>
 80043a0:	08004669 	.word	0x08004669
 80043a4:	0800467a 	.word	0x0800467a

080043a8 <memchr>:
 80043a8:	4603      	mov	r3, r0
 80043aa:	b510      	push	{r4, lr}
 80043ac:	b2c9      	uxtb	r1, r1
 80043ae:	4402      	add	r2, r0
 80043b0:	4293      	cmp	r3, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	d101      	bne.n	80043ba <memchr+0x12>
 80043b6:	2000      	movs	r0, #0
 80043b8:	e003      	b.n	80043c2 <memchr+0x1a>
 80043ba:	7804      	ldrb	r4, [r0, #0]
 80043bc:	3301      	adds	r3, #1
 80043be:	428c      	cmp	r4, r1
 80043c0:	d1f6      	bne.n	80043b0 <memchr+0x8>
 80043c2:	bd10      	pop	{r4, pc}

080043c4 <memcpy>:
 80043c4:	440a      	add	r2, r1
 80043c6:	4291      	cmp	r1, r2
 80043c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043cc:	d100      	bne.n	80043d0 <memcpy+0xc>
 80043ce:	4770      	bx	lr
 80043d0:	b510      	push	{r4, lr}
 80043d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043d6:	4291      	cmp	r1, r2
 80043d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043dc:	d1f9      	bne.n	80043d2 <memcpy+0xe>
 80043de:	bd10      	pop	{r4, pc}

080043e0 <memmove>:
 80043e0:	4288      	cmp	r0, r1
 80043e2:	b510      	push	{r4, lr}
 80043e4:	eb01 0402 	add.w	r4, r1, r2
 80043e8:	d902      	bls.n	80043f0 <memmove+0x10>
 80043ea:	4284      	cmp	r4, r0
 80043ec:	4623      	mov	r3, r4
 80043ee:	d807      	bhi.n	8004400 <memmove+0x20>
 80043f0:	1e43      	subs	r3, r0, #1
 80043f2:	42a1      	cmp	r1, r4
 80043f4:	d008      	beq.n	8004408 <memmove+0x28>
 80043f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043fe:	e7f8      	b.n	80043f2 <memmove+0x12>
 8004400:	4601      	mov	r1, r0
 8004402:	4402      	add	r2, r0
 8004404:	428a      	cmp	r2, r1
 8004406:	d100      	bne.n	800440a <memmove+0x2a>
 8004408:	bd10      	pop	{r4, pc}
 800440a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800440e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004412:	e7f7      	b.n	8004404 <memmove+0x24>

08004414 <_free_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4605      	mov	r5, r0
 8004418:	2900      	cmp	r1, #0
 800441a:	d043      	beq.n	80044a4 <_free_r+0x90>
 800441c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004420:	1f0c      	subs	r4, r1, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfb8      	it	lt
 8004426:	18e4      	addlt	r4, r4, r3
 8004428:	f000 f8d0 	bl	80045cc <__malloc_lock>
 800442c:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <_free_r+0x94>)
 800442e:	6813      	ldr	r3, [r2, #0]
 8004430:	4610      	mov	r0, r2
 8004432:	b933      	cbnz	r3, 8004442 <_free_r+0x2e>
 8004434:	6063      	str	r3, [r4, #4]
 8004436:	6014      	str	r4, [r2, #0]
 8004438:	4628      	mov	r0, r5
 800443a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800443e:	f000 b8cb 	b.w	80045d8 <__malloc_unlock>
 8004442:	42a3      	cmp	r3, r4
 8004444:	d90a      	bls.n	800445c <_free_r+0x48>
 8004446:	6821      	ldr	r1, [r4, #0]
 8004448:	1862      	adds	r2, r4, r1
 800444a:	4293      	cmp	r3, r2
 800444c:	bf01      	itttt	eq
 800444e:	681a      	ldreq	r2, [r3, #0]
 8004450:	685b      	ldreq	r3, [r3, #4]
 8004452:	1852      	addeq	r2, r2, r1
 8004454:	6022      	streq	r2, [r4, #0]
 8004456:	6063      	str	r3, [r4, #4]
 8004458:	6004      	str	r4, [r0, #0]
 800445a:	e7ed      	b.n	8004438 <_free_r+0x24>
 800445c:	461a      	mov	r2, r3
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	b10b      	cbz	r3, 8004466 <_free_r+0x52>
 8004462:	42a3      	cmp	r3, r4
 8004464:	d9fa      	bls.n	800445c <_free_r+0x48>
 8004466:	6811      	ldr	r1, [r2, #0]
 8004468:	1850      	adds	r0, r2, r1
 800446a:	42a0      	cmp	r0, r4
 800446c:	d10b      	bne.n	8004486 <_free_r+0x72>
 800446e:	6820      	ldr	r0, [r4, #0]
 8004470:	4401      	add	r1, r0
 8004472:	1850      	adds	r0, r2, r1
 8004474:	4283      	cmp	r3, r0
 8004476:	6011      	str	r1, [r2, #0]
 8004478:	d1de      	bne.n	8004438 <_free_r+0x24>
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4401      	add	r1, r0
 8004480:	6011      	str	r1, [r2, #0]
 8004482:	6053      	str	r3, [r2, #4]
 8004484:	e7d8      	b.n	8004438 <_free_r+0x24>
 8004486:	d902      	bls.n	800448e <_free_r+0x7a>
 8004488:	230c      	movs	r3, #12
 800448a:	602b      	str	r3, [r5, #0]
 800448c:	e7d4      	b.n	8004438 <_free_r+0x24>
 800448e:	6820      	ldr	r0, [r4, #0]
 8004490:	1821      	adds	r1, r4, r0
 8004492:	428b      	cmp	r3, r1
 8004494:	bf01      	itttt	eq
 8004496:	6819      	ldreq	r1, [r3, #0]
 8004498:	685b      	ldreq	r3, [r3, #4]
 800449a:	1809      	addeq	r1, r1, r0
 800449c:	6021      	streq	r1, [r4, #0]
 800449e:	6063      	str	r3, [r4, #4]
 80044a0:	6054      	str	r4, [r2, #4]
 80044a2:	e7c9      	b.n	8004438 <_free_r+0x24>
 80044a4:	bd38      	pop	{r3, r4, r5, pc}
 80044a6:	bf00      	nop
 80044a8:	200000f4 	.word	0x200000f4

080044ac <_malloc_r>:
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	1ccd      	adds	r5, r1, #3
 80044b0:	f025 0503 	bic.w	r5, r5, #3
 80044b4:	3508      	adds	r5, #8
 80044b6:	2d0c      	cmp	r5, #12
 80044b8:	bf38      	it	cc
 80044ba:	250c      	movcc	r5, #12
 80044bc:	2d00      	cmp	r5, #0
 80044be:	4606      	mov	r6, r0
 80044c0:	db01      	blt.n	80044c6 <_malloc_r+0x1a>
 80044c2:	42a9      	cmp	r1, r5
 80044c4:	d903      	bls.n	80044ce <_malloc_r+0x22>
 80044c6:	230c      	movs	r3, #12
 80044c8:	6033      	str	r3, [r6, #0]
 80044ca:	2000      	movs	r0, #0
 80044cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ce:	f000 f87d 	bl	80045cc <__malloc_lock>
 80044d2:	4921      	ldr	r1, [pc, #132]	; (8004558 <_malloc_r+0xac>)
 80044d4:	680a      	ldr	r2, [r1, #0]
 80044d6:	4614      	mov	r4, r2
 80044d8:	b99c      	cbnz	r4, 8004502 <_malloc_r+0x56>
 80044da:	4f20      	ldr	r7, [pc, #128]	; (800455c <_malloc_r+0xb0>)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	b923      	cbnz	r3, 80044ea <_malloc_r+0x3e>
 80044e0:	4621      	mov	r1, r4
 80044e2:	4630      	mov	r0, r6
 80044e4:	f000 f862 	bl	80045ac <_sbrk_r>
 80044e8:	6038      	str	r0, [r7, #0]
 80044ea:	4629      	mov	r1, r5
 80044ec:	4630      	mov	r0, r6
 80044ee:	f000 f85d 	bl	80045ac <_sbrk_r>
 80044f2:	1c43      	adds	r3, r0, #1
 80044f4:	d123      	bne.n	800453e <_malloc_r+0x92>
 80044f6:	230c      	movs	r3, #12
 80044f8:	4630      	mov	r0, r6
 80044fa:	6033      	str	r3, [r6, #0]
 80044fc:	f000 f86c 	bl	80045d8 <__malloc_unlock>
 8004500:	e7e3      	b.n	80044ca <_malloc_r+0x1e>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	1b5b      	subs	r3, r3, r5
 8004506:	d417      	bmi.n	8004538 <_malloc_r+0x8c>
 8004508:	2b0b      	cmp	r3, #11
 800450a:	d903      	bls.n	8004514 <_malloc_r+0x68>
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	441c      	add	r4, r3
 8004510:	6025      	str	r5, [r4, #0]
 8004512:	e004      	b.n	800451e <_malloc_r+0x72>
 8004514:	6863      	ldr	r3, [r4, #4]
 8004516:	42a2      	cmp	r2, r4
 8004518:	bf0c      	ite	eq
 800451a:	600b      	streq	r3, [r1, #0]
 800451c:	6053      	strne	r3, [r2, #4]
 800451e:	4630      	mov	r0, r6
 8004520:	f000 f85a 	bl	80045d8 <__malloc_unlock>
 8004524:	f104 000b 	add.w	r0, r4, #11
 8004528:	1d23      	adds	r3, r4, #4
 800452a:	f020 0007 	bic.w	r0, r0, #7
 800452e:	1ac2      	subs	r2, r0, r3
 8004530:	d0cc      	beq.n	80044cc <_malloc_r+0x20>
 8004532:	1a1b      	subs	r3, r3, r0
 8004534:	50a3      	str	r3, [r4, r2]
 8004536:	e7c9      	b.n	80044cc <_malloc_r+0x20>
 8004538:	4622      	mov	r2, r4
 800453a:	6864      	ldr	r4, [r4, #4]
 800453c:	e7cc      	b.n	80044d8 <_malloc_r+0x2c>
 800453e:	1cc4      	adds	r4, r0, #3
 8004540:	f024 0403 	bic.w	r4, r4, #3
 8004544:	42a0      	cmp	r0, r4
 8004546:	d0e3      	beq.n	8004510 <_malloc_r+0x64>
 8004548:	1a21      	subs	r1, r4, r0
 800454a:	4630      	mov	r0, r6
 800454c:	f000 f82e 	bl	80045ac <_sbrk_r>
 8004550:	3001      	adds	r0, #1
 8004552:	d1dd      	bne.n	8004510 <_malloc_r+0x64>
 8004554:	e7cf      	b.n	80044f6 <_malloc_r+0x4a>
 8004556:	bf00      	nop
 8004558:	200000f4 	.word	0x200000f4
 800455c:	200000f8 	.word	0x200000f8

08004560 <_realloc_r>:
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	4607      	mov	r7, r0
 8004564:	4614      	mov	r4, r2
 8004566:	460e      	mov	r6, r1
 8004568:	b921      	cbnz	r1, 8004574 <_realloc_r+0x14>
 800456a:	4611      	mov	r1, r2
 800456c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004570:	f7ff bf9c 	b.w	80044ac <_malloc_r>
 8004574:	b922      	cbnz	r2, 8004580 <_realloc_r+0x20>
 8004576:	f7ff ff4d 	bl	8004414 <_free_r>
 800457a:	4625      	mov	r5, r4
 800457c:	4628      	mov	r0, r5
 800457e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004580:	f000 f830 	bl	80045e4 <_malloc_usable_size_r>
 8004584:	42a0      	cmp	r0, r4
 8004586:	d20f      	bcs.n	80045a8 <_realloc_r+0x48>
 8004588:	4621      	mov	r1, r4
 800458a:	4638      	mov	r0, r7
 800458c:	f7ff ff8e 	bl	80044ac <_malloc_r>
 8004590:	4605      	mov	r5, r0
 8004592:	2800      	cmp	r0, #0
 8004594:	d0f2      	beq.n	800457c <_realloc_r+0x1c>
 8004596:	4631      	mov	r1, r6
 8004598:	4622      	mov	r2, r4
 800459a:	f7ff ff13 	bl	80043c4 <memcpy>
 800459e:	4631      	mov	r1, r6
 80045a0:	4638      	mov	r0, r7
 80045a2:	f7ff ff37 	bl	8004414 <_free_r>
 80045a6:	e7e9      	b.n	800457c <_realloc_r+0x1c>
 80045a8:	4635      	mov	r5, r6
 80045aa:	e7e7      	b.n	800457c <_realloc_r+0x1c>

080045ac <_sbrk_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	2300      	movs	r3, #0
 80045b0:	4d05      	ldr	r5, [pc, #20]	; (80045c8 <_sbrk_r+0x1c>)
 80045b2:	4604      	mov	r4, r0
 80045b4:	4608      	mov	r0, r1
 80045b6:	602b      	str	r3, [r5, #0]
 80045b8:	f7fc fdac 	bl	8001114 <_sbrk>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	d102      	bne.n	80045c6 <_sbrk_r+0x1a>
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	b103      	cbz	r3, 80045c6 <_sbrk_r+0x1a>
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	200001f0 	.word	0x200001f0

080045cc <__malloc_lock>:
 80045cc:	4801      	ldr	r0, [pc, #4]	; (80045d4 <__malloc_lock+0x8>)
 80045ce:	f000 b811 	b.w	80045f4 <__retarget_lock_acquire_recursive>
 80045d2:	bf00      	nop
 80045d4:	200001f8 	.word	0x200001f8

080045d8 <__malloc_unlock>:
 80045d8:	4801      	ldr	r0, [pc, #4]	; (80045e0 <__malloc_unlock+0x8>)
 80045da:	f000 b80c 	b.w	80045f6 <__retarget_lock_release_recursive>
 80045de:	bf00      	nop
 80045e0:	200001f8 	.word	0x200001f8

080045e4 <_malloc_usable_size_r>:
 80045e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e8:	1f18      	subs	r0, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bfbc      	itt	lt
 80045ee:	580b      	ldrlt	r3, [r1, r0]
 80045f0:	18c0      	addlt	r0, r0, r3
 80045f2:	4770      	bx	lr

080045f4 <__retarget_lock_acquire_recursive>:
 80045f4:	4770      	bx	lr

080045f6 <__retarget_lock_release_recursive>:
 80045f6:	4770      	bx	lr

080045f8 <_init>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	bf00      	nop
 80045fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fe:	bc08      	pop	{r3}
 8004600:	469e      	mov	lr, r3
 8004602:	4770      	bx	lr

08004604 <_fini>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr
