
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004464  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800460c  0800460c  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800460c  0800460c  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800460c  0800460c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000098  080046ac  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080046ac  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eeab  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002361  00000000  00000000  0002ef6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000312d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00031f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018583  00000000  00000000  00032b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e323  00000000  00000000  0004b10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af02  00000000  00000000  0005942e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4330  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000386c  00000000  00000000  000e4384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004558 	.word	0x08004558

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004558 	.word	0x08004558

0800014c <initial>:
int initial_flag=1;

UART_HandleTypeDef huart2;
TIM_HandleTypeDef htim3;
void initial()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	status_1=AUTO_RED;
 8000150:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <initial+0x38>)
 8000152:	2200      	movs	r2, #0
 8000154:	601a      	str	r2, [r3, #0]
	status_2=AUTO_GREEN;
 8000156:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <initial+0x3c>)
 8000158:	2202      	movs	r2, #2
 800015a:	601a      	str	r2, [r3, #0]
	mode=1;
 800015c:	4b0b      	ldr	r3, [pc, #44]	; (800018c <initial+0x40>)
 800015e:	2201      	movs	r2, #1
 8000160:	601a      	str	r2, [r3, #0]
	time1=lightbufferRun[AUTO_RED];
 8000162:	4b0b      	ldr	r3, [pc, #44]	; (8000190 <initial+0x44>)
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	461a      	mov	r2, r3
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <initial+0x48>)
 800016a:	601a      	str	r2, [r3, #0]
	time2=lightbufferRun[AUTO_GREEN];
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <initial+0x44>)
 800016e:	789b      	ldrb	r3, [r3, #2]
 8000170:	461a      	mov	r2, r3
 8000172:	4b09      	ldr	r3, [pc, #36]	; (8000198 <initial+0x4c>)
 8000174:	601a      	str	r2, [r3, #0]
	setTimerRun(1000);
 8000176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800017a:	f001 f803 	bl	8001184 <setTimerRun>
}
 800017e:	bf00      	nop
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	20000114 	.word	0x20000114
 8000188:	20000164 	.word	0x20000164
 800018c:	20000160 	.word	0x20000160
 8000190:	20000004 	.word	0x20000004
 8000194:	20000168 	.word	0x20000168
 8000198:	200001b0 	.word	0x200001b0

0800019c <traffic>:

void traffic()
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	if(status_1==AUTO_RED)
 80001a0:	4b7c      	ldr	r3, [pc, #496]	; (8000394 <traffic+0x1f8>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d122      	bne.n	80001ee <traffic+0x52>
	{
		HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ae:	487a      	ldr	r0, [pc, #488]	; (8000398 <traffic+0x1fc>)
 80001b0:	f001 fc85 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
 80001b4:	2201      	movs	r2, #1
 80001b6:	2108      	movs	r1, #8
 80001b8:	4878      	ldr	r0, [pc, #480]	; (800039c <traffic+0x200>)
 80001ba:	f001 fc80 	bl	8001abe <HAL_GPIO_WritePin>
		if(time1==0)
 80001be:	4b78      	ldr	r3, [pc, #480]	; (80003a0 <traffic+0x204>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d160      	bne.n	8000288 <traffic+0xec>
		{
			status_1=AUTO_GREEN;
 80001c6:	4b73      	ldr	r3, [pc, #460]	; (8000394 <traffic+0x1f8>)
 80001c8:	2202      	movs	r2, #2
 80001ca:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d2:	4871      	ldr	r0, [pc, #452]	; (8000398 <traffic+0x1fc>)
 80001d4:	f001 fc73 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	2108      	movs	r1, #8
 80001dc:	486f      	ldr	r0, [pc, #444]	; (800039c <traffic+0x200>)
 80001de:	f001 fc6e 	bl	8001abe <HAL_GPIO_WritePin>
			time1=lightbufferRun[AUTO_GREEN];
 80001e2:	4b70      	ldr	r3, [pc, #448]	; (80003a4 <traffic+0x208>)
 80001e4:	789b      	ldrb	r3, [r3, #2]
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b6d      	ldr	r3, [pc, #436]	; (80003a0 <traffic+0x204>)
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	e04c      	b.n	8000288 <traffic+0xec>
		}
	}
	else if(status_1==AUTO_GREEN)
 80001ee:	4b69      	ldr	r3, [pc, #420]	; (8000394 <traffic+0x1f8>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b02      	cmp	r3, #2
 80001f4:	d122      	bne.n	800023c <traffic+0xa0>
	{
		HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fc:	4866      	ldr	r0, [pc, #408]	; (8000398 <traffic+0x1fc>)
 80001fe:	f001 fc5e 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2108      	movs	r1, #8
 8000206:	4865      	ldr	r0, [pc, #404]	; (800039c <traffic+0x200>)
 8000208:	f001 fc59 	bl	8001abe <HAL_GPIO_WritePin>
		if(time1==0)
 800020c:	4b64      	ldr	r3, [pc, #400]	; (80003a0 <traffic+0x204>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d139      	bne.n	8000288 <traffic+0xec>
		{
			status_1=AUTO_YELLOW;
 8000214:	4b5f      	ldr	r3, [pc, #380]	; (8000394 <traffic+0x1f8>)
 8000216:	2201      	movs	r2, #1
 8000218:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	485d      	ldr	r0, [pc, #372]	; (8000398 <traffic+0x1fc>)
 8000222:	f001 fc4c 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
 8000226:	2201      	movs	r2, #1
 8000228:	2108      	movs	r1, #8
 800022a:	485c      	ldr	r0, [pc, #368]	; (800039c <traffic+0x200>)
 800022c:	f001 fc47 	bl	8001abe <HAL_GPIO_WritePin>
			time1=lightbufferRun[AUTO_YELLOW];
 8000230:	4b5c      	ldr	r3, [pc, #368]	; (80003a4 <traffic+0x208>)
 8000232:	785b      	ldrb	r3, [r3, #1]
 8000234:	461a      	mov	r2, r3
 8000236:	4b5a      	ldr	r3, [pc, #360]	; (80003a0 <traffic+0x204>)
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	e025      	b.n	8000288 <traffic+0xec>
		}
	}
	else if(status_1==AUTO_YELLOW)
 800023c:	4b55      	ldr	r3, [pc, #340]	; (8000394 <traffic+0x1f8>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d121      	bne.n	8000288 <traffic+0xec>
	{
		HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, SET);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800024a:	4853      	ldr	r0, [pc, #332]	; (8000398 <traffic+0x1fc>)
 800024c:	f001 fc37 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
 8000250:	2201      	movs	r2, #1
 8000252:	2108      	movs	r1, #8
 8000254:	4851      	ldr	r0, [pc, #324]	; (800039c <traffic+0x200>)
 8000256:	f001 fc32 	bl	8001abe <HAL_GPIO_WritePin>
		if(time1==0)
 800025a:	4b51      	ldr	r3, [pc, #324]	; (80003a0 <traffic+0x204>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d112      	bne.n	8000288 <traffic+0xec>
		{
			status_1=AUTO_RED;
 8000262:	4b4c      	ldr	r3, [pc, #304]	; (8000394 <traffic+0x1f8>)
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800026e:	484a      	ldr	r0, [pc, #296]	; (8000398 <traffic+0x1fc>)
 8000270:	f001 fc25 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2108      	movs	r1, #8
 8000278:	4848      	ldr	r0, [pc, #288]	; (800039c <traffic+0x200>)
 800027a:	f001 fc20 	bl	8001abe <HAL_GPIO_WritePin>
			time1=lightbufferRun[AUTO_RED];
 800027e:	4b49      	ldr	r3, [pc, #292]	; (80003a4 <traffic+0x208>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	461a      	mov	r2, r3
 8000284:	4b46      	ldr	r3, [pc, #280]	; (80003a0 <traffic+0x204>)
 8000286:	601a      	str	r2, [r3, #0]
		}
	}
	if(status_2==AUTO_RED)
 8000288:	4b47      	ldr	r3, [pc, #284]	; (80003a8 <traffic+0x20c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d120      	bne.n	80002d2 <traffic+0x136>
	{
		HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	4841      	ldr	r0, [pc, #260]	; (800039c <traffic+0x200>)
 8000296:	f001 fc12 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2110      	movs	r1, #16
 800029e:	483f      	ldr	r0, [pc, #252]	; (800039c <traffic+0x200>)
 80002a0:	f001 fc0d 	bl	8001abe <HAL_GPIO_WritePin>
		if(time2==0)
 80002a4:	4b41      	ldr	r3, [pc, #260]	; (80003ac <traffic+0x210>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d15b      	bne.n	8000364 <traffic+0x1c8>
		{
			status_2=AUTO_GREEN;
 80002ac:	4b3e      	ldr	r3, [pc, #248]	; (80003a8 <traffic+0x20c>)
 80002ae:	2202      	movs	r2, #2
 80002b0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2120      	movs	r1, #32
 80002b6:	4839      	ldr	r0, [pc, #228]	; (800039c <traffic+0x200>)
 80002b8:	f001 fc01 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	2110      	movs	r1, #16
 80002c0:	4836      	ldr	r0, [pc, #216]	; (800039c <traffic+0x200>)
 80002c2:	f001 fbfc 	bl	8001abe <HAL_GPIO_WritePin>
			time2=lightbufferRun[AUTO_GREEN];
 80002c6:	4b37      	ldr	r3, [pc, #220]	; (80003a4 <traffic+0x208>)
 80002c8:	789b      	ldrb	r3, [r3, #2]
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b37      	ldr	r3, [pc, #220]	; (80003ac <traffic+0x210>)
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	e048      	b.n	8000364 <traffic+0x1c8>
		}
	}
	else if(status_2==AUTO_GREEN)
 80002d2:	4b35      	ldr	r3, [pc, #212]	; (80003a8 <traffic+0x20c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d120      	bne.n	800031c <traffic+0x180>
	{
		HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
 80002da:	2201      	movs	r2, #1
 80002dc:	2120      	movs	r1, #32
 80002de:	482f      	ldr	r0, [pc, #188]	; (800039c <traffic+0x200>)
 80002e0:	f001 fbed 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2110      	movs	r1, #16
 80002e8:	482c      	ldr	r0, [pc, #176]	; (800039c <traffic+0x200>)
 80002ea:	f001 fbe8 	bl	8001abe <HAL_GPIO_WritePin>
		if(time2==0)
 80002ee:	4b2f      	ldr	r3, [pc, #188]	; (80003ac <traffic+0x210>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d136      	bne.n	8000364 <traffic+0x1c8>
		{
			status_2=AUTO_YELLOW;
 80002f6:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <traffic+0x20c>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2120      	movs	r1, #32
 8000300:	4826      	ldr	r0, [pc, #152]	; (800039c <traffic+0x200>)
 8000302:	f001 fbdc 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
 8000306:	2201      	movs	r2, #1
 8000308:	2110      	movs	r1, #16
 800030a:	4824      	ldr	r0, [pc, #144]	; (800039c <traffic+0x200>)
 800030c:	f001 fbd7 	bl	8001abe <HAL_GPIO_WritePin>
			time2=lightbufferRun[AUTO_YELLOW];
 8000310:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <traffic+0x208>)
 8000312:	785b      	ldrb	r3, [r3, #1]
 8000314:	461a      	mov	r2, r3
 8000316:	4b25      	ldr	r3, [pc, #148]	; (80003ac <traffic+0x210>)
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	e023      	b.n	8000364 <traffic+0x1c8>
		}
	}
	else if(status_2==AUTO_YELLOW)
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <traffic+0x20c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d11f      	bne.n	8000364 <traffic+0x1c8>
	{
		HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, SET);
 8000324:	2201      	movs	r2, #1
 8000326:	2120      	movs	r1, #32
 8000328:	481c      	ldr	r0, [pc, #112]	; (800039c <traffic+0x200>)
 800032a:	f001 fbc8 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2110      	movs	r1, #16
 8000332:	481a      	ldr	r0, [pc, #104]	; (800039c <traffic+0x200>)
 8000334:	f001 fbc3 	bl	8001abe <HAL_GPIO_WritePin>
		if(time2==0)
 8000338:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <traffic+0x210>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d111      	bne.n	8000364 <traffic+0x1c8>
		{
			status_2=AUTO_RED;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <traffic+0x20c>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2120      	movs	r1, #32
 800034a:	4814      	ldr	r0, [pc, #80]	; (800039c <traffic+0x200>)
 800034c:	f001 fbb7 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, SET);
 8000350:	2201      	movs	r2, #1
 8000352:	2110      	movs	r1, #16
 8000354:	4811      	ldr	r0, [pc, #68]	; (800039c <traffic+0x200>)
 8000356:	f001 fbb2 	bl	8001abe <HAL_GPIO_WritePin>
			time2=lightbufferRun[AUTO_RED];
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <traffic+0x208>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	461a      	mov	r2, r3
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <traffic+0x210>)
 8000362:	601a      	str	r2, [r3, #0]
		}
	}
	if(mode==1 && run_flag==1)
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <traffic+0x214>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d111      	bne.n	8000390 <traffic+0x1f4>
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <traffic+0x218>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d10d      	bne.n	8000390 <traffic+0x1f4>
	{
		time1--;
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <traffic+0x204>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	3b01      	subs	r3, #1
 800037a:	4a09      	ldr	r2, [pc, #36]	; (80003a0 <traffic+0x204>)
 800037c:	6013      	str	r3, [r2, #0]
		time2--;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <traffic+0x210>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	3b01      	subs	r3, #1
 8000384:	4a09      	ldr	r2, [pc, #36]	; (80003ac <traffic+0x210>)
 8000386:	6013      	str	r3, [r2, #0]
		setTimerRun(1000);
 8000388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038c:	f000 fefa 	bl	8001184 <setTimerRun>
	}
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000114 	.word	0x20000114
 8000398:	40010800 	.word	0x40010800
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	20000168 	.word	0x20000168
 80003a4:	20000004 	.word	0x20000004
 80003a8:	20000164 	.word	0x20000164
 80003ac:	200001b0 	.word	0x200001b0
 80003b0:	20000160 	.word	0x20000160
 80003b4:	200000f4 	.word	0x200000f4

080003b8 <updateMode>:
void updateMode()
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	mode++;
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <updateMode+0x24>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	4a06      	ldr	r2, [pc, #24]	; (80003dc <updateMode+0x24>)
 80003c4:	6013      	str	r3, [r2, #0]
	if(mode>4)
 80003c6:	4b05      	ldr	r3, [pc, #20]	; (80003dc <updateMode+0x24>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b04      	cmp	r3, #4
 80003cc:	dd02      	ble.n	80003d4 <updateMode+0x1c>
	{
		mode=1;
 80003ce:	4b03      	ldr	r3, [pc, #12]	; (80003dc <updateMode+0x24>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	601a      	str	r2, [r3, #0]
	}
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	20000160 	.word	0x20000160

080003e0 <increase>:
void increase(int index)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	lightbufferMod[index]++;
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <increase+0x40>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	b2d9      	uxtb	r1, r3
 80003f4:	4a0a      	ldr	r2, [pc, #40]	; (8000420 <increase+0x40>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4413      	add	r3, r2
 80003fa:	460a      	mov	r2, r1
 80003fc:	701a      	strb	r2, [r3, #0]
	if(lightbufferMod[index]>99)
 80003fe:	4a08      	ldr	r2, [pc, #32]	; (8000420 <increase+0x40>)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4413      	add	r3, r2
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b63      	cmp	r3, #99	; 0x63
 8000408:	d904      	bls.n	8000414 <increase+0x34>
	{
		lightbufferMod[index]=1;
 800040a:	4a05      	ldr	r2, [pc, #20]	; (8000420 <increase+0x40>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4413      	add	r3, r2
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
	}
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	20000000 	.word	0x20000000

08000424 <copyModtoRun>:
void copyModtoRun()
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
	for(int i=0;i<2;i++)
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	e00b      	b.n	8000448 <copyModtoRun+0x24>
	{
		lightbufferRun[i]=lightbufferMod[i];
 8000430:	4a0a      	ldr	r2, [pc, #40]	; (800045c <copyModtoRun+0x38>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4413      	add	r3, r2
 8000436:	7819      	ldrb	r1, [r3, #0]
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <copyModtoRun+0x3c>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	460a      	mov	r2, r1
 8000440:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<2;i++)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3301      	adds	r3, #1
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2b01      	cmp	r3, #1
 800044c:	ddf0      	ble.n	8000430 <copyModtoRun+0xc>
	}
}
 800044e:	bf00      	nop
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	20000000 	.word	0x20000000
 8000460:	20000004 	.word	0x20000004

08000464 <blinkLed>:
void blinkLed(uint8_t led)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	if((mode!=1) && (blink_flag==1))
 800046e:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <blinkLed+0x84>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d034      	beq.n	80004e0 <blinkLed+0x7c>
 8000476:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <blinkLed+0x88>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b01      	cmp	r3, #1
 800047c:	d130      	bne.n	80004e0 <blinkLed+0x7c>
	{
		if(led==RED)
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d108      	bne.n	8000496 <blinkLed+0x32>
		{
			HAL_GPIO_TogglePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin);
 8000484:	2108      	movs	r1, #8
 8000486:	481a      	ldr	r0, [pc, #104]	; (80004f0 <blinkLed+0x8c>)
 8000488:	f001 fb31 	bl	8001aee <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin);
 800048c:	2110      	movs	r1, #16
 800048e:	4818      	ldr	r0, [pc, #96]	; (80004f0 <blinkLed+0x8c>)
 8000490:	f001 fb2d 	bl	8001aee <HAL_GPIO_TogglePin>
 8000494:	e020      	b.n	80004d8 <blinkLed+0x74>
		}
		else if(led==YELLOW)
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d111      	bne.n	80004c0 <blinkLed+0x5c>
		{
			HAL_GPIO_TogglePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin);
 800049c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a0:	4814      	ldr	r0, [pc, #80]	; (80004f4 <blinkLed+0x90>)
 80004a2:	f001 fb24 	bl	8001aee <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin);
 80004a6:	2120      	movs	r1, #32
 80004a8:	4811      	ldr	r0, [pc, #68]	; (80004f0 <blinkLed+0x8c>)
 80004aa:	f001 fb20 	bl	8001aee <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin);
 80004ae:	2108      	movs	r1, #8
 80004b0:	480f      	ldr	r0, [pc, #60]	; (80004f0 <blinkLed+0x8c>)
 80004b2:	f001 fb1c 	bl	8001aee <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin);
 80004b6:	2110      	movs	r1, #16
 80004b8:	480d      	ldr	r0, [pc, #52]	; (80004f0 <blinkLed+0x8c>)
 80004ba:	f001 fb18 	bl	8001aee <HAL_GPIO_TogglePin>
 80004be:	e00b      	b.n	80004d8 <blinkLed+0x74>
		}
		else if(led==GREEN)
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d108      	bne.n	80004d8 <blinkLed+0x74>
		{
			HAL_GPIO_TogglePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin);
 80004c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ca:	480a      	ldr	r0, [pc, #40]	; (80004f4 <blinkLed+0x90>)
 80004cc:	f001 fb0f 	bl	8001aee <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin);
 80004d0:	2120      	movs	r1, #32
 80004d2:	4807      	ldr	r0, [pc, #28]	; (80004f0 <blinkLed+0x8c>)
 80004d4:	f001 fb0b 	bl	8001aee <HAL_GPIO_TogglePin>
		}
		setTimerBlink(500);
 80004d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004dc:	f000 fe8a 	bl	80011f4 <setTimerBlink>
	}
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000160 	.word	0x20000160
 80004ec:	20000104 	.word	0x20000104
 80004f0:	40010c00 	.word	0x40010c00
 80004f4:	40010800 	.word	0x40010800

080004f8 <fsm_automatic>:

uint8_t str[30]="\0";
int init_for_pes=0;
int time_for_pes=0;
void fsm_automatic()
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	if(is_button_pressed(button1))
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fab7 	bl	8000a70 <is_button_pressed>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d004      	beq.n	8000512 <fsm_automatic+0x1a>
	{
		updateMode();
 8000508:	f7ff ff56 	bl	80003b8 <updateMode>
		initial_flag=1;
 800050c:	4b93      	ldr	r3, [pc, #588]	; (800075c <fsm_automatic+0x264>)
 800050e:	2201      	movs	r2, #1
 8000510:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(pes_but))
 8000512:	2003      	movs	r0, #3
 8000514:	f000 faac 	bl	8000a70 <is_button_pressed>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d053      	beq.n	80005c6 <fsm_automatic+0xce>
	{
		if(time_for_pes==0)
 800051e:	4b90      	ldr	r3, [pc, #576]	; (8000760 <fsm_automatic+0x268>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d106      	bne.n	8000534 <fsm_automatic+0x3c>
		{
			init_for_pes=0;
 8000526:	4b8f      	ldr	r3, [pc, #572]	; (8000764 <fsm_automatic+0x26c>)
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
			time_for_pes=time1;
 800052c:	4b8e      	ldr	r3, [pc, #568]	; (8000768 <fsm_automatic+0x270>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a8b      	ldr	r2, [pc, #556]	; (8000760 <fsm_automatic+0x268>)
 8000532:	6013      	str	r3, [r2, #0]
		}
		setTimerPesBut(2000);
 8000534:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000538:	f000 fe40 	bl	80011bc <setTimerPesBut>
		if(status_1==AUTO_RED || status_1==MAN_RED)
 800053c:	4b8b      	ldr	r3, [pc, #556]	; (800076c <fsm_automatic+0x274>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d003      	beq.n	800054c <fsm_automatic+0x54>
 8000544:	4b89      	ldr	r3, [pc, #548]	; (800076c <fsm_automatic+0x274>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b0b      	cmp	r3, #11
 800054a:	d10c      	bne.n	8000566 <fsm_automatic+0x6e>
		{
			HAL_GPIO_WritePin(PES_RED_GPIO_Port, PES_RED_Pin, SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000552:	4887      	ldr	r0, [pc, #540]	; (8000770 <fsm_automatic+0x278>)
 8000554:	f001 fab3 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PES_GREEN_GPIO_Port, PES_GREEN_Pin, RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	4885      	ldr	r0, [pc, #532]	; (8000774 <fsm_automatic+0x27c>)
 8000560:	f001 faad 	bl	8001abe <HAL_GPIO_WritePin>
 8000564:	e020      	b.n	80005a8 <fsm_automatic+0xb0>
		}
		else if(status_1==AUTO_GREEN || status_1==MAN_GREEN)
 8000566:	4b81      	ldr	r3, [pc, #516]	; (800076c <fsm_automatic+0x274>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b02      	cmp	r3, #2
 800056c:	d003      	beq.n	8000576 <fsm_automatic+0x7e>
 800056e:	4b7f      	ldr	r3, [pc, #508]	; (800076c <fsm_automatic+0x274>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b0d      	cmp	r3, #13
 8000574:	d10c      	bne.n	8000590 <fsm_automatic+0x98>
		{
			HAL_GPIO_WritePin(PES_RED_GPIO_Port, PES_RED_Pin, RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057c:	487c      	ldr	r0, [pc, #496]	; (8000770 <fsm_automatic+0x278>)
 800057e:	f001 fa9e 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PES_GREEN_GPIO_Port, PES_GREEN_Pin, SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	487a      	ldr	r0, [pc, #488]	; (8000774 <fsm_automatic+0x27c>)
 800058a:	f001 fa98 	bl	8001abe <HAL_GPIO_WritePin>
 800058e:	e00b      	b.n	80005a8 <fsm_automatic+0xb0>
		}
		else
		{
			HAL_GPIO_WritePin(PES_RED_GPIO_Port, PES_RED_Pin, SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000596:	4876      	ldr	r0, [pc, #472]	; (8000770 <fsm_automatic+0x278>)
 8000598:	f001 fa91 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PES_GREEN_GPIO_Port, PES_GREEN_Pin, SET);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a2:	4874      	ldr	r0, [pc, #464]	; (8000774 <fsm_automatic+0x27c>)
 80005a4:	f001 fa8b 	bl	8001abe <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,init_for_pes);
 80005a8:	4b6e      	ldr	r3, [pc, #440]	; (8000764 <fsm_automatic+0x26c>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b72      	ldr	r3, [pc, #456]	; (8000778 <fsm_automatic+0x280>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
		init_for_pes+=50;
 80005b2:	4b6c      	ldr	r3, [pc, #432]	; (8000764 <fsm_automatic+0x26c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3332      	adds	r3, #50	; 0x32
 80005b8:	4a6a      	ldr	r2, [pc, #424]	; (8000764 <fsm_automatic+0x26c>)
 80005ba:	6013      	str	r3, [r2, #0]
		time_for_pes--;
 80005bc:	4b68      	ldr	r3, [pc, #416]	; (8000760 <fsm_automatic+0x268>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	4a67      	ldr	r2, [pc, #412]	; (8000760 <fsm_automatic+0x268>)
 80005c4:	6013      	str	r3, [r2, #0]
	}
	if(pes_flag==1)
 80005c6:	4b6d      	ldr	r3, [pc, #436]	; (800077c <fsm_automatic+0x284>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d111      	bne.n	80005f2 <fsm_automatic+0xfa>
	{
		HAL_GPIO_WritePin(PES_RED_GPIO_Port, PES_RED_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d4:	4866      	ldr	r0, [pc, #408]	; (8000770 <fsm_automatic+0x278>)
 80005d6:	f001 fa72 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PES_GREEN_GPIO_Port, PES_GREEN_Pin, RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	4864      	ldr	r0, [pc, #400]	; (8000774 <fsm_automatic+0x27c>)
 80005e2:	f001 fa6c 	bl	8001abe <HAL_GPIO_WritePin>
		init_for_pes=0;
 80005e6:	4b5f      	ldr	r3, [pc, #380]	; (8000764 <fsm_automatic+0x26c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
		time_for_pes=0;
 80005ec:	4b5c      	ldr	r3, [pc, #368]	; (8000760 <fsm_automatic+0x268>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
	}
	switch(mode)
 80005f2:	4b63      	ldr	r3, [pc, #396]	; (8000780 <fsm_automatic+0x288>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	f200 81b3 	bhi.w	8000964 <fsm_automatic+0x46c>
 80005fe:	a201      	add	r2, pc, #4	; (adr r2, 8000604 <fsm_automatic+0x10c>)
 8000600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000604:	08000615 	.word	0x08000615
 8000608:	08000685 	.word	0x08000685
 800060c:	080007b5 	.word	0x080007b5
 8000610:	0800088d 	.word	0x0800088d
	{
	case 1:
		if(initial_flag==1)
 8000614:	4b51      	ldr	r3, [pc, #324]	; (800075c <fsm_automatic+0x264>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d116      	bne.n	800064a <fsm_automatic+0x152>
		{
			initial_flag=0;
 800061c:	4b4f      	ldr	r3, [pc, #316]	; (800075c <fsm_automatic+0x264>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
			status_1=AUTO_RED;
 8000622:	4b52      	ldr	r3, [pc, #328]	; (800076c <fsm_automatic+0x274>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
			status_2=AUTO_GREEN;
 8000628:	4b56      	ldr	r3, [pc, #344]	; (8000784 <fsm_automatic+0x28c>)
 800062a:	2202      	movs	r2, #2
 800062c:	601a      	str	r2, [r3, #0]
			time1=lightbufferRun[AUTO_RED];
 800062e:	4b56      	ldr	r3, [pc, #344]	; (8000788 <fsm_automatic+0x290>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <fsm_automatic+0x270>)
 8000636:	601a      	str	r2, [r3, #0]
			time2=lightbufferRun[AUTO_GREEN];
 8000638:	4b53      	ldr	r3, [pc, #332]	; (8000788 <fsm_automatic+0x290>)
 800063a:	789b      	ldrb	r3, [r3, #2]
 800063c:	461a      	mov	r2, r3
 800063e:	4b53      	ldr	r3, [pc, #332]	; (800078c <fsm_automatic+0x294>)
 8000640:	601a      	str	r2, [r3, #0]
			setTimerRun(1000);
 8000642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000646:	f000 fd9d 	bl	8001184 <setTimerRun>
		}
		traffic();
 800064a:	f7ff fda7 	bl	800019c <traffic>
		//send signal
		sprintf(str,"!7SEG_1: %d#\r\n",time1);
 800064e:	4b46      	ldr	r3, [pc, #280]	; (8000768 <fsm_automatic+0x270>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	494e      	ldr	r1, [pc, #312]	; (8000790 <fsm_automatic+0x298>)
 8000656:	484f      	ldr	r0, [pc, #316]	; (8000794 <fsm_automatic+0x29c>)
 8000658:	f003 fb44 	bl	8003ce4 <siprintf>
		HAL_UART_Transmit(&huart2,str,sizeof(str),10);
 800065c:	230a      	movs	r3, #10
 800065e:	221e      	movs	r2, #30
 8000660:	494c      	ldr	r1, [pc, #304]	; (8000794 <fsm_automatic+0x29c>)
 8000662:	484d      	ldr	r0, [pc, #308]	; (8000798 <fsm_automatic+0x2a0>)
 8000664:	f002 fe21 	bl	80032aa <HAL_UART_Transmit>
		sprintf(str,"!7SEG_2: %d#\r\n",time2);
 8000668:	4b48      	ldr	r3, [pc, #288]	; (800078c <fsm_automatic+0x294>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	494b      	ldr	r1, [pc, #300]	; (800079c <fsm_automatic+0x2a4>)
 8000670:	4848      	ldr	r0, [pc, #288]	; (8000794 <fsm_automatic+0x29c>)
 8000672:	f003 fb37 	bl	8003ce4 <siprintf>
		HAL_UART_Transmit(&huart2,str,sizeof(str),10);
 8000676:	230a      	movs	r3, #10
 8000678:	221e      	movs	r2, #30
 800067a:	4946      	ldr	r1, [pc, #280]	; (8000794 <fsm_automatic+0x29c>)
 800067c:	4846      	ldr	r0, [pc, #280]	; (8000798 <fsm_automatic+0x2a0>)
 800067e:	f002 fe14 	bl	80032aa <HAL_UART_Transmit>
		break;
 8000682:	e170      	b.n	8000966 <fsm_automatic+0x46e>
	case 2:
		if(initial_flag==1)
 8000684:	4b35      	ldr	r3, [pc, #212]	; (800075c <fsm_automatic+0x264>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d11e      	bne.n	80006ca <fsm_automatic+0x1d2>
		{
			initial_flag=0;
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <fsm_automatic+0x264>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 8000692:	f241 3088 	movw	r0, #5000	; 0x1388
 8000696:	f000 fd59 	bl	800114c <setTimerReset>
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a0:	4834      	ldr	r0, [pc, #208]	; (8000774 <fsm_automatic+0x27c>)
 80006a2:	f001 fa0c 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2120      	movs	r1, #32
 80006aa:	4831      	ldr	r0, [pc, #196]	; (8000770 <fsm_automatic+0x278>)
 80006ac:	f001 fa07 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2108      	movs	r1, #8
 80006b4:	482e      	ldr	r0, [pc, #184]	; (8000770 <fsm_automatic+0x278>)
 80006b6:	f001 fa02 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2110      	movs	r1, #16
 80006be:	482c      	ldr	r0, [pc, #176]	; (8000770 <fsm_automatic+0x278>)
 80006c0:	f001 f9fd 	bl	8001abe <HAL_GPIO_WritePin>
			blink_flag=1;
 80006c4:	4b36      	ldr	r3, [pc, #216]	; (80007a0 <fsm_automatic+0x2a8>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
		}
		blinkLed(RED);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff feca 	bl	8000464 <blinkLed>
		if(is_button_pressed(button2))
 80006d0:	2001      	movs	r0, #1
 80006d2:	f000 f9cd 	bl	8000a70 <is_button_pressed>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d00c      	beq.n	80006f6 <fsm_automatic+0x1fe>
		{
			status_1=MAN_RED;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <fsm_automatic+0x274>)
 80006de:	220b      	movs	r2, #11
 80006e0:	601a      	str	r2, [r3, #0]
			status_2=MAN_RED;
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <fsm_automatic+0x28c>)
 80006e4:	220b      	movs	r2, #11
 80006e6:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 80006e8:	f241 3088 	movw	r0, #5000	; 0x1388
 80006ec:	f000 fd2e 	bl	800114c <setTimerReset>
			increase(RED);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff fe75 	bl	80003e0 <increase>
		}
		if(is_button_pressed(button3))
 80006f6:	2002      	movs	r0, #2
 80006f8:	f000 f9ba 	bl	8000a70 <is_button_pressed>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d007      	beq.n	8000712 <fsm_automatic+0x21a>
		{
			copyModtoRun();
 8000702:	f7ff fe8f 	bl	8000424 <copyModtoRun>
			mode=1;
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <fsm_automatic+0x288>)
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <fsm_automatic+0x264>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]
		}
		if(reset_flag==1)
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <fsm_automatic+0x2ac>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d105      	bne.n	8000726 <fsm_automatic+0x22e>
		{
			mode=1;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <fsm_automatic+0x288>)
 800071c:	2201      	movs	r2, #1
 800071e:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <fsm_automatic+0x264>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
		}
		sprintf(str,"Mode is: %d\r\n",mode);
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <fsm_automatic+0x288>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	491e      	ldr	r1, [pc, #120]	; (80007a8 <fsm_automatic+0x2b0>)
 800072e:	4819      	ldr	r0, [pc, #100]	; (8000794 <fsm_automatic+0x29c>)
 8000730:	f003 fad8 	bl	8003ce4 <siprintf>
		HAL_UART_Transmit(&huart2,str,sizeof(str),10);
 8000734:	230a      	movs	r3, #10
 8000736:	221e      	movs	r2, #30
 8000738:	4916      	ldr	r1, [pc, #88]	; (8000794 <fsm_automatic+0x29c>)
 800073a:	4817      	ldr	r0, [pc, #92]	; (8000798 <fsm_automatic+0x2a0>)
 800073c:	f002 fdb5 	bl	80032aa <HAL_UART_Transmit>
		sprintf(str,"!Fix_Red: %d#\r\n",lightbufferMod[RED]);
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <fsm_automatic+0x2b4>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	491a      	ldr	r1, [pc, #104]	; (80007b0 <fsm_automatic+0x2b8>)
 8000748:	4812      	ldr	r0, [pc, #72]	; (8000794 <fsm_automatic+0x29c>)
 800074a:	f003 facb 	bl	8003ce4 <siprintf>
		HAL_UART_Transmit(&huart2,str,sizeof(str),10);
 800074e:	230a      	movs	r3, #10
 8000750:	221e      	movs	r2, #30
 8000752:	4910      	ldr	r1, [pc, #64]	; (8000794 <fsm_automatic+0x29c>)
 8000754:	4810      	ldr	r0, [pc, #64]	; (8000798 <fsm_automatic+0x2a0>)
 8000756:	f002 fda8 	bl	80032aa <HAL_UART_Transmit>
		//send signal
		break;
 800075a:	e104      	b.n	8000966 <fsm_automatic+0x46e>
 800075c:	20000008 	.word	0x20000008
 8000760:	200000d8 	.word	0x200000d8
 8000764:	200000d4 	.word	0x200000d4
 8000768:	20000168 	.word	0x20000168
 800076c:	20000114 	.word	0x20000114
 8000770:	40010c00 	.word	0x40010c00
 8000774:	40010800 	.word	0x40010800
 8000778:	20000118 	.word	0x20000118
 800077c:	200000fc 	.word	0x200000fc
 8000780:	20000160 	.word	0x20000160
 8000784:	20000164 	.word	0x20000164
 8000788:	20000004 	.word	0x20000004
 800078c:	200001b0 	.word	0x200001b0
 8000790:	08004570 	.word	0x08004570
 8000794:	200000b4 	.word	0x200000b4
 8000798:	2000016c 	.word	0x2000016c
 800079c:	08004580 	.word	0x08004580
 80007a0:	20000104 	.word	0x20000104
 80007a4:	200000ec 	.word	0x200000ec
 80007a8:	08004590 	.word	0x08004590
 80007ac:	20000000 	.word	0x20000000
 80007b0:	080045a0 	.word	0x080045a0
	case 3:
		if(initial_flag==1)
 80007b4:	4b6d      	ldr	r3, [pc, #436]	; (800096c <fsm_automatic+0x474>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d11e      	bne.n	80007fa <fsm_automatic+0x302>
		{
			initial_flag=0;
 80007bc:	4b6b      	ldr	r3, [pc, #428]	; (800096c <fsm_automatic+0x474>)
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 80007c2:	f241 3088 	movw	r0, #5000	; 0x1388
 80007c6:	f000 fcc1 	bl	800114c <setTimerReset>
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d0:	4867      	ldr	r0, [pc, #412]	; (8000970 <fsm_automatic+0x478>)
 80007d2:	f001 f974 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2120      	movs	r1, #32
 80007da:	4866      	ldr	r0, [pc, #408]	; (8000974 <fsm_automatic+0x47c>)
 80007dc:	f001 f96f 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2108      	movs	r1, #8
 80007e4:	4863      	ldr	r0, [pc, #396]	; (8000974 <fsm_automatic+0x47c>)
 80007e6:	f001 f96a 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2110      	movs	r1, #16
 80007ee:	4861      	ldr	r0, [pc, #388]	; (8000974 <fsm_automatic+0x47c>)
 80007f0:	f001 f965 	bl	8001abe <HAL_GPIO_WritePin>
			blink_flag=1;
 80007f4:	4b60      	ldr	r3, [pc, #384]	; (8000978 <fsm_automatic+0x480>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	601a      	str	r2, [r3, #0]
		}
		blinkLed(YELLOW);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff fe32 	bl	8000464 <blinkLed>
		if(is_button_pressed(button2))
 8000800:	2001      	movs	r0, #1
 8000802:	f000 f935 	bl	8000a70 <is_button_pressed>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00c      	beq.n	8000826 <fsm_automatic+0x32e>
		{
			status_1=MAN_YELLOW;
 800080c:	4b5b      	ldr	r3, [pc, #364]	; (800097c <fsm_automatic+0x484>)
 800080e:	220c      	movs	r2, #12
 8000810:	601a      	str	r2, [r3, #0]
			status_2=MAN_YELLOW;
 8000812:	4b5b      	ldr	r3, [pc, #364]	; (8000980 <fsm_automatic+0x488>)
 8000814:	220c      	movs	r2, #12
 8000816:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 8000818:	f241 3088 	movw	r0, #5000	; 0x1388
 800081c:	f000 fc96 	bl	800114c <setTimerReset>
			increase(YELLOW);
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff fddd 	bl	80003e0 <increase>
		}
		if(is_button_pressed(button3))
 8000826:	2002      	movs	r0, #2
 8000828:	f000 f922 	bl	8000a70 <is_button_pressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d007      	beq.n	8000842 <fsm_automatic+0x34a>
		{
			copyModtoRun();
 8000832:	f7ff fdf7 	bl	8000424 <copyModtoRun>
			mode=1;
 8000836:	4b53      	ldr	r3, [pc, #332]	; (8000984 <fsm_automatic+0x48c>)
 8000838:	2201      	movs	r2, #1
 800083a:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 800083c:	4b4b      	ldr	r3, [pc, #300]	; (800096c <fsm_automatic+0x474>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
		}
		if(reset_flag==1)
 8000842:	4b51      	ldr	r3, [pc, #324]	; (8000988 <fsm_automatic+0x490>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d105      	bne.n	8000856 <fsm_automatic+0x35e>
		{
			mode=1;
 800084a:	4b4e      	ldr	r3, [pc, #312]	; (8000984 <fsm_automatic+0x48c>)
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 8000850:	4b46      	ldr	r3, [pc, #280]	; (800096c <fsm_automatic+0x474>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
		}
		//send signal
		sprintf(str,"Mode is: %d\r\n",mode);
 8000856:	4b4b      	ldr	r3, [pc, #300]	; (8000984 <fsm_automatic+0x48c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	494b      	ldr	r1, [pc, #300]	; (800098c <fsm_automatic+0x494>)
 800085e:	484c      	ldr	r0, [pc, #304]	; (8000990 <fsm_automatic+0x498>)
 8000860:	f003 fa40 	bl	8003ce4 <siprintf>
		HAL_UART_Transmit(&huart2,str,sizeof(str),10);
 8000864:	230a      	movs	r3, #10
 8000866:	221e      	movs	r2, #30
 8000868:	4949      	ldr	r1, [pc, #292]	; (8000990 <fsm_automatic+0x498>)
 800086a:	484a      	ldr	r0, [pc, #296]	; (8000994 <fsm_automatic+0x49c>)
 800086c:	f002 fd1d 	bl	80032aa <HAL_UART_Transmit>
		sprintf(str,"!Fix_Red: %d#\r\n",lightbufferMod[YELLOW]);
 8000870:	4b49      	ldr	r3, [pc, #292]	; (8000998 <fsm_automatic+0x4a0>)
 8000872:	785b      	ldrb	r3, [r3, #1]
 8000874:	461a      	mov	r2, r3
 8000876:	4949      	ldr	r1, [pc, #292]	; (800099c <fsm_automatic+0x4a4>)
 8000878:	4845      	ldr	r0, [pc, #276]	; (8000990 <fsm_automatic+0x498>)
 800087a:	f003 fa33 	bl	8003ce4 <siprintf>
		HAL_UART_Transmit(&huart2,str,sizeof(str),10);
 800087e:	230a      	movs	r3, #10
 8000880:	221e      	movs	r2, #30
 8000882:	4943      	ldr	r1, [pc, #268]	; (8000990 <fsm_automatic+0x498>)
 8000884:	4843      	ldr	r0, [pc, #268]	; (8000994 <fsm_automatic+0x49c>)
 8000886:	f002 fd10 	bl	80032aa <HAL_UART_Transmit>
		break;
 800088a:	e06c      	b.n	8000966 <fsm_automatic+0x46e>
	case 4:
		if(initial_flag==1)
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <fsm_automatic+0x474>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d11e      	bne.n	80008d2 <fsm_automatic+0x3da>
		{
			initial_flag=0;
 8000894:	4b35      	ldr	r3, [pc, #212]	; (800096c <fsm_automatic+0x474>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 800089a:	f241 3088 	movw	r0, #5000	; 0x1388
 800089e:	f000 fc55 	bl	800114c <setTimerReset>
			HAL_GPIO_WritePin(Traffic_1_RED_GPIO_Port, Traffic_1_RED_Pin, RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a8:	4831      	ldr	r0, [pc, #196]	; (8000970 <fsm_automatic+0x478>)
 80008aa:	f001 f908 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_RED_GPIO_Port, Traffic_2_RED_Pin, RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	4830      	ldr	r0, [pc, #192]	; (8000974 <fsm_automatic+0x47c>)
 80008b4:	f001 f903 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_1_GREEN_GPIO_Port, Traffic_1_GREEN_Pin, RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2108      	movs	r1, #8
 80008bc:	482d      	ldr	r0, [pc, #180]	; (8000974 <fsm_automatic+0x47c>)
 80008be:	f001 f8fe 	bl	8001abe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_2_GREEN_GPIO_Port, Traffic_2_GREEN_Pin, RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2110      	movs	r1, #16
 80008c6:	482b      	ldr	r0, [pc, #172]	; (8000974 <fsm_automatic+0x47c>)
 80008c8:	f001 f8f9 	bl	8001abe <HAL_GPIO_WritePin>
			blink_flag=1;
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <fsm_automatic+0x480>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
		}
		blinkLed(GREEN);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f7ff fdc6 	bl	8000464 <blinkLed>
		if(is_button_pressed(button2))
 80008d8:	2001      	movs	r0, #1
 80008da:	f000 f8c9 	bl	8000a70 <is_button_pressed>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00c      	beq.n	80008fe <fsm_automatic+0x406>
		{
			status_1=MAN_GREEN;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <fsm_automatic+0x484>)
 80008e6:	220d      	movs	r2, #13
 80008e8:	601a      	str	r2, [r3, #0]
			status_2=MAN_GREEN;
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <fsm_automatic+0x488>)
 80008ec:	220d      	movs	r2, #13
 80008ee:	601a      	str	r2, [r3, #0]
			setTimerReset(5000);
 80008f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80008f4:	f000 fc2a 	bl	800114c <setTimerReset>
			increase(GREEN);
 80008f8:	2002      	movs	r0, #2
 80008fa:	f7ff fd71 	bl	80003e0 <increase>
		}
		if(is_button_pressed(button3))
 80008fe:	2002      	movs	r0, #2
 8000900:	f000 f8b6 	bl	8000a70 <is_button_pressed>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d007      	beq.n	800091a <fsm_automatic+0x422>
		{
			copyModtoRun();
 800090a:	f7ff fd8b 	bl	8000424 <copyModtoRun>
			mode=1;
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <fsm_automatic+0x48c>)
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <fsm_automatic+0x474>)
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
		}
		if(reset_flag==1)
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <fsm_automatic+0x490>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d105      	bne.n	800092e <fsm_automatic+0x436>
		{
			mode=1;
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <fsm_automatic+0x48c>)
 8000924:	2201      	movs	r2, #1
 8000926:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <fsm_automatic+0x474>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]
		}
		//send signal
		sprintf(str,"Mode is: %d\r\n",mode);
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <fsm_automatic+0x48c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	4915      	ldr	r1, [pc, #84]	; (800098c <fsm_automatic+0x494>)
 8000936:	4816      	ldr	r0, [pc, #88]	; (8000990 <fsm_automatic+0x498>)
 8000938:	f003 f9d4 	bl	8003ce4 <siprintf>
		HAL_UART_Transmit(&huart2,str,sizeof(str),10);
 800093c:	230a      	movs	r3, #10
 800093e:	221e      	movs	r2, #30
 8000940:	4913      	ldr	r1, [pc, #76]	; (8000990 <fsm_automatic+0x498>)
 8000942:	4814      	ldr	r0, [pc, #80]	; (8000994 <fsm_automatic+0x49c>)
 8000944:	f002 fcb1 	bl	80032aa <HAL_UART_Transmit>
		sprintf(str,"!Fix_Red: %d#\r\n",lightbufferMod[GREEN]);
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <fsm_automatic+0x4a0>)
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	461a      	mov	r2, r3
 800094e:	4913      	ldr	r1, [pc, #76]	; (800099c <fsm_automatic+0x4a4>)
 8000950:	480f      	ldr	r0, [pc, #60]	; (8000990 <fsm_automatic+0x498>)
 8000952:	f003 f9c7 	bl	8003ce4 <siprintf>
		HAL_UART_Transmit(&huart2,str,sizeof(str),10);
 8000956:	230a      	movs	r3, #10
 8000958:	221e      	movs	r2, #30
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <fsm_automatic+0x498>)
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <fsm_automatic+0x49c>)
 800095e:	f002 fca4 	bl	80032aa <HAL_UART_Transmit>
		break;
 8000962:	e000      	b.n	8000966 <fsm_automatic+0x46e>
	default:
		break;
 8000964:	bf00      	nop
	}

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00
 8000978:	20000104 	.word	0x20000104
 800097c:	20000114 	.word	0x20000114
 8000980:	20000164 	.word	0x20000164
 8000984:	20000160 	.word	0x20000160
 8000988:	200000ec 	.word	0x200000ec
 800098c:	08004590 	.word	0x08004590
 8000990:	200000b4 	.word	0x200000b4
 8000994:	2000016c 	.word	0x2000016c
 8000998:	20000000 	.word	0x20000000
 800099c:	080045a0 	.word	0x080045a0

080009a0 <button_reading>:

static uint16_t buttonPin[NO_OF_BUTTONS]={BUT_1_Pin,BUT_2_Pin,BUT_3_Pin,PES_BUT_Pin};
static GPIO_TypeDef* buttonPort[NO_OF_BUTTONS]={BUT_1_GPIO_Port,BUT_2_GPIO_Port,BUT_3_GPIO_Port,PES_BUT_GPIO_Port};
uint8_t duration_for_buttons;
void button_reading()
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<NO_OF_BUTTONS;i++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	71fb      	strb	r3, [r7, #7]
 80009aa:	e04a      	b.n	8000a42 <button_reading+0xa2>
	{
		debounceButtonBuffer2[i]=debounceButtonBuffer1[i];
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4928      	ldr	r1, [pc, #160]	; (8000a54 <button_reading+0xb4>)
 80009b2:	5c89      	ldrb	r1, [r1, r2]
 80009b4:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <button_reading+0xb8>)
 80009b6:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i]=HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4a28      	ldr	r2, [pc, #160]	; (8000a5c <button_reading+0xbc>)
 80009bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	4927      	ldr	r1, [pc, #156]	; (8000a60 <button_reading+0xc0>)
 80009c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009c8:	79fc      	ldrb	r4, [r7, #7]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4610      	mov	r0, r2
 80009ce:	f001 f85f 	bl	8001a90 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <button_reading+0xb4>)
 80009d8:	551a      	strb	r2, [r3, r4]
		if(debounceButtonBuffer1[i]==debounceButtonBuffer2[i])
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <button_reading+0xb4>)
 80009de:	5cd2      	ldrb	r2, [r2, r3]
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	491d      	ldr	r1, [pc, #116]	; (8000a58 <button_reading+0xb8>)
 80009e4:	5ccb      	ldrb	r3, [r1, r3]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d128      	bne.n	8000a3c <button_reading+0x9c>
		{
			if(debounceButtonBuffer3[i]!=debounceButtonBuffer1[i])
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <button_reading+0xc4>)
 80009ee:	5cd2      	ldrb	r2, [r2, r3]
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	4918      	ldr	r1, [pc, #96]	; (8000a54 <button_reading+0xb4>)
 80009f4:	5ccb      	ldrb	r3, [r1, r3]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d012      	beq.n	8000a20 <button_reading+0x80>
			{
				debounceButtonBuffer3[i]=debounceButtonBuffer1[i];
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	4915      	ldr	r1, [pc, #84]	; (8000a54 <button_reading+0xb4>)
 8000a00:	5c89      	ldrb	r1, [r1, r2]
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <button_reading+0xc4>)
 8000a04:	54d1      	strb	r1, [r2, r3]
				if(debounceButtonBuffer1[i]==BUTTON_IS_PRESSED)
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <button_reading+0xb4>)
 8000a0a:	5cd3      	ldrb	r3, [r2, r3]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d115      	bne.n	8000a3c <button_reading+0x9c>
				{
					buttonBuffer[i]=BUTTON_IS_PRESSED;
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <button_reading+0xc8>)
 8000a14:	2100      	movs	r1, #0
 8000a16:	54d1      	strb	r1, [r2, r3]
					duration_for_buttons=150;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <button_reading+0xcc>)
 8000a1a:	2296      	movs	r2, #150	; 0x96
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	e00d      	b.n	8000a3c <button_reading+0x9c>
				}
			}
			else
			{
				duration_for_buttons--;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <button_reading+0xcc>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <button_reading+0xcc>)
 8000a2a:	701a      	strb	r2, [r3, #0]
				if(duration_for_buttons<=0)
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <button_reading+0xcc>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d103      	bne.n	8000a3c <button_reading+0x9c>
				{
					debounceButtonBuffer3[i]=BUTTON_IS_RELEASED;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <button_reading+0xc4>)
 8000a38:	2101      	movs	r1, #1
 8000a3a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<NO_OF_BUTTONS;i++)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d9b1      	bls.n	80009ac <button_reading+0xc>
				}
			}
		}
	}
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000dc 	.word	0x200000dc
 8000a58:	200000e0 	.word	0x200000e0
 8000a5c:	20000018 	.word	0x20000018
 8000a60:	20000010 	.word	0x20000010
 8000a64:	200000e4 	.word	0x200000e4
 8000a68:	2000000c 	.word	0x2000000c
 8000a6c:	200001b4 	.word	0x200001b4

08000a70 <is_button_pressed>:

int is_button_pressed(uint8_t index)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	if(buttonBuffer[index]==BUTTON_IS_PRESSED)
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <is_button_pressed+0x24>)
 8000a7e:	5cd3      	ldrb	r3, [r2, r3]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <is_button_pressed+0x18>
	{
		return 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <is_button_pressed+0x1a>
		buttonBuffer[index]=BUTTON_IS_RELEASED;
	}
	else return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	2000000c 	.word	0x2000000c

08000a98 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t rx_data;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_UART_RxCpltCallback+0x30>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d10a      	bne.n	8000ac0 <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Transmit(&huart2,&rx_data,sizeof(rx_data), 50);
 8000aaa:	2332      	movs	r3, #50	; 0x32
 8000aac:	2201      	movs	r2, #1
 8000aae:	4907      	ldr	r1, [pc, #28]	; (8000acc <HAL_UART_RxCpltCallback+0x34>)
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <HAL_UART_RxCpltCallback+0x38>)
 8000ab2:	f002 fbfa 	bl	80032aa <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4904      	ldr	r1, [pc, #16]	; (8000acc <HAL_UART_RxCpltCallback+0x34>)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_UART_RxCpltCallback+0x38>)
 8000abc:	f002 fc87 	bl	80033ce <HAL_UART_Receive_IT>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	200001b8 	.word	0x200001b8
 8000ad0:	2000016c 	.word	0x2000016c

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad8:	f000 fc36 	bl	8001348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000adc:	f000 f822 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae0:	f000 f948 	bl	8000d74 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000ae4:	f000 f8a6 	bl	8000c34 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000ae8:	f000 f858 	bl	8000b9c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000aec:	f000 f918 	bl	8000d20 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000af0:	4808      	ldr	r0, [pc, #32]	; (8000b14 <main+0x40>)
 8000af2:	f001 fc7f 	bl	80023f4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (& huart2 , &rx_data , 1) ;
 8000af6:	2201      	movs	r2, #1
 8000af8:	4907      	ldr	r1, [pc, #28]	; (8000b18 <main+0x44>)
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <main+0x48>)
 8000afc:	f002 fc67 	bl	80033ce <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000b00:	2100      	movs	r1, #0
 8000b02:	4807      	ldr	r0, [pc, #28]	; (8000b20 <main+0x4c>)
 8000b04:	f001 fd20 	bl	8002548 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initial();
 8000b08:	f7ff fb20 	bl	800014c <initial>
  while (1)
  {
	  fsm_automatic();
 8000b0c:	f7ff fcf4 	bl	80004f8 <fsm_automatic>
 8000b10:	e7fc      	b.n	8000b0c <main+0x38>
 8000b12:	bf00      	nop
 8000b14:	200001bc 	.word	0x200001bc
 8000b18:	200001b8 	.word	0x200001b8
 8000b1c:	2000016c 	.word	0x2000016c
 8000b20:	20000118 	.word	0x20000118

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b090      	sub	sp, #64	; 0x40
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	2228      	movs	r2, #40	; 0x28
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 f8ce 	bl	8003cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 ffe0 	bl	8001b20 <HAL_RCC_OscConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b66:	f000 f973 	bl	8000e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 fa4c 	bl	8002020 <HAL_RCC_ClockConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b8e:	f000 f95f 	bl	8000e50 <Error_Handler>
  }
}
 8000b92:	bf00      	nop
 8000b94:	3740      	adds	r7, #64	; 0x40
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bc2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bd0:	2209      	movs	r2, #9
 8000bd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be0:	4813      	ldr	r0, [pc, #76]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000be2:	f001 fbb7 	bl	8002354 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bec:	f000 f930 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bfe:	f001 ff0b 	bl	8002a18 <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c08:	f000 f922 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000c1a:	f002 fa89 	bl	8003130 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c24:	f000 f914 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200001bc 	.word	0x200001bc

08000c34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08e      	sub	sp, #56	; 0x38
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	f107 0320 	add.w	r3, r7, #32
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]
 8000c62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c64:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <MX_TIM3_Init+0xe4>)
 8000c66:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <MX_TIM3_Init+0xe8>)
 8000c68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <MX_TIM3_Init+0xe4>)
 8000c6c:	f240 321f 	movw	r2, #799	; 0x31f
 8000c70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <MX_TIM3_Init+0xe4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000c78:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <MX_TIM3_Init+0xe4>)
 8000c7a:	2209      	movs	r2, #9
 8000c7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <MX_TIM3_Init+0xe4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c84:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <MX_TIM3_Init+0xe4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c8a:	4823      	ldr	r0, [pc, #140]	; (8000d18 <MX_TIM3_Init+0xe4>)
 8000c8c:	f001 fb62 	bl	8002354 <HAL_TIM_Base_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c96:	f000 f8db 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ca0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	481c      	ldr	r0, [pc, #112]	; (8000d18 <MX_TIM3_Init+0xe4>)
 8000ca8:	f001 feb6 	bl	8002a18 <HAL_TIM_ConfigClockSource>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cb2:	f000 f8cd 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cb6:	4818      	ldr	r0, [pc, #96]	; (8000d18 <MX_TIM3_Init+0xe4>)
 8000cb8:	f001 fbee 	bl	8002498 <HAL_TIM_PWM_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cc2:	f000 f8c5 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cce:	f107 0320 	add.w	r3, r7, #32
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4810      	ldr	r0, [pc, #64]	; (8000d18 <MX_TIM3_Init+0xe4>)
 8000cd6:	f002 fa2b 	bl	8003130 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ce0:	f000 f8b6 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce4:	2360      	movs	r3, #96	; 0x60
 8000ce6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <MX_TIM3_Init+0xe4>)
 8000cfc:	f001 fdce 	bl	800289c <HAL_TIM_PWM_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d06:	f000 f8a3 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d0a:	4803      	ldr	r0, [pc, #12]	; (8000d18 <MX_TIM3_Init+0xe4>)
 8000d0c:	f000 f918 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 8000d10:	bf00      	nop
 8000d12:	3738      	adds	r7, #56	; 0x38
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000118 	.word	0x20000118
 8000d1c:	40000400 	.word	0x40000400

08000d20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MX_USART2_UART_Init+0x50>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d58:	f002 fa5a 	bl	8003210 <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d62:	f000 f875 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000016c 	.word	0x2000016c
 8000d70:	40004400 	.word	0x40004400

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b2e      	ldr	r3, [pc, #184]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a2d      	ldr	r2, [pc, #180]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <MX_GPIO_Init+0xd0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PES_RED_Pin|Traffic_1_GREEN_Pin|Traffic_2_GREEN_Pin|Traffic_2_RED_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000dbe:	4822      	ldr	r0, [pc, #136]	; (8000e48 <MX_GPIO_Init+0xd4>)
 8000dc0:	f000 fe7d 	bl	8001abe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PES_GREEN_Pin|Traffic_1_RED_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000dca:	4820      	ldr	r0, [pc, #128]	; (8000e4c <MX_GPIO_Init+0xd8>)
 8000dcc:	f000 fe77 	bl	8001abe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PES_BUT_Pin BUT_1_Pin BUT_2_Pin */
  GPIO_InitStruct.Pin = PES_BUT_Pin|BUT_1_Pin|BUT_2_Pin;
 8000dd0:	2313      	movs	r3, #19
 8000dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	4619      	mov	r1, r3
 8000de2:	481a      	ldr	r0, [pc, #104]	; (8000e4c <MX_GPIO_Init+0xd8>)
 8000de4:	f000 fcd0 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_3_Pin */
  GPIO_InitStruct.Pin = BUT_3_Pin;
 8000de8:	2301      	movs	r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUT_3_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4813      	ldr	r0, [pc, #76]	; (8000e48 <MX_GPIO_Init+0xd4>)
 8000dfc:	f000 fcc4 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PES_RED_Pin Traffic_1_GREEN_Pin Traffic_2_GREEN_Pin Traffic_2_RED_Pin */
  GPIO_InitStruct.Pin = PES_RED_Pin|Traffic_1_GREEN_Pin|Traffic_2_GREEN_Pin|Traffic_2_RED_Pin;
 8000e00:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	4619      	mov	r1, r3
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <MX_GPIO_Init+0xd4>)
 8000e1a:	f000 fcb5 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PES_GREEN_Pin Traffic_1_RED_Pin */
  GPIO_InitStruct.Pin = PES_GREEN_Pin|Traffic_1_RED_Pin;
 8000e1e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	4619      	mov	r1, r3
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_GPIO_Init+0xd8>)
 8000e38:	f000 fca6 	bl	8001788 <HAL_GPIO_Init>

}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010c00 	.word	0x40010c00
 8000e4c:	40010800 	.word	0x40010800

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_MspInit+0x5c>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_MspInit+0x60>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_MspInit+0x60>)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000

08000ec0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed0:	d114      	bne.n	8000efc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_TIM_Base_MspInit+0x78>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <HAL_TIM_Base_MspInit+0x78>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_TIM_Base_MspInit+0x78>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	201c      	movs	r0, #28
 8000ef0:	f000 fb63 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ef4:	201c      	movs	r0, #28
 8000ef6:	f000 fb7c 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000efa:	e018      	b.n	8000f2e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_TIM_Base_MspInit+0x7c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d113      	bne.n	8000f2e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_TIM_Base_MspInit+0x78>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <HAL_TIM_Base_MspInit+0x78>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_TIM_Base_MspInit+0x78>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	201d      	movs	r0, #29
 8000f24:	f000 fb49 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f28:	201d      	movs	r0, #29
 8000f2a:	f000 fb62 	bl	80015f2 <HAL_NVIC_EnableIRQ>
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40000400 	.word	0x40000400

08000f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_TIM_MspPostInit+0x58>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d117      	bne.n	8000f90 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_TIM_MspPostInit+0x5c>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_TIM_MspPostInit+0x5c>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_TIM_MspPostInit+0x5c>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8000f78:	2340      	movs	r3, #64	; 0x40
 8000f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_TIM_MspPostInit+0x60>)
 8000f8c:	f000 fbfc 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40000400 	.word	0x40000400
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010800 	.word	0x40010800

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a1f      	ldr	r2, [pc, #124]	; (800103c <HAL_UART_MspInit+0x98>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d137      	bne.n	8001034 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <HAL_UART_MspInit+0x9c>)
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <HAL_UART_MspInit+0x9c>)
 8000fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fce:	61d3      	str	r3, [r2, #28]
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_UART_MspInit+0x9c>)
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_UART_MspInit+0x9c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_UART_MspInit+0x9c>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_UART_MspInit+0x9c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	4619      	mov	r1, r3
 8001006:	480f      	ldr	r0, [pc, #60]	; (8001044 <HAL_UART_MspInit+0xa0>)
 8001008:	f000 fbbe 	bl	8001788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800100c:	2308      	movs	r3, #8
 800100e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4619      	mov	r1, r3
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <HAL_UART_MspInit+0xa0>)
 8001020:	f000 fbb2 	bl	8001788 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2026      	movs	r0, #38	; 0x26
 800102a:	f000 fac6 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800102e:	2026      	movs	r0, #38	; 0x26
 8001030:	f000 fadf 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40004400 	.word	0x40004400
 8001040:	40021000 	.word	0x40021000
 8001044:	40010800 	.word	0x40010800

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104c:	e7fe      	b.n	800104c <NMI_Handler+0x4>

0800104e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108e:	f000 f9a1 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM2_IRQHandler+0x10>)
 800109e:	f001 faf5 	bl	800268c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200001bc 	.word	0x200001bc

080010ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <TIM3_IRQHandler+0x10>)
 80010b2:	f001 faeb 	bl	800268c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000118 	.word	0x20000118

080010c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <USART2_IRQHandler+0x10>)
 80010c6:	f002 f9b3 	bl	8003430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000016c 	.word	0x2000016c

080010d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <_sbrk+0x5c>)
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <_sbrk+0x60>)
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <_sbrk+0x64>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <_sbrk+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	d207      	bcs.n	8001114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001104:	f002 fdbc 	bl	8003c80 <__errno>
 8001108:	4603      	mov	r3, r0
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e009      	b.n	8001128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <_sbrk+0x64>)
 8001124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20005000 	.word	0x20005000
 8001134:	00000400 	.word	0x00000400
 8001138:	200000e8 	.word	0x200000e8
 800113c:	20000218 	.word	0x20000218

08001140 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <setTimerReset>:
int pes_flag=0;
int pes_counter=0;
int blink_flag=0;
int blink_counter=0;
void setTimerReset(int duration)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	reset_counter=duration/10;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <setTimerReset+0x2c>)
 8001158:	fb82 1203 	smull	r1, r2, r2, r3
 800115c:	1092      	asrs	r2, r2, #2
 800115e:	17db      	asrs	r3, r3, #31
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	4a06      	ldr	r2, [pc, #24]	; (800117c <setTimerReset+0x30>)
 8001164:	6013      	str	r3, [r2, #0]
	reset_flag=0;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <setTimerReset+0x34>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	66666667 	.word	0x66666667
 800117c:	200000f0 	.word	0x200000f0
 8001180:	200000ec 	.word	0x200000ec

08001184 <setTimerRun>:
void setTimerRun(int duration)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	run_counter=duration/10;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <setTimerRun+0x2c>)
 8001190:	fb82 1203 	smull	r1, r2, r2, r3
 8001194:	1092      	asrs	r2, r2, #2
 8001196:	17db      	asrs	r3, r3, #31
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <setTimerRun+0x30>)
 800119c:	6013      	str	r3, [r2, #0]
	run_flag=0;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <setTimerRun+0x34>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	66666667 	.word	0x66666667
 80011b4:	200000f8 	.word	0x200000f8
 80011b8:	200000f4 	.word	0x200000f4

080011bc <setTimerPesBut>:
void setTimerPesBut(int duration)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	pes_counter=duration/10;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <setTimerPesBut+0x2c>)
 80011c8:	fb82 1203 	smull	r1, r2, r2, r3
 80011cc:	1092      	asrs	r2, r2, #2
 80011ce:	17db      	asrs	r3, r3, #31
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	4a06      	ldr	r2, [pc, #24]	; (80011ec <setTimerPesBut+0x30>)
 80011d4:	6013      	str	r3, [r2, #0]
	pes_flag=0;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <setTimerPesBut+0x34>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	66666667 	.word	0x66666667
 80011ec:	20000100 	.word	0x20000100
 80011f0:	200000fc 	.word	0x200000fc

080011f4 <setTimerBlink>:
void setTimerBlink(int duration)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	blink_counter=duration/10;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <setTimerBlink+0x2c>)
 8001200:	fb82 1203 	smull	r1, r2, r2, r3
 8001204:	1092      	asrs	r2, r2, #2
 8001206:	17db      	asrs	r3, r3, #31
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	4a06      	ldr	r2, [pc, #24]	; (8001224 <setTimerBlink+0x30>)
 800120c:	6013      	str	r3, [r2, #0]
	blink_flag=0;
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <setTimerBlink+0x34>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	66666667 	.word	0x66666667
 8001224:	20000108 	.word	0x20000108
 8001228:	20000104 	.word	0x20000104

0800122c <timerRun>:
void timerRun()
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	if(reset_counter>0)
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <timerRun+0x8c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	dd0b      	ble.n	8001250 <timerRun+0x24>
	{
		reset_counter--;
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <timerRun+0x8c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3b01      	subs	r3, #1
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <timerRun+0x8c>)
 8001240:	6013      	str	r3, [r2, #0]
		if(reset_counter<=0)
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <timerRun+0x8c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	dc02      	bgt.n	8001250 <timerRun+0x24>
		{
			reset_flag=1;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <timerRun+0x90>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
		}
	}
	if(pes_counter>0)
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <timerRun+0x94>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	dd0b      	ble.n	8001270 <timerRun+0x44>
	{
		pes_counter--;
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <timerRun+0x94>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3b01      	subs	r3, #1
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <timerRun+0x94>)
 8001260:	6013      	str	r3, [r2, #0]
		if(pes_counter<=0)
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <timerRun+0x94>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	dc02      	bgt.n	8001270 <timerRun+0x44>
		{
			pes_flag=1;
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <timerRun+0x98>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
		}
	}
	if(run_counter>0)
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <timerRun+0x9c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	dd0b      	ble.n	8001290 <timerRun+0x64>
	{
		run_counter--;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <timerRun+0x9c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3b01      	subs	r3, #1
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <timerRun+0x9c>)
 8001280:	6013      	str	r3, [r2, #0]
		if(run_counter<=0)
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <timerRun+0x9c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	dc02      	bgt.n	8001290 <timerRun+0x64>
		{
			run_flag=1;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <timerRun+0xa0>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]
		}
	}
	if(blink_counter>0)
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <timerRun+0xa4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	dd0b      	ble.n	80012b0 <timerRun+0x84>
	{
		blink_counter--;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <timerRun+0xa4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <timerRun+0xa4>)
 80012a0:	6013      	str	r3, [r2, #0]
		if(blink_counter<=0)
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <timerRun+0xa4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dc02      	bgt.n	80012b0 <timerRun+0x84>
		{
			blink_flag=1;
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <timerRun+0xa8>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	601a      	str	r2, [r3, #0]
		}
	}
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	200000f0 	.word	0x200000f0
 80012bc:	200000ec 	.word	0x200000ec
 80012c0:	20000100 	.word	0x20000100
 80012c4:	200000fc 	.word	0x200000fc
 80012c8:	200000f8 	.word	0x200000f8
 80012cc:	200000f4 	.word	0x200000f4
 80012d0:	20000108 	.word	0x20000108
 80012d4:	20000104 	.word	0x20000104

080012d8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM2 ) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e8:	d103      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x1a>
button_reading() ;
 80012ea:	f7ff fb59 	bl	80009a0 <button_reading>
timerRun();
 80012ee:	f7ff ff9d 	bl	800122c <timerRun>
}
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	; (8001340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001322:	f7ff ff0d 	bl	8001140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001326:	f002 fcb1 	bl	8003c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132a:	f7ff fbd3 	bl	8000ad4 <main>
  bx lr
 800132e:	4770      	bx	lr
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001338:	08004614 	.word	0x08004614
  ldr r2, =_sbss
 800133c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001340:	20000218 	.word	0x20000218

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>
	...

08001348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_Init+0x28>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <HAL_Init+0x28>)
 8001352:	f043 0310 	orr.w	r3, r3, #16
 8001356:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 f923 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135e:	200f      	movs	r0, #15
 8001360:	f000 f808 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001364:	f7ff fd7a 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40022000 	.word	0x40022000

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_InitTick+0x54>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x58>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f93b 	bl	800160e <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f000 f903 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_InitTick+0x5c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000028 	.word	0x20000028
 80013cc:	20000030 	.word	0x20000030
 80013d0:	2000002c 	.word	0x2000002c

080013d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_IncTick+0x1c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_IncTick+0x20>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a03      	ldr	r2, [pc, #12]	; (80013f4 <HAL_IncTick+0x20>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	20000030 	.word	0x20000030
 80013f4:	20000204 	.word	0x20000204

080013f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b02      	ldr	r3, [pc, #8]	; (8001408 <HAL_GetTick+0x10>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	20000204 	.word	0x20000204

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4906      	ldr	r1, [pc, #24]	; (80014a4 <__NVIC_EnableIRQ+0x34>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff90 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff2d 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff42 	bl	8001454 <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff90 	bl	80014fc <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5f 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff35 	bl	8001470 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa2 	bl	8001560 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001626:	b480      	push	{r7}
 8001628:	b085      	sub	sp, #20
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001638:	2b02      	cmp	r3, #2
 800163a:	d008      	beq.n	800164e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2204      	movs	r2, #4
 8001640:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e020      	b.n	8001690 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 020e 	bic.w	r2, r2, #14
 800165c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0201 	bic.w	r2, r2, #1
 800166c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001676:	2101      	movs	r1, #1
 8001678:	fa01 f202 	lsl.w	r2, r1, r2
 800167c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
	...

0800169c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d005      	beq.n	80016be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2204      	movs	r2, #4
 80016b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e051      	b.n	8001762 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 020e 	bic.w	r2, r2, #14
 80016cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0201 	bic.w	r2, r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a22      	ldr	r2, [pc, #136]	; (800176c <HAL_DMA_Abort_IT+0xd0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d029      	beq.n	800173c <HAL_DMA_Abort_IT+0xa0>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a20      	ldr	r2, [pc, #128]	; (8001770 <HAL_DMA_Abort_IT+0xd4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d022      	beq.n	8001738 <HAL_DMA_Abort_IT+0x9c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <HAL_DMA_Abort_IT+0xd8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d01a      	beq.n	8001732 <HAL_DMA_Abort_IT+0x96>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <HAL_DMA_Abort_IT+0xdc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d012      	beq.n	800172c <HAL_DMA_Abort_IT+0x90>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1c      	ldr	r2, [pc, #112]	; (800177c <HAL_DMA_Abort_IT+0xe0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d00a      	beq.n	8001726 <HAL_DMA_Abort_IT+0x8a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <HAL_DMA_Abort_IT+0xe4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d102      	bne.n	8001720 <HAL_DMA_Abort_IT+0x84>
 800171a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800171e:	e00e      	b.n	800173e <HAL_DMA_Abort_IT+0xa2>
 8001720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001724:	e00b      	b.n	800173e <HAL_DMA_Abort_IT+0xa2>
 8001726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172a:	e008      	b.n	800173e <HAL_DMA_Abort_IT+0xa2>
 800172c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001730:	e005      	b.n	800173e <HAL_DMA_Abort_IT+0xa2>
 8001732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001736:	e002      	b.n	800173e <HAL_DMA_Abort_IT+0xa2>
 8001738:	2310      	movs	r3, #16
 800173a:	e000      	b.n	800173e <HAL_DMA_Abort_IT+0xa2>
 800173c:	2301      	movs	r3, #1
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <HAL_DMA_Abort_IT+0xe8>)
 8001740:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	4798      	blx	r3
    } 
  }
  return status;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40020008 	.word	0x40020008
 8001770:	4002001c 	.word	0x4002001c
 8001774:	40020030 	.word	0x40020030
 8001778:	40020044 	.word	0x40020044
 800177c:	40020058 	.word	0x40020058
 8001780:	4002006c 	.word	0x4002006c
 8001784:	40020000 	.word	0x40020000

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b08b      	sub	sp, #44	; 0x2c
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179a:	e169      	b.n	8001a70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800179c:	2201      	movs	r2, #1
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 8158 	bne.w	8001a6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4a9a      	ldr	r2, [pc, #616]	; (8001a28 <HAL_GPIO_Init+0x2a0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d05e      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017c4:	4a98      	ldr	r2, [pc, #608]	; (8001a28 <HAL_GPIO_Init+0x2a0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d875      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017ca:	4a98      	ldr	r2, [pc, #608]	; (8001a2c <HAL_GPIO_Init+0x2a4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d058      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017d0:	4a96      	ldr	r2, [pc, #600]	; (8001a2c <HAL_GPIO_Init+0x2a4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d86f      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017d6:	4a96      	ldr	r2, [pc, #600]	; (8001a30 <HAL_GPIO_Init+0x2a8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d052      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017dc:	4a94      	ldr	r2, [pc, #592]	; (8001a30 <HAL_GPIO_Init+0x2a8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d869      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017e2:	4a94      	ldr	r2, [pc, #592]	; (8001a34 <HAL_GPIO_Init+0x2ac>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d04c      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017e8:	4a92      	ldr	r2, [pc, #584]	; (8001a34 <HAL_GPIO_Init+0x2ac>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d863      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017ee:	4a92      	ldr	r2, [pc, #584]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d046      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017f4:	4a90      	ldr	r2, [pc, #576]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d85d      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017fa:	2b12      	cmp	r3, #18
 80017fc:	d82a      	bhi.n	8001854 <HAL_GPIO_Init+0xcc>
 80017fe:	2b12      	cmp	r3, #18
 8001800:	d859      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <HAL_GPIO_Init+0x80>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001883 	.word	0x08001883
 800180c:	0800185d 	.word	0x0800185d
 8001810:	0800186f 	.word	0x0800186f
 8001814:	080018b1 	.word	0x080018b1
 8001818:	080018b7 	.word	0x080018b7
 800181c:	080018b7 	.word	0x080018b7
 8001820:	080018b7 	.word	0x080018b7
 8001824:	080018b7 	.word	0x080018b7
 8001828:	080018b7 	.word	0x080018b7
 800182c:	080018b7 	.word	0x080018b7
 8001830:	080018b7 	.word	0x080018b7
 8001834:	080018b7 	.word	0x080018b7
 8001838:	080018b7 	.word	0x080018b7
 800183c:	080018b7 	.word	0x080018b7
 8001840:	080018b7 	.word	0x080018b7
 8001844:	080018b7 	.word	0x080018b7
 8001848:	080018b7 	.word	0x080018b7
 800184c:	08001865 	.word	0x08001865
 8001850:	08001879 	.word	0x08001879
 8001854:	4a79      	ldr	r2, [pc, #484]	; (8001a3c <HAL_GPIO_Init+0x2b4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800185a:	e02c      	b.n	80018b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e029      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	3304      	adds	r3, #4
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e024      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	3308      	adds	r3, #8
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e01f      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	330c      	adds	r3, #12
 800187e:	623b      	str	r3, [r7, #32]
          break;
 8001880:	e01a      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800188a:	2304      	movs	r3, #4
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e013      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	611a      	str	r2, [r3, #16]
          break;
 80018a2:	e009      	b.n	80018b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a4:	2308      	movs	r3, #8
 80018a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	615a      	str	r2, [r3, #20]
          break;
 80018ae:	e003      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          break;
 80018b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2bff      	cmp	r3, #255	; 0xff
 80018bc:	d801      	bhi.n	80018c2 <HAL_GPIO_Init+0x13a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	e001      	b.n	80018c6 <HAL_GPIO_Init+0x13e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3304      	adds	r3, #4
 80018c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d802      	bhi.n	80018d4 <HAL_GPIO_Init+0x14c>
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x152>
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	3b08      	subs	r3, #8
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	210f      	movs	r1, #15
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	6a39      	ldr	r1, [r7, #32]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	431a      	orrs	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80b1 	beq.w	8001a6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001908:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <HAL_GPIO_Init+0x2b8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <HAL_GPIO_Init+0x2b8>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <HAL_GPIO_Init+0x2b8>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001920:	4a48      	ldr	r2, [pc, #288]	; (8001a44 <HAL_GPIO_Init+0x2bc>)
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	3302      	adds	r3, #2
 8001928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a40      	ldr	r2, [pc, #256]	; (8001a48 <HAL_GPIO_Init+0x2c0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d013      	beq.n	8001974 <HAL_GPIO_Init+0x1ec>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a3f      	ldr	r2, [pc, #252]	; (8001a4c <HAL_GPIO_Init+0x2c4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00d      	beq.n	8001970 <HAL_GPIO_Init+0x1e8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a3e      	ldr	r2, [pc, #248]	; (8001a50 <HAL_GPIO_Init+0x2c8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d007      	beq.n	800196c <HAL_GPIO_Init+0x1e4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3d      	ldr	r2, [pc, #244]	; (8001a54 <HAL_GPIO_Init+0x2cc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_GPIO_Init+0x1e0>
 8001964:	2303      	movs	r3, #3
 8001966:	e006      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001968:	2304      	movs	r3, #4
 800196a:	e004      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 800196c:	2302      	movs	r3, #2
 800196e:	e002      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001974:	2300      	movs	r3, #0
 8001976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001978:	f002 0203 	and.w	r2, r2, #3
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	4093      	lsls	r3, r2
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001986:	492f      	ldr	r1, [pc, #188]	; (8001a44 <HAL_GPIO_Init+0x2bc>)
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019a0:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	492c      	ldr	r1, [pc, #176]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	600b      	str	r3, [r1, #0]
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4928      	ldr	r1, [pc, #160]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4922      	ldr	r1, [pc, #136]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	43db      	mvns	r3, r3
 80019de:	491e      	ldr	r1, [pc, #120]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	4918      	ldr	r1, [pc, #96]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4914      	ldr	r1, [pc, #80]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d021      	beq.n	8001a5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	490e      	ldr	r1, [pc, #56]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60cb      	str	r3, [r1, #12]
 8001a24:	e021      	b.n	8001a6a <HAL_GPIO_Init+0x2e2>
 8001a26:	bf00      	nop
 8001a28:	10320000 	.word	0x10320000
 8001a2c:	10310000 	.word	0x10310000
 8001a30:	10220000 	.word	0x10220000
 8001a34:	10210000 	.word	0x10210000
 8001a38:	10120000 	.word	0x10120000
 8001a3c:	10110000 	.word	0x10110000
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010000 	.word	0x40010000
 8001a48:	40010800 	.word	0x40010800
 8001a4c:	40010c00 	.word	0x40010c00
 8001a50:	40011000 	.word	0x40011000
 8001a54:	40011400 	.word	0x40011400
 8001a58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_GPIO_Init+0x304>)
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4909      	ldr	r1, [pc, #36]	; (8001a8c <HAL_GPIO_Init+0x304>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f47f ae8e 	bne.w	800179c <HAL_GPIO_Init+0x14>
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	372c      	adds	r7, #44	; 0x2c
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e001      	b.n	8001ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	807b      	strh	r3, [r7, #2]
 8001aca:	4613      	mov	r3, r2
 8001acc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ace:	787b      	ldrb	r3, [r7, #1]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad4:	887a      	ldrh	r2, [r7, #2]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ada:	e003      	b.n	8001ae4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	041a      	lsls	r2, r3, #16
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	611a      	str	r2, [r3, #16]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b00:	887a      	ldrh	r2, [r7, #2]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	400b      	ands	r3, r1
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	611a      	str	r2, [r3, #16]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e26c      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8087 	beq.w	8001c4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b40:	4b92      	ldr	r3, [pc, #584]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d00c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b4c:	4b8f      	ldr	r3, [pc, #572]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d112      	bne.n	8001b7e <HAL_RCC_OscConfig+0x5e>
 8001b58:	4b8c      	ldr	r3, [pc, #560]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d10b      	bne.n	8001b7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	4b89      	ldr	r3, [pc, #548]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d06c      	beq.n	8001c4c <HAL_RCC_OscConfig+0x12c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d168      	bne.n	8001c4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e246      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x76>
 8001b88:	4b80      	ldr	r3, [pc, #512]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a7f      	ldr	r2, [pc, #508]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e02e      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd4>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x98>
 8001b9e:	4b7b      	ldr	r3, [pc, #492]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a7a      	ldr	r2, [pc, #488]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b78      	ldr	r3, [pc, #480]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a77      	ldr	r2, [pc, #476]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0xbc>
 8001bc2:	4b72      	ldr	r3, [pc, #456]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a71      	ldr	r2, [pc, #452]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6e      	ldr	r2, [pc, #440]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd4>
 8001bdc:	4b6b      	ldr	r3, [pc, #428]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6a      	ldr	r2, [pc, #424]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b68      	ldr	r3, [pc, #416]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a67      	ldr	r2, [pc, #412]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fbfc 	bl	80013f8 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fbf8 	bl	80013f8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e1fa      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xe4>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fbe8 	bl	80013f8 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fbe4 	bl	80013f8 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1e6      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b53      	ldr	r3, [pc, #332]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x10c>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d063      	beq.n	8001d22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5a:	4b4c      	ldr	r3, [pc, #304]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c66:	4b49      	ldr	r3, [pc, #292]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11c      	bne.n	8001cac <HAL_RCC_OscConfig+0x18c>
 8001c72:	4b46      	ldr	r3, [pc, #280]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d116      	bne.n	8001cac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x176>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e1ba      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4939      	ldr	r1, [pc, #228]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	e03a      	b.n	8001d22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb4:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fb9d 	bl	80013f8 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fb99 	bl	80013f8 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e19b      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4927      	ldr	r1, [pc, #156]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e015      	b.n	8001d22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fb7c 	bl	80013f8 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d04:	f7ff fb78 	bl	80013f8 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e17a      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d03a      	beq.n	8001da4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d019      	beq.n	8001d6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fb5c 	bl	80013f8 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff fb58 	bl	80013f8 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e15a      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f000 fad8 	bl	8002318 <RCC_Delay>
 8001d68:	e01c      	b.n	8001da4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d70:	f7ff fb42 	bl	80013f8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d76:	e00f      	b.n	8001d98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff fb3e 	bl	80013f8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d908      	bls.n	8001d98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e140      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	42420000 	.word	0x42420000
 8001d94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	4b9e      	ldr	r3, [pc, #632]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e9      	bne.n	8001d78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80a6 	beq.w	8001efe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db6:	4b97      	ldr	r3, [pc, #604]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10d      	bne.n	8001dde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b94      	ldr	r3, [pc, #592]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a93      	ldr	r2, [pc, #588]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b91      	ldr	r3, [pc, #580]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4b8e      	ldr	r3, [pc, #568]	; (8002018 <HAL_RCC_OscConfig+0x4f8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d118      	bne.n	8001e1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dea:	4b8b      	ldr	r3, [pc, #556]	; (8002018 <HAL_RCC_OscConfig+0x4f8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a8a      	ldr	r2, [pc, #552]	; (8002018 <HAL_RCC_OscConfig+0x4f8>)
 8001df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df6:	f7ff faff 	bl	80013f8 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfe:	f7ff fafb 	bl	80013f8 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b64      	cmp	r3, #100	; 0x64
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e0fd      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	4b81      	ldr	r3, [pc, #516]	; (8002018 <HAL_RCC_OscConfig+0x4f8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x312>
 8001e24:	4b7b      	ldr	r3, [pc, #492]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a7a      	ldr	r2, [pc, #488]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	e02d      	b.n	8001e8e <HAL_RCC_OscConfig+0x36e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x334>
 8001e3a:	4b76      	ldr	r3, [pc, #472]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a75      	ldr	r2, [pc, #468]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6213      	str	r3, [r2, #32]
 8001e46:	4b73      	ldr	r3, [pc, #460]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a72      	ldr	r2, [pc, #456]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	f023 0304 	bic.w	r3, r3, #4
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	e01c      	b.n	8001e8e <HAL_RCC_OscConfig+0x36e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d10c      	bne.n	8001e76 <HAL_RCC_OscConfig+0x356>
 8001e5c:	4b6d      	ldr	r3, [pc, #436]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a6c      	ldr	r2, [pc, #432]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	6213      	str	r3, [r2, #32]
 8001e68:	4b6a      	ldr	r3, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a69      	ldr	r2, [pc, #420]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	e00b      	b.n	8001e8e <HAL_RCC_OscConfig+0x36e>
 8001e76:	4b67      	ldr	r3, [pc, #412]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a66      	ldr	r2, [pc, #408]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	4b64      	ldr	r3, [pc, #400]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a63      	ldr	r2, [pc, #396]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d015      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7ff faaf 	bl	80013f8 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7ff faab 	bl	80013f8 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0ab      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb4:	4b57      	ldr	r3, [pc, #348]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ee      	beq.n	8001e9e <HAL_RCC_OscConfig+0x37e>
 8001ec0:	e014      	b.n	8001eec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff fa99 	bl	80013f8 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7ff fa95 	bl	80013f8 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e095      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1ee      	bne.n	8001eca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d105      	bne.n	8001efe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef2:	4b48      	ldr	r3, [pc, #288]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a47      	ldr	r2, [pc, #284]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8081 	beq.w	800200a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f08:	4b42      	ldr	r3, [pc, #264]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d061      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d146      	bne.n	8001faa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1c:	4b3f      	ldr	r3, [pc, #252]	; (800201c <HAL_RCC_OscConfig+0x4fc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7ff fa69 	bl	80013f8 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7ff fa65 	bl	80013f8 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e067      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	4b35      	ldr	r3, [pc, #212]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f50:	d108      	bne.n	8001f64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f52:	4b30      	ldr	r3, [pc, #192]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	492d      	ldr	r1, [pc, #180]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f64:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a19      	ldr	r1, [r3, #32]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	430b      	orrs	r3, r1
 8001f76:	4927      	ldr	r1, [pc, #156]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x4fc>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff fa39 	bl	80013f8 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff fa35 	bl	80013f8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e037      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x46a>
 8001fa8:	e02f      	b.n	800200a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_RCC_OscConfig+0x4fc>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fa22 	bl	80013f8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff fa1e 	bl	80013f8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e020      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x498>
 8001fd6:	e018      	b.n	800200a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e013      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
 800201c:	42420060 	.word	0x42420060

08002020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0d0      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d910      	bls.n	8002064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0207 	bic.w	r2, r3, #7
 800204a:	4965      	ldr	r1, [pc, #404]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0b8      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002086:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800209e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	494d      	ldr	r1, [pc, #308]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d040      	beq.n	8002140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d115      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e07f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e073      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06b      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f023 0203 	bic.w	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4936      	ldr	r1, [pc, #216]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002110:	f7ff f972 	bl	80013f8 <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	e00a      	b.n	800212e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002118:	f7ff f96e 	bl	80013f8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e053      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 020c 	and.w	r2, r3, #12
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	429a      	cmp	r2, r3
 800213e:	d1eb      	bne.n	8002118 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d210      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0207 	bic.w	r2, r3, #7
 8002156:	4922      	ldr	r1, [pc, #136]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e032      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4916      	ldr	r1, [pc, #88]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	490e      	ldr	r1, [pc, #56]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ae:	f000 f821 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	490a      	ldr	r1, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	5ccb      	ldrb	r3, [r1, r3]
 80021c2:	fa22 f303 	lsr.w	r3, r2, r3
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_RCC_ClockConfig+0x1cc>)
 80021c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1d0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f8d0 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022000 	.word	0x40022000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	080045c0 	.word	0x080045c0
 80021ec:	20000028 	.word	0x20000028
 80021f0:	2000002c 	.word	0x2000002c

080021f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b490      	push	{r4, r7}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021fa:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021fc:	1d3c      	adds	r4, r7, #4
 80021fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002204:	f240 2301 	movw	r3, #513	; 0x201
 8002208:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x40>
 800222e:	2b08      	cmp	r3, #8
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x46>
 8002232:	e02d      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	623b      	str	r3, [r7, #32]
      break;
 8002238:	e02d      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	0c9b      	lsrs	r3, r3, #18
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002246:	4413      	add	r3, r2
 8002248:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800224c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	0c5b      	lsrs	r3, r3, #17
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002266:	4413      	add	r3, r2
 8002268:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800226c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002272:	fb02 f203 	mul.w	r2, r2, r3
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
 800227e:	e004      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002284:	fb02 f303 	mul.w	r3, r2, r3
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	623b      	str	r3, [r7, #32]
      break;
 800228e:	e002      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002292:	623b      	str	r3, [r7, #32]
      break;
 8002294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002296:	6a3b      	ldr	r3, [r7, #32]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3728      	adds	r7, #40	; 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bc90      	pop	{r4, r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	080045b0 	.word	0x080045b0
 80022a8:	40021000 	.word	0x40021000
 80022ac:	007a1200 	.word	0x007a1200
 80022b0:	003d0900 	.word	0x003d0900

080022b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	20000028 	.word	0x20000028

080022c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022cc:	f7ff fff2 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022d0:	4602      	mov	r2, r0
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	4903      	ldr	r1, [pc, #12]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80022de:	5ccb      	ldrb	r3, [r1, r3]
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	080045d0 	.word	0x080045d0

080022f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022f4:	f7ff ffde 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	0adb      	lsrs	r3, r3, #11
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4903      	ldr	r1, [pc, #12]	; (8002314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002306:	5ccb      	ldrb	r3, [r1, r3]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	080045d0 	.word	0x080045d0

08002318 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <RCC_Delay+0x34>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <RCC_Delay+0x38>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0a5b      	lsrs	r3, r3, #9
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002334:	bf00      	nop
  }
  while (Delay --);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	60fa      	str	r2, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f9      	bne.n	8002334 <RCC_Delay+0x1c>
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	20000028 	.word	0x20000028
 8002350:	10624dd3 	.word	0x10624dd3

08002354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e041      	b.n	80023ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fda0 	bl	8000ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3304      	adds	r3, #4
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f000 fc28 	bl	8002be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	d001      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e03a      	b.n	8002482 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a18      	ldr	r2, [pc, #96]	; (800248c <HAL_TIM_Base_Start_IT+0x98>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00e      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x58>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002436:	d009      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x58>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_TIM_Base_Start_IT+0x9c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d004      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x58>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a13      	ldr	r2, [pc, #76]	; (8002494 <HAL_TIM_Base_Start_IT+0xa0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d111      	bne.n	8002470 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b06      	cmp	r3, #6
 800245c:	d010      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246e:	e007      	b.n	8002480 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	40012c00 	.word	0x40012c00
 8002490:	40000400 	.word	0x40000400
 8002494:	40000800 	.word	0x40000800

08002498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e041      	b.n	800252e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f839 	bl	8002536 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 fb86 	bl	8002be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_TIM_PWM_Start+0x24>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b01      	cmp	r3, #1
 8002562:	bf14      	ite	ne
 8002564:	2301      	movne	r3, #1
 8002566:	2300      	moveq	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e022      	b.n	80025b2 <HAL_TIM_PWM_Start+0x6a>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b04      	cmp	r3, #4
 8002570:	d109      	bne.n	8002586 <HAL_TIM_PWM_Start+0x3e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b01      	cmp	r3, #1
 800257c:	bf14      	ite	ne
 800257e:	2301      	movne	r3, #1
 8002580:	2300      	moveq	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	e015      	b.n	80025b2 <HAL_TIM_PWM_Start+0x6a>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d109      	bne.n	80025a0 <HAL_TIM_PWM_Start+0x58>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	bf14      	ite	ne
 8002598:	2301      	movne	r3, #1
 800259a:	2300      	moveq	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	e008      	b.n	80025b2 <HAL_TIM_PWM_Start+0x6a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e05e      	b.n	8002678 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <HAL_TIM_PWM_Start+0x82>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c8:	e013      	b.n	80025f2 <HAL_TIM_PWM_Start+0xaa>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d104      	bne.n	80025da <HAL_TIM_PWM_Start+0x92>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025d8:	e00b      	b.n	80025f2 <HAL_TIM_PWM_Start+0xaa>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d104      	bne.n	80025ea <HAL_TIM_PWM_Start+0xa2>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e8:	e003      	b.n	80025f2 <HAL_TIM_PWM_Start+0xaa>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2202      	movs	r2, #2
 80025ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	6839      	ldr	r1, [r7, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fd74 	bl	80030e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <HAL_TIM_PWM_Start+0x138>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d107      	bne.n	800261a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <HAL_TIM_PWM_Start+0x138>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00e      	beq.n	8002642 <HAL_TIM_PWM_Start+0xfa>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262c:	d009      	beq.n	8002642 <HAL_TIM_PWM_Start+0xfa>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a14      	ldr	r2, [pc, #80]	; (8002684 <HAL_TIM_PWM_Start+0x13c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d004      	beq.n	8002642 <HAL_TIM_PWM_Start+0xfa>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a12      	ldr	r2, [pc, #72]	; (8002688 <HAL_TIM_PWM_Start+0x140>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d111      	bne.n	8002666 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b06      	cmp	r3, #6
 8002652:	d010      	beq.n	8002676 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002664:	e007      	b.n	8002676 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40012c00 	.word	0x40012c00
 8002684:	40000400 	.word	0x40000400
 8002688:	40000800 	.word	0x40000800

0800268c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d122      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d11b      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0202 	mvn.w	r2, #2
 80026b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa6f 	bl	8002bb2 <HAL_TIM_IC_CaptureCallback>
 80026d4:	e005      	b.n	80026e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fa62 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fa71 	bl	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d122      	bne.n	800273c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b04      	cmp	r3, #4
 8002702:	d11b      	bne.n	800273c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0204 	mvn.w	r2, #4
 800270c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fa45 	bl	8002bb2 <HAL_TIM_IC_CaptureCallback>
 8002728:	e005      	b.n	8002736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fa38 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fa47 	bl	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b08      	cmp	r3, #8
 8002748:	d122      	bne.n	8002790 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b08      	cmp	r3, #8
 8002756:	d11b      	bne.n	8002790 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0208 	mvn.w	r2, #8
 8002760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2204      	movs	r2, #4
 8002766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa1b 	bl	8002bb2 <HAL_TIM_IC_CaptureCallback>
 800277c:	e005      	b.n	800278a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fa0e 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fa1d 	bl	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b10      	cmp	r3, #16
 800279c:	d122      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d11b      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0210 	mvn.w	r2, #16
 80027b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2208      	movs	r2, #8
 80027ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f9f1 	bl	8002bb2 <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f9e4 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f9f3 	bl	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d10e      	bne.n	8002810 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0201 	mvn.w	r2, #1
 8002808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fd64 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	2b80      	cmp	r3, #128	; 0x80
 800281c:	d10e      	bne.n	800283c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d107      	bne.n	800283c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fce1 	bl	80031fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d107      	bne.n	8002868 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f9b7 	bl	8002bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b20      	cmp	r3, #32
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b20      	cmp	r3, #32
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0220 	mvn.w	r2, #32
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fcac 	bl	80031ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e0ac      	b.n	8002a10 <HAL_TIM_PWM_ConfigChannel+0x174>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	f200 809f 	bhi.w	8002a04 <HAL_TIM_PWM_ConfigChannel+0x168>
 80028c6:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80028c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028cc:	08002901 	.word	0x08002901
 80028d0:	08002a05 	.word	0x08002a05
 80028d4:	08002a05 	.word	0x08002a05
 80028d8:	08002a05 	.word	0x08002a05
 80028dc:	08002941 	.word	0x08002941
 80028e0:	08002a05 	.word	0x08002a05
 80028e4:	08002a05 	.word	0x08002a05
 80028e8:	08002a05 	.word	0x08002a05
 80028ec:	08002983 	.word	0x08002983
 80028f0:	08002a05 	.word	0x08002a05
 80028f4:	08002a05 	.word	0x08002a05
 80028f8:	08002a05 	.word	0x08002a05
 80028fc:	080029c3 	.word	0x080029c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f9d0 	bl	8002cac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0208 	orr.w	r2, r2, #8
 800291a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0204 	bic.w	r2, r2, #4
 800292a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6999      	ldr	r1, [r3, #24]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	619a      	str	r2, [r3, #24]
      break;
 800293e:	e062      	b.n	8002a06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fa16 	bl	8002d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800295a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6999      	ldr	r1, [r3, #24]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	021a      	lsls	r2, r3, #8
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	619a      	str	r2, [r3, #24]
      break;
 8002980:	e041      	b.n	8002a06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fa5f 	bl	8002e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0208 	orr.w	r2, r2, #8
 800299c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0204 	bic.w	r2, r2, #4
 80029ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69d9      	ldr	r1, [r3, #28]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	61da      	str	r2, [r3, #28]
      break;
 80029c0:	e021      	b.n	8002a06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 faa9 	bl	8002f20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69d9      	ldr	r1, [r3, #28]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	021a      	lsls	r2, r3, #8
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	61da      	str	r2, [r3, #28]
      break;
 8002a02:	e000      	b.n	8002a06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002a04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_TIM_ConfigClockSource+0x18>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e0b3      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x180>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a68:	d03e      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0xd0>
 8002a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6e:	f200 8087 	bhi.w	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a76:	f000 8085 	beq.w	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7e:	d87f      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002a80:	2b70      	cmp	r3, #112	; 0x70
 8002a82:	d01a      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0xa2>
 8002a84:	2b70      	cmp	r3, #112	; 0x70
 8002a86:	d87b      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002a88:	2b60      	cmp	r3, #96	; 0x60
 8002a8a:	d050      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0x116>
 8002a8c:	2b60      	cmp	r3, #96	; 0x60
 8002a8e:	d877      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002a90:	2b50      	cmp	r3, #80	; 0x50
 8002a92:	d03c      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0xf6>
 8002a94:	2b50      	cmp	r3, #80	; 0x50
 8002a96:	d873      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d058      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0x136>
 8002a9c:	2b40      	cmp	r3, #64	; 0x40
 8002a9e:	d86f      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002aa0:	2b30      	cmp	r3, #48	; 0x30
 8002aa2:	d064      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x156>
 8002aa4:	2b30      	cmp	r3, #48	; 0x30
 8002aa6:	d86b      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d060      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x156>
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d867      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d05c      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x156>
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d05a      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ab8:	e062      	b.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6899      	ldr	r1, [r3, #8]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f000 faee 	bl	80030aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002adc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	609a      	str	r2, [r3, #8]
      break;
 8002ae6:	e04e      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6899      	ldr	r1, [r3, #8]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f000 fad7 	bl	80030aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b0a:	609a      	str	r2, [r3, #8]
      break;
 8002b0c:	e03b      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6859      	ldr	r1, [r3, #4]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f000 fa4e 	bl	8002fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2150      	movs	r1, #80	; 0x50
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 faa5 	bl	8003076 <TIM_ITRx_SetConfig>
      break;
 8002b2c:	e02b      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f000 fa6c 	bl	8003018 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2160      	movs	r1, #96	; 0x60
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fa95 	bl	8003076 <TIM_ITRx_SetConfig>
      break;
 8002b4c:	e01b      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6859      	ldr	r1, [r3, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f000 fa2e 	bl	8002fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2140      	movs	r1, #64	; 0x40
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fa85 	bl	8003076 <TIM_ITRx_SetConfig>
      break;
 8002b6c:	e00b      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f000 fa7c 	bl	8003076 <TIM_ITRx_SetConfig>
        break;
 8002b7e:	e002      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b80:	bf00      	nop
 8002b82:	e000      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a29      	ldr	r2, [pc, #164]	; (8002ca0 <TIM_Base_SetConfig+0xb8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00b      	beq.n	8002c18 <TIM_Base_SetConfig+0x30>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c06:	d007      	beq.n	8002c18 <TIM_Base_SetConfig+0x30>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <TIM_Base_SetConfig+0xbc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d003      	beq.n	8002c18 <TIM_Base_SetConfig+0x30>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <TIM_Base_SetConfig+0xc0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d108      	bne.n	8002c2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <TIM_Base_SetConfig+0xb8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00b      	beq.n	8002c4a <TIM_Base_SetConfig+0x62>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d007      	beq.n	8002c4a <TIM_Base_SetConfig+0x62>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <TIM_Base_SetConfig+0xbc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_Base_SetConfig+0x62>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <TIM_Base_SetConfig+0xc0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d108      	bne.n	8002c5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <TIM_Base_SetConfig+0xb8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d103      	bne.n	8002c90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	615a      	str	r2, [r3, #20]
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40000800 	.word	0x40000800

08002cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f023 0201 	bic.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0303 	bic.w	r3, r3, #3
 8002ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f023 0302 	bic.w	r3, r3, #2
 8002cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <TIM_OC1_SetConfig+0xc8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d10c      	bne.n	8002d22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f023 0308 	bic.w	r3, r3, #8
 8002d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f023 0304 	bic.w	r3, r3, #4
 8002d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <TIM_OC1_SetConfig+0xc8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d111      	bne.n	8002d4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	621a      	str	r2, [r3, #32]
}
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40012c00 	.word	0x40012c00

08002d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f023 0210 	bic.w	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f023 0320 	bic.w	r3, r3, #32
 8002dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <TIM_OC2_SetConfig+0xd0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d10d      	bne.n	8002df4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <TIM_OC2_SetConfig+0xd0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d113      	bne.n	8002e24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	621a      	str	r2, [r3, #32]
}
 8002e3e:	bf00      	nop
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	40012c00 	.word	0x40012c00

08002e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0303 	bic.w	r3, r3, #3
 8002e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <TIM_OC3_SetConfig+0xd0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d10d      	bne.n	8002ec6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <TIM_OC3_SetConfig+0xd0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d113      	bne.n	8002ef6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	621a      	str	r2, [r3, #32]
}
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40012c00 	.word	0x40012c00

08002f20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	031b      	lsls	r3, r3, #12
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <TIM_OC4_SetConfig+0x98>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d109      	bne.n	8002f94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	019b      	lsls	r3, r3, #6
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	621a      	str	r2, [r3, #32]
}
 8002fae:	bf00      	nop
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00

08002fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	f023 0201 	bic.w	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f023 030a 	bic.w	r3, r3, #10
 8002ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	621a      	str	r2, [r3, #32]
}
 800300e:	bf00      	nop
 8003010:	371c      	adds	r7, #28
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f023 0210 	bic.w	r2, r3, #16
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003042:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	031b      	lsls	r3, r3, #12
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003054:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	621a      	str	r2, [r3, #32]
}
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003076:	b480      	push	{r7}
 8003078:	b085      	sub	sp, #20
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	f043 0307 	orr.w	r3, r3, #7
 8003098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	609a      	str	r2, [r3, #8]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b087      	sub	sp, #28
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	021a      	lsls	r2, r3, #8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	609a      	str	r2, [r3, #8]
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2201      	movs	r2, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1a      	ldr	r2, [r3, #32]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	43db      	mvns	r3, r3
 800310a:	401a      	ands	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1a      	ldr	r2, [r3, #32]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	431a      	orrs	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003144:	2302      	movs	r3, #2
 8003146:	e046      	b.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00e      	beq.n	80031aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003194:	d009      	beq.n	80031aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a10      	ldr	r2, [pc, #64]	; (80031e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d10c      	bne.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40000400 	.word	0x40000400
 80031e8:	40000800 	.word	0x40000800

080031ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e03f      	b.n	80032a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd feb4 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2224      	movs	r2, #36	; 0x24
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003252:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fc85 	bl	8003b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003278:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003288:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b08a      	sub	sp, #40	; 0x28
 80032ae:	af02      	add	r7, sp, #8
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d17c      	bne.n	80033c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_UART_Transmit+0x2c>
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e075      	b.n	80033c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_UART_Transmit+0x3e>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e06e      	b.n	80033c6 <HAL_UART_Transmit+0x11c>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2221      	movs	r2, #33	; 0x21
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032fe:	f7fe f87b 	bl	80013f8 <HAL_GetTick>
 8003302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	88fa      	ldrh	r2, [r7, #6]
 800330e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003318:	d108      	bne.n	800332c <HAL_UART_Transmit+0x82>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d104      	bne.n	800332c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	e003      	b.n	8003334 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800333c:	e02a      	b.n	8003394 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fa38 	bl	80037be <UART_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e036      	b.n	80033c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10b      	bne.n	8003376 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800336c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	3302      	adds	r3, #2
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	e007      	b.n	8003386 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	3301      	adds	r3, #1
 8003384:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1cf      	bne.n	800333e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2200      	movs	r2, #0
 80033a6:	2140      	movs	r1, #64	; 0x40
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fa08 	bl	80037be <UART_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e006      	b.n	80033c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e000      	b.n	80033c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	4613      	mov	r3, r2
 80033da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d11d      	bne.n	8003424 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_UART_Receive_IT+0x26>
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e016      	b.n	8003426 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_UART_Receive_IT+0x38>
 8003402:	2302      	movs	r3, #2
 8003404:	e00f      	b.n	8003426 <HAL_UART_Receive_IT+0x58>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	461a      	mov	r2, r3
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fa19 	bl	8003852 <UART_Start_Receive_IT>
 8003420:	4603      	mov	r3, r0
 8003422:	e000      	b.n	8003426 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003450:	2300      	movs	r3, #0
 8003452:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_UART_IRQHandler+0x52>
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fac9 	bl	8003a12 <UART_Receive_IT>
      return;
 8003480:	e17b      	b.n	800377a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80b1 	beq.w	80035ec <HAL_UART_IRQHandler+0x1bc>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_UART_IRQHandler+0x70>
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80a6 	beq.w	80035ec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_UART_IRQHandler+0x90>
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f043 0201 	orr.w	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_UART_IRQHandler+0xb0>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f043 0202 	orr.w	r2, r3, #2
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_UART_IRQHandler+0xd0>
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00f      	beq.n	800352a <HAL_UART_IRQHandler+0xfa>
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <HAL_UART_IRQHandler+0xee>
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f043 0208 	orr.w	r2, r3, #8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 811e 	beq.w	8003770 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <HAL_UART_IRQHandler+0x11e>
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fa62 	bl	8003a12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <HAL_UART_IRQHandler+0x146>
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d031      	beq.n	80035da <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f9a4 	bl	80038c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d023      	beq.n	80035d2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003598:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d013      	beq.n	80035ca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	4a76      	ldr	r2, [pc, #472]	; (8003780 <HAL_UART_IRQHandler+0x350>)
 80035a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe f874 	bl	800169c <HAL_DMA_Abort_IT>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d016      	beq.n	80035e8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035c4:	4610      	mov	r0, r2
 80035c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	e00e      	b.n	80035e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8e3 	bl	8003796 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d0:	e00a      	b.n	80035e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8df 	bl	8003796 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d8:	e006      	b.n	80035e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8db 	bl	8003796 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035e6:	e0c3      	b.n	8003770 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e8:	bf00      	nop
    return;
 80035ea:	e0c1      	b.n	8003770 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	f040 80a1 	bne.w	8003738 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 809b 	beq.w	8003738 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8095 	beq.w	8003738 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d04e      	beq.n	80036d0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800363c:	8a3b      	ldrh	r3, [r7, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8098 	beq.w	8003774 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003648:	8a3a      	ldrh	r2, [r7, #16]
 800364a:	429a      	cmp	r2, r3
 800364c:	f080 8092 	bcs.w	8003774 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8a3a      	ldrh	r2, [r7, #16]
 8003654:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b20      	cmp	r3, #32
 800365e:	d02b      	beq.n	80036b8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800366e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695a      	ldr	r2, [r3, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0210 	bic.w	r2, r2, #16
 80036ac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd ffb7 	bl	8001626 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f86d 	bl	80037a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036ce:	e051      	b.n	8003774 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036d8:	b29b      	uxth	r3, r3
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d047      	beq.n	8003778 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80036e8:	8a7b      	ldrh	r3, [r7, #18]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d044      	beq.n	8003778 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036fc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0210 	bic.w	r2, r2, #16
 800372a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800372c:	8a7b      	ldrh	r3, [r7, #18]
 800372e:	4619      	mov	r1, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f839 	bl	80037a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003736:	e01f      	b.n	8003778 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_UART_IRQHandler+0x324>
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f8f9 	bl	8003944 <UART_Transmit_IT>
    return;
 8003752:	e012      	b.n	800377a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <HAL_UART_IRQHandler+0x34a>
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f93a 	bl	80039e2 <UART_EndTransmit_IT>
    return;
 800376e:	e004      	b.n	800377a <HAL_UART_IRQHandler+0x34a>
    return;
 8003770:	bf00      	nop
 8003772:	e002      	b.n	800377a <HAL_UART_IRQHandler+0x34a>
      return;
 8003774:	bf00      	nop
 8003776:	e000      	b.n	800377a <HAL_UART_IRQHandler+0x34a>
      return;
 8003778:	bf00      	nop
  }
}
 800377a:	3728      	adds	r7, #40	; 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	0800391d 	.word	0x0800391d

08003784 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	603b      	str	r3, [r7, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ce:	e02c      	b.n	800382a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d6:	d028      	beq.n	800382a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <UART_WaitOnFlagUntilTimeout+0x30>
 80037de:	f7fd fe0b 	bl	80013f8 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d21d      	bcs.n	800382a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e00f      	b.n	800384a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4013      	ands	r3, r2
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	429a      	cmp	r2, r3
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	429a      	cmp	r2, r3
 8003846:	d0c3      	beq.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	4613      	mov	r3, r2
 800385e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	88fa      	ldrh	r2, [r7, #6]
 800386a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2222      	movs	r2, #34	; 0x22
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003896:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0220 	orr.w	r2, r2, #32
 80038b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0210 	bic.w	r2, r2, #16
 8003902:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff ff2d 	bl	8003796 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b21      	cmp	r3, #33	; 0x21
 8003956:	d13e      	bne.n	80039d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003960:	d114      	bne.n	800398c <UART_Transmit_IT+0x48>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d110      	bne.n	800398c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800397e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	1c9a      	adds	r2, r3, #2
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	621a      	str	r2, [r3, #32]
 800398a:	e008      	b.n	800399e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	1c59      	adds	r1, r3, #1
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6211      	str	r1, [r2, #32]
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4619      	mov	r1, r3
 80039ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e000      	b.n	80039d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
  }
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff febe 	bl	8003784 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b086      	sub	sp, #24
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b22      	cmp	r3, #34	; 0x22
 8003a24:	f040 8099 	bne.w	8003b5a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a30:	d117      	bne.n	8003a62 <UART_Receive_IT+0x50>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d113      	bne.n	8003a62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	1c9a      	adds	r2, r3, #2
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a60:	e026      	b.n	8003ab0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a74:	d007      	beq.n	8003a86 <UART_Receive_IT+0x74>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <UART_Receive_IT+0x82>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e008      	b.n	8003aa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4619      	mov	r1, r3
 8003abe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d148      	bne.n	8003b56 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0220 	bic.w	r2, r2, #32
 8003ad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d123      	bne.n	8003b4c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0210 	bic.w	r2, r2, #16
 8003b18:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d10a      	bne.n	8003b3e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fe2f 	bl	80037a8 <HAL_UARTEx_RxEventCallback>
 8003b4a:	e002      	b.n	8003b52 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7fc ffa3 	bl	8000a98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e002      	b.n	8003b5c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e000      	b.n	8003b5c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
  }
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b9e:	f023 030c 	bic.w	r3, r3, #12
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2c      	ldr	r2, [pc, #176]	; (8003c78 <UART_SetConfig+0x114>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d103      	bne.n	8003bd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bcc:	f7fe fb90 	bl	80022f0 <HAL_RCC_GetPCLK2Freq>
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	e002      	b.n	8003bda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bd4:	f7fe fb78 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 8003bd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	009a      	lsls	r2, r3, #2
 8003be4:	441a      	add	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <UART_SetConfig+0x118>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	0119      	lsls	r1, r3, #4
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009a      	lsls	r2, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <UART_SetConfig+0x118>)
 8003c12:	fba3 0302 	umull	r0, r3, r3, r2
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	2064      	movs	r0, #100	; 0x64
 8003c1a:	fb00 f303 	mul.w	r3, r0, r3
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	3332      	adds	r3, #50	; 0x32
 8003c24:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <UART_SetConfig+0x118>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c30:	4419      	add	r1, r3
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009a      	lsls	r2, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <UART_SetConfig+0x118>)
 8003c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2064      	movs	r0, #100	; 0x64
 8003c52:	fb00 f303 	mul.w	r3, r0, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	3332      	adds	r3, #50	; 0x32
 8003c5c:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <UART_SetConfig+0x118>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	f003 020f 	and.w	r2, r3, #15
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40013800 	.word	0x40013800
 8003c7c:	51eb851f 	.word	0x51eb851f

08003c80 <__errno>:
 8003c80:	4b01      	ldr	r3, [pc, #4]	; (8003c88 <__errno+0x8>)
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000034 	.word	0x20000034

08003c8c <__libc_init_array>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	2600      	movs	r6, #0
 8003c90:	4d0c      	ldr	r5, [pc, #48]	; (8003cc4 <__libc_init_array+0x38>)
 8003c92:	4c0d      	ldr	r4, [pc, #52]	; (8003cc8 <__libc_init_array+0x3c>)
 8003c94:	1b64      	subs	r4, r4, r5
 8003c96:	10a4      	asrs	r4, r4, #2
 8003c98:	42a6      	cmp	r6, r4
 8003c9a:	d109      	bne.n	8003cb0 <__libc_init_array+0x24>
 8003c9c:	f000 fc5c 	bl	8004558 <_init>
 8003ca0:	2600      	movs	r6, #0
 8003ca2:	4d0a      	ldr	r5, [pc, #40]	; (8003ccc <__libc_init_array+0x40>)
 8003ca4:	4c0a      	ldr	r4, [pc, #40]	; (8003cd0 <__libc_init_array+0x44>)
 8003ca6:	1b64      	subs	r4, r4, r5
 8003ca8:	10a4      	asrs	r4, r4, #2
 8003caa:	42a6      	cmp	r6, r4
 8003cac:	d105      	bne.n	8003cba <__libc_init_array+0x2e>
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb4:	4798      	blx	r3
 8003cb6:	3601      	adds	r6, #1
 8003cb8:	e7ee      	b.n	8003c98 <__libc_init_array+0xc>
 8003cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbe:	4798      	blx	r3
 8003cc0:	3601      	adds	r6, #1
 8003cc2:	e7f2      	b.n	8003caa <__libc_init_array+0x1e>
 8003cc4:	0800460c 	.word	0x0800460c
 8003cc8:	0800460c 	.word	0x0800460c
 8003ccc:	0800460c 	.word	0x0800460c
 8003cd0:	08004610 	.word	0x08004610

08003cd4 <memset>:
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4402      	add	r2, r0
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d100      	bne.n	8003cde <memset+0xa>
 8003cdc:	4770      	bx	lr
 8003cde:	f803 1b01 	strb.w	r1, [r3], #1
 8003ce2:	e7f9      	b.n	8003cd8 <memset+0x4>

08003ce4 <siprintf>:
 8003ce4:	b40e      	push	{r1, r2, r3}
 8003ce6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cea:	b500      	push	{lr}
 8003cec:	b09c      	sub	sp, #112	; 0x70
 8003cee:	ab1d      	add	r3, sp, #116	; 0x74
 8003cf0:	9002      	str	r0, [sp, #8]
 8003cf2:	9006      	str	r0, [sp, #24]
 8003cf4:	9107      	str	r1, [sp, #28]
 8003cf6:	9104      	str	r1, [sp, #16]
 8003cf8:	4808      	ldr	r0, [pc, #32]	; (8003d1c <siprintf+0x38>)
 8003cfa:	4909      	ldr	r1, [pc, #36]	; (8003d20 <siprintf+0x3c>)
 8003cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d00:	9105      	str	r1, [sp, #20]
 8003d02:	6800      	ldr	r0, [r0, #0]
 8003d04:	a902      	add	r1, sp, #8
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	f000 f868 	bl	8003ddc <_svfiprintf_r>
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	9b02      	ldr	r3, [sp, #8]
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	b01c      	add	sp, #112	; 0x70
 8003d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d18:	b003      	add	sp, #12
 8003d1a:	4770      	bx	lr
 8003d1c:	20000034 	.word	0x20000034
 8003d20:	ffff0208 	.word	0xffff0208

08003d24 <__ssputs_r>:
 8003d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d28:	688e      	ldr	r6, [r1, #8]
 8003d2a:	4682      	mov	sl, r0
 8003d2c:	429e      	cmp	r6, r3
 8003d2e:	460c      	mov	r4, r1
 8003d30:	4690      	mov	r8, r2
 8003d32:	461f      	mov	r7, r3
 8003d34:	d838      	bhi.n	8003da8 <__ssputs_r+0x84>
 8003d36:	898a      	ldrh	r2, [r1, #12]
 8003d38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d3c:	d032      	beq.n	8003da4 <__ssputs_r+0x80>
 8003d3e:	6825      	ldr	r5, [r4, #0]
 8003d40:	6909      	ldr	r1, [r1, #16]
 8003d42:	3301      	adds	r3, #1
 8003d44:	eba5 0901 	sub.w	r9, r5, r1
 8003d48:	6965      	ldr	r5, [r4, #20]
 8003d4a:	444b      	add	r3, r9
 8003d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d54:	106d      	asrs	r5, r5, #1
 8003d56:	429d      	cmp	r5, r3
 8003d58:	bf38      	it	cc
 8003d5a:	461d      	movcc	r5, r3
 8003d5c:	0553      	lsls	r3, r2, #21
 8003d5e:	d531      	bpl.n	8003dc4 <__ssputs_r+0xa0>
 8003d60:	4629      	mov	r1, r5
 8003d62:	f000 fb53 	bl	800440c <_malloc_r>
 8003d66:	4606      	mov	r6, r0
 8003d68:	b950      	cbnz	r0, 8003d80 <__ssputs_r+0x5c>
 8003d6a:	230c      	movs	r3, #12
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d70:	f8ca 3000 	str.w	r3, [sl]
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d7a:	81a3      	strh	r3, [r4, #12]
 8003d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d80:	464a      	mov	r2, r9
 8003d82:	6921      	ldr	r1, [r4, #16]
 8003d84:	f000 face 	bl	8004324 <memcpy>
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d92:	81a3      	strh	r3, [r4, #12]
 8003d94:	6126      	str	r6, [r4, #16]
 8003d96:	444e      	add	r6, r9
 8003d98:	6026      	str	r6, [r4, #0]
 8003d9a:	463e      	mov	r6, r7
 8003d9c:	6165      	str	r5, [r4, #20]
 8003d9e:	eba5 0509 	sub.w	r5, r5, r9
 8003da2:	60a5      	str	r5, [r4, #8]
 8003da4:	42be      	cmp	r6, r7
 8003da6:	d900      	bls.n	8003daa <__ssputs_r+0x86>
 8003da8:	463e      	mov	r6, r7
 8003daa:	4632      	mov	r2, r6
 8003dac:	4641      	mov	r1, r8
 8003dae:	6820      	ldr	r0, [r4, #0]
 8003db0:	f000 fac6 	bl	8004340 <memmove>
 8003db4:	68a3      	ldr	r3, [r4, #8]
 8003db6:	6822      	ldr	r2, [r4, #0]
 8003db8:	1b9b      	subs	r3, r3, r6
 8003dba:	4432      	add	r2, r6
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	60a3      	str	r3, [r4, #8]
 8003dc0:	6022      	str	r2, [r4, #0]
 8003dc2:	e7db      	b.n	8003d7c <__ssputs_r+0x58>
 8003dc4:	462a      	mov	r2, r5
 8003dc6:	f000 fb7b 	bl	80044c0 <_realloc_r>
 8003dca:	4606      	mov	r6, r0
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	d1e1      	bne.n	8003d94 <__ssputs_r+0x70>
 8003dd0:	4650      	mov	r0, sl
 8003dd2:	6921      	ldr	r1, [r4, #16]
 8003dd4:	f000 face 	bl	8004374 <_free_r>
 8003dd8:	e7c7      	b.n	8003d6a <__ssputs_r+0x46>
	...

08003ddc <_svfiprintf_r>:
 8003ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de0:	4698      	mov	r8, r3
 8003de2:	898b      	ldrh	r3, [r1, #12]
 8003de4:	4607      	mov	r7, r0
 8003de6:	061b      	lsls	r3, r3, #24
 8003de8:	460d      	mov	r5, r1
 8003dea:	4614      	mov	r4, r2
 8003dec:	b09d      	sub	sp, #116	; 0x74
 8003dee:	d50e      	bpl.n	8003e0e <_svfiprintf_r+0x32>
 8003df0:	690b      	ldr	r3, [r1, #16]
 8003df2:	b963      	cbnz	r3, 8003e0e <_svfiprintf_r+0x32>
 8003df4:	2140      	movs	r1, #64	; 0x40
 8003df6:	f000 fb09 	bl	800440c <_malloc_r>
 8003dfa:	6028      	str	r0, [r5, #0]
 8003dfc:	6128      	str	r0, [r5, #16]
 8003dfe:	b920      	cbnz	r0, 8003e0a <_svfiprintf_r+0x2e>
 8003e00:	230c      	movs	r3, #12
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	e0d1      	b.n	8003fae <_svfiprintf_r+0x1d2>
 8003e0a:	2340      	movs	r3, #64	; 0x40
 8003e0c:	616b      	str	r3, [r5, #20]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9309      	str	r3, [sp, #36]	; 0x24
 8003e12:	2320      	movs	r3, #32
 8003e14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e18:	2330      	movs	r3, #48	; 0x30
 8003e1a:	f04f 0901 	mov.w	r9, #1
 8003e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fc8 <_svfiprintf_r+0x1ec>
 8003e26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	469a      	mov	sl, r3
 8003e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e32:	b10a      	cbz	r2, 8003e38 <_svfiprintf_r+0x5c>
 8003e34:	2a25      	cmp	r2, #37	; 0x25
 8003e36:	d1f9      	bne.n	8003e2c <_svfiprintf_r+0x50>
 8003e38:	ebba 0b04 	subs.w	fp, sl, r4
 8003e3c:	d00b      	beq.n	8003e56 <_svfiprintf_r+0x7a>
 8003e3e:	465b      	mov	r3, fp
 8003e40:	4622      	mov	r2, r4
 8003e42:	4629      	mov	r1, r5
 8003e44:	4638      	mov	r0, r7
 8003e46:	f7ff ff6d 	bl	8003d24 <__ssputs_r>
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	f000 80aa 	beq.w	8003fa4 <_svfiprintf_r+0x1c8>
 8003e50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e52:	445a      	add	r2, fp
 8003e54:	9209      	str	r2, [sp, #36]	; 0x24
 8003e56:	f89a 3000 	ldrb.w	r3, [sl]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80a2 	beq.w	8003fa4 <_svfiprintf_r+0x1c8>
 8003e60:	2300      	movs	r3, #0
 8003e62:	f04f 32ff 	mov.w	r2, #4294967295
 8003e66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e6a:	f10a 0a01 	add.w	sl, sl, #1
 8003e6e:	9304      	str	r3, [sp, #16]
 8003e70:	9307      	str	r3, [sp, #28]
 8003e72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e76:	931a      	str	r3, [sp, #104]	; 0x68
 8003e78:	4654      	mov	r4, sl
 8003e7a:	2205      	movs	r2, #5
 8003e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e80:	4851      	ldr	r0, [pc, #324]	; (8003fc8 <_svfiprintf_r+0x1ec>)
 8003e82:	f000 fa41 	bl	8004308 <memchr>
 8003e86:	9a04      	ldr	r2, [sp, #16]
 8003e88:	b9d8      	cbnz	r0, 8003ec2 <_svfiprintf_r+0xe6>
 8003e8a:	06d0      	lsls	r0, r2, #27
 8003e8c:	bf44      	itt	mi
 8003e8e:	2320      	movmi	r3, #32
 8003e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e94:	0711      	lsls	r1, r2, #28
 8003e96:	bf44      	itt	mi
 8003e98:	232b      	movmi	r3, #43	; 0x2b
 8003e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea4:	d015      	beq.n	8003ed2 <_svfiprintf_r+0xf6>
 8003ea6:	4654      	mov	r4, sl
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f04f 0c0a 	mov.w	ip, #10
 8003eae:	9a07      	ldr	r2, [sp, #28]
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eb6:	3b30      	subs	r3, #48	; 0x30
 8003eb8:	2b09      	cmp	r3, #9
 8003eba:	d94e      	bls.n	8003f5a <_svfiprintf_r+0x17e>
 8003ebc:	b1b0      	cbz	r0, 8003eec <_svfiprintf_r+0x110>
 8003ebe:	9207      	str	r2, [sp, #28]
 8003ec0:	e014      	b.n	8003eec <_svfiprintf_r+0x110>
 8003ec2:	eba0 0308 	sub.w	r3, r0, r8
 8003ec6:	fa09 f303 	lsl.w	r3, r9, r3
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	46a2      	mov	sl, r4
 8003ece:	9304      	str	r3, [sp, #16]
 8003ed0:	e7d2      	b.n	8003e78 <_svfiprintf_r+0x9c>
 8003ed2:	9b03      	ldr	r3, [sp, #12]
 8003ed4:	1d19      	adds	r1, r3, #4
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	9103      	str	r1, [sp, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bfbb      	ittet	lt
 8003ede:	425b      	neglt	r3, r3
 8003ee0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ee4:	9307      	strge	r3, [sp, #28]
 8003ee6:	9307      	strlt	r3, [sp, #28]
 8003ee8:	bfb8      	it	lt
 8003eea:	9204      	strlt	r2, [sp, #16]
 8003eec:	7823      	ldrb	r3, [r4, #0]
 8003eee:	2b2e      	cmp	r3, #46	; 0x2e
 8003ef0:	d10c      	bne.n	8003f0c <_svfiprintf_r+0x130>
 8003ef2:	7863      	ldrb	r3, [r4, #1]
 8003ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef6:	d135      	bne.n	8003f64 <_svfiprintf_r+0x188>
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	3402      	adds	r4, #2
 8003efc:	1d1a      	adds	r2, r3, #4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	9203      	str	r2, [sp, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bfb8      	it	lt
 8003f06:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f0a:	9305      	str	r3, [sp, #20]
 8003f0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fd8 <_svfiprintf_r+0x1fc>
 8003f10:	2203      	movs	r2, #3
 8003f12:	4650      	mov	r0, sl
 8003f14:	7821      	ldrb	r1, [r4, #0]
 8003f16:	f000 f9f7 	bl	8004308 <memchr>
 8003f1a:	b140      	cbz	r0, 8003f2e <_svfiprintf_r+0x152>
 8003f1c:	2340      	movs	r3, #64	; 0x40
 8003f1e:	eba0 000a 	sub.w	r0, r0, sl
 8003f22:	fa03 f000 	lsl.w	r0, r3, r0
 8003f26:	9b04      	ldr	r3, [sp, #16]
 8003f28:	3401      	adds	r4, #1
 8003f2a:	4303      	orrs	r3, r0
 8003f2c:	9304      	str	r3, [sp, #16]
 8003f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f32:	2206      	movs	r2, #6
 8003f34:	4825      	ldr	r0, [pc, #148]	; (8003fcc <_svfiprintf_r+0x1f0>)
 8003f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f3a:	f000 f9e5 	bl	8004308 <memchr>
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	d038      	beq.n	8003fb4 <_svfiprintf_r+0x1d8>
 8003f42:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <_svfiprintf_r+0x1f4>)
 8003f44:	bb1b      	cbnz	r3, 8003f8e <_svfiprintf_r+0x1b2>
 8003f46:	9b03      	ldr	r3, [sp, #12]
 8003f48:	3307      	adds	r3, #7
 8003f4a:	f023 0307 	bic.w	r3, r3, #7
 8003f4e:	3308      	adds	r3, #8
 8003f50:	9303      	str	r3, [sp, #12]
 8003f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f54:	4433      	add	r3, r6
 8003f56:	9309      	str	r3, [sp, #36]	; 0x24
 8003f58:	e767      	b.n	8003e2a <_svfiprintf_r+0x4e>
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f62:	e7a5      	b.n	8003eb0 <_svfiprintf_r+0xd4>
 8003f64:	2300      	movs	r3, #0
 8003f66:	f04f 0c0a 	mov.w	ip, #10
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	3401      	adds	r4, #1
 8003f6e:	9305      	str	r3, [sp, #20]
 8003f70:	4620      	mov	r0, r4
 8003f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f76:	3a30      	subs	r2, #48	; 0x30
 8003f78:	2a09      	cmp	r2, #9
 8003f7a:	d903      	bls.n	8003f84 <_svfiprintf_r+0x1a8>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0c5      	beq.n	8003f0c <_svfiprintf_r+0x130>
 8003f80:	9105      	str	r1, [sp, #20]
 8003f82:	e7c3      	b.n	8003f0c <_svfiprintf_r+0x130>
 8003f84:	4604      	mov	r4, r0
 8003f86:	2301      	movs	r3, #1
 8003f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f8c:	e7f0      	b.n	8003f70 <_svfiprintf_r+0x194>
 8003f8e:	ab03      	add	r3, sp, #12
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	462a      	mov	r2, r5
 8003f94:	4638      	mov	r0, r7
 8003f96:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <_svfiprintf_r+0x1f8>)
 8003f98:	a904      	add	r1, sp, #16
 8003f9a:	f3af 8000 	nop.w
 8003f9e:	1c42      	adds	r2, r0, #1
 8003fa0:	4606      	mov	r6, r0
 8003fa2:	d1d6      	bne.n	8003f52 <_svfiprintf_r+0x176>
 8003fa4:	89ab      	ldrh	r3, [r5, #12]
 8003fa6:	065b      	lsls	r3, r3, #25
 8003fa8:	f53f af2c 	bmi.w	8003e04 <_svfiprintf_r+0x28>
 8003fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fae:	b01d      	add	sp, #116	; 0x74
 8003fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb4:	ab03      	add	r3, sp, #12
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	462a      	mov	r2, r5
 8003fba:	4638      	mov	r0, r7
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <_svfiprintf_r+0x1f8>)
 8003fbe:	a904      	add	r1, sp, #16
 8003fc0:	f000 f87c 	bl	80040bc <_printf_i>
 8003fc4:	e7eb      	b.n	8003f9e <_svfiprintf_r+0x1c2>
 8003fc6:	bf00      	nop
 8003fc8:	080045d8 	.word	0x080045d8
 8003fcc:	080045e2 	.word	0x080045e2
 8003fd0:	00000000 	.word	0x00000000
 8003fd4:	08003d25 	.word	0x08003d25
 8003fd8:	080045de 	.word	0x080045de

08003fdc <_printf_common>:
 8003fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe0:	4616      	mov	r6, r2
 8003fe2:	4699      	mov	r9, r3
 8003fe4:	688a      	ldr	r2, [r1, #8]
 8003fe6:	690b      	ldr	r3, [r1, #16]
 8003fe8:	4607      	mov	r7, r0
 8003fea:	4293      	cmp	r3, r2
 8003fec:	bfb8      	it	lt
 8003fee:	4613      	movlt	r3, r2
 8003ff0:	6033      	str	r3, [r6, #0]
 8003ff2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ffc:	b10a      	cbz	r2, 8004002 <_printf_common+0x26>
 8003ffe:	3301      	adds	r3, #1
 8004000:	6033      	str	r3, [r6, #0]
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	0699      	lsls	r1, r3, #26
 8004006:	bf42      	ittt	mi
 8004008:	6833      	ldrmi	r3, [r6, #0]
 800400a:	3302      	addmi	r3, #2
 800400c:	6033      	strmi	r3, [r6, #0]
 800400e:	6825      	ldr	r5, [r4, #0]
 8004010:	f015 0506 	ands.w	r5, r5, #6
 8004014:	d106      	bne.n	8004024 <_printf_common+0x48>
 8004016:	f104 0a19 	add.w	sl, r4, #25
 800401a:	68e3      	ldr	r3, [r4, #12]
 800401c:	6832      	ldr	r2, [r6, #0]
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	42ab      	cmp	r3, r5
 8004022:	dc28      	bgt.n	8004076 <_printf_common+0x9a>
 8004024:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004028:	1e13      	subs	r3, r2, #0
 800402a:	6822      	ldr	r2, [r4, #0]
 800402c:	bf18      	it	ne
 800402e:	2301      	movne	r3, #1
 8004030:	0692      	lsls	r2, r2, #26
 8004032:	d42d      	bmi.n	8004090 <_printf_common+0xb4>
 8004034:	4649      	mov	r1, r9
 8004036:	4638      	mov	r0, r7
 8004038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800403c:	47c0      	blx	r8
 800403e:	3001      	adds	r0, #1
 8004040:	d020      	beq.n	8004084 <_printf_common+0xa8>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	68e5      	ldr	r5, [r4, #12]
 8004046:	f003 0306 	and.w	r3, r3, #6
 800404a:	2b04      	cmp	r3, #4
 800404c:	bf18      	it	ne
 800404e:	2500      	movne	r5, #0
 8004050:	6832      	ldr	r2, [r6, #0]
 8004052:	f04f 0600 	mov.w	r6, #0
 8004056:	68a3      	ldr	r3, [r4, #8]
 8004058:	bf08      	it	eq
 800405a:	1aad      	subeq	r5, r5, r2
 800405c:	6922      	ldr	r2, [r4, #16]
 800405e:	bf08      	it	eq
 8004060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004064:	4293      	cmp	r3, r2
 8004066:	bfc4      	itt	gt
 8004068:	1a9b      	subgt	r3, r3, r2
 800406a:	18ed      	addgt	r5, r5, r3
 800406c:	341a      	adds	r4, #26
 800406e:	42b5      	cmp	r5, r6
 8004070:	d11a      	bne.n	80040a8 <_printf_common+0xcc>
 8004072:	2000      	movs	r0, #0
 8004074:	e008      	b.n	8004088 <_printf_common+0xac>
 8004076:	2301      	movs	r3, #1
 8004078:	4652      	mov	r2, sl
 800407a:	4649      	mov	r1, r9
 800407c:	4638      	mov	r0, r7
 800407e:	47c0      	blx	r8
 8004080:	3001      	adds	r0, #1
 8004082:	d103      	bne.n	800408c <_printf_common+0xb0>
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408c:	3501      	adds	r5, #1
 800408e:	e7c4      	b.n	800401a <_printf_common+0x3e>
 8004090:	2030      	movs	r0, #48	; 0x30
 8004092:	18e1      	adds	r1, r4, r3
 8004094:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800409e:	4422      	add	r2, r4
 80040a0:	3302      	adds	r3, #2
 80040a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040a6:	e7c5      	b.n	8004034 <_printf_common+0x58>
 80040a8:	2301      	movs	r3, #1
 80040aa:	4622      	mov	r2, r4
 80040ac:	4649      	mov	r1, r9
 80040ae:	4638      	mov	r0, r7
 80040b0:	47c0      	blx	r8
 80040b2:	3001      	adds	r0, #1
 80040b4:	d0e6      	beq.n	8004084 <_printf_common+0xa8>
 80040b6:	3601      	adds	r6, #1
 80040b8:	e7d9      	b.n	800406e <_printf_common+0x92>
	...

080040bc <_printf_i>:
 80040bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040c0:	460c      	mov	r4, r1
 80040c2:	7e27      	ldrb	r7, [r4, #24]
 80040c4:	4691      	mov	r9, r2
 80040c6:	2f78      	cmp	r7, #120	; 0x78
 80040c8:	4680      	mov	r8, r0
 80040ca:	469a      	mov	sl, r3
 80040cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040d2:	d807      	bhi.n	80040e4 <_printf_i+0x28>
 80040d4:	2f62      	cmp	r7, #98	; 0x62
 80040d6:	d80a      	bhi.n	80040ee <_printf_i+0x32>
 80040d8:	2f00      	cmp	r7, #0
 80040da:	f000 80d9 	beq.w	8004290 <_printf_i+0x1d4>
 80040de:	2f58      	cmp	r7, #88	; 0x58
 80040e0:	f000 80a4 	beq.w	800422c <_printf_i+0x170>
 80040e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040ec:	e03a      	b.n	8004164 <_printf_i+0xa8>
 80040ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040f2:	2b15      	cmp	r3, #21
 80040f4:	d8f6      	bhi.n	80040e4 <_printf_i+0x28>
 80040f6:	a001      	add	r0, pc, #4	; (adr r0, 80040fc <_printf_i+0x40>)
 80040f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040fc:	08004155 	.word	0x08004155
 8004100:	08004169 	.word	0x08004169
 8004104:	080040e5 	.word	0x080040e5
 8004108:	080040e5 	.word	0x080040e5
 800410c:	080040e5 	.word	0x080040e5
 8004110:	080040e5 	.word	0x080040e5
 8004114:	08004169 	.word	0x08004169
 8004118:	080040e5 	.word	0x080040e5
 800411c:	080040e5 	.word	0x080040e5
 8004120:	080040e5 	.word	0x080040e5
 8004124:	080040e5 	.word	0x080040e5
 8004128:	08004277 	.word	0x08004277
 800412c:	08004199 	.word	0x08004199
 8004130:	08004259 	.word	0x08004259
 8004134:	080040e5 	.word	0x080040e5
 8004138:	080040e5 	.word	0x080040e5
 800413c:	08004299 	.word	0x08004299
 8004140:	080040e5 	.word	0x080040e5
 8004144:	08004199 	.word	0x08004199
 8004148:	080040e5 	.word	0x080040e5
 800414c:	080040e5 	.word	0x080040e5
 8004150:	08004261 	.word	0x08004261
 8004154:	680b      	ldr	r3, [r1, #0]
 8004156:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800415a:	1d1a      	adds	r2, r3, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	600a      	str	r2, [r1, #0]
 8004160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004164:	2301      	movs	r3, #1
 8004166:	e0a4      	b.n	80042b2 <_printf_i+0x1f6>
 8004168:	6825      	ldr	r5, [r4, #0]
 800416a:	6808      	ldr	r0, [r1, #0]
 800416c:	062e      	lsls	r6, r5, #24
 800416e:	f100 0304 	add.w	r3, r0, #4
 8004172:	d50a      	bpl.n	800418a <_printf_i+0xce>
 8004174:	6805      	ldr	r5, [r0, #0]
 8004176:	600b      	str	r3, [r1, #0]
 8004178:	2d00      	cmp	r5, #0
 800417a:	da03      	bge.n	8004184 <_printf_i+0xc8>
 800417c:	232d      	movs	r3, #45	; 0x2d
 800417e:	426d      	negs	r5, r5
 8004180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004184:	230a      	movs	r3, #10
 8004186:	485e      	ldr	r0, [pc, #376]	; (8004300 <_printf_i+0x244>)
 8004188:	e019      	b.n	80041be <_printf_i+0x102>
 800418a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800418e:	6805      	ldr	r5, [r0, #0]
 8004190:	600b      	str	r3, [r1, #0]
 8004192:	bf18      	it	ne
 8004194:	b22d      	sxthne	r5, r5
 8004196:	e7ef      	b.n	8004178 <_printf_i+0xbc>
 8004198:	680b      	ldr	r3, [r1, #0]
 800419a:	6825      	ldr	r5, [r4, #0]
 800419c:	1d18      	adds	r0, r3, #4
 800419e:	6008      	str	r0, [r1, #0]
 80041a0:	0628      	lsls	r0, r5, #24
 80041a2:	d501      	bpl.n	80041a8 <_printf_i+0xec>
 80041a4:	681d      	ldr	r5, [r3, #0]
 80041a6:	e002      	b.n	80041ae <_printf_i+0xf2>
 80041a8:	0669      	lsls	r1, r5, #25
 80041aa:	d5fb      	bpl.n	80041a4 <_printf_i+0xe8>
 80041ac:	881d      	ldrh	r5, [r3, #0]
 80041ae:	2f6f      	cmp	r7, #111	; 0x6f
 80041b0:	bf0c      	ite	eq
 80041b2:	2308      	moveq	r3, #8
 80041b4:	230a      	movne	r3, #10
 80041b6:	4852      	ldr	r0, [pc, #328]	; (8004300 <_printf_i+0x244>)
 80041b8:	2100      	movs	r1, #0
 80041ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041be:	6866      	ldr	r6, [r4, #4]
 80041c0:	2e00      	cmp	r6, #0
 80041c2:	bfa8      	it	ge
 80041c4:	6821      	ldrge	r1, [r4, #0]
 80041c6:	60a6      	str	r6, [r4, #8]
 80041c8:	bfa4      	itt	ge
 80041ca:	f021 0104 	bicge.w	r1, r1, #4
 80041ce:	6021      	strge	r1, [r4, #0]
 80041d0:	b90d      	cbnz	r5, 80041d6 <_printf_i+0x11a>
 80041d2:	2e00      	cmp	r6, #0
 80041d4:	d04d      	beq.n	8004272 <_printf_i+0x1b6>
 80041d6:	4616      	mov	r6, r2
 80041d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80041dc:	fb03 5711 	mls	r7, r3, r1, r5
 80041e0:	5dc7      	ldrb	r7, [r0, r7]
 80041e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041e6:	462f      	mov	r7, r5
 80041e8:	42bb      	cmp	r3, r7
 80041ea:	460d      	mov	r5, r1
 80041ec:	d9f4      	bls.n	80041d8 <_printf_i+0x11c>
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d10b      	bne.n	800420a <_printf_i+0x14e>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	07df      	lsls	r7, r3, #31
 80041f6:	d508      	bpl.n	800420a <_printf_i+0x14e>
 80041f8:	6923      	ldr	r3, [r4, #16]
 80041fa:	6861      	ldr	r1, [r4, #4]
 80041fc:	4299      	cmp	r1, r3
 80041fe:	bfde      	ittt	le
 8004200:	2330      	movle	r3, #48	; 0x30
 8004202:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004206:	f106 36ff 	addle.w	r6, r6, #4294967295
 800420a:	1b92      	subs	r2, r2, r6
 800420c:	6122      	str	r2, [r4, #16]
 800420e:	464b      	mov	r3, r9
 8004210:	4621      	mov	r1, r4
 8004212:	4640      	mov	r0, r8
 8004214:	f8cd a000 	str.w	sl, [sp]
 8004218:	aa03      	add	r2, sp, #12
 800421a:	f7ff fedf 	bl	8003fdc <_printf_common>
 800421e:	3001      	adds	r0, #1
 8004220:	d14c      	bne.n	80042bc <_printf_i+0x200>
 8004222:	f04f 30ff 	mov.w	r0, #4294967295
 8004226:	b004      	add	sp, #16
 8004228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422c:	4834      	ldr	r0, [pc, #208]	; (8004300 <_printf_i+0x244>)
 800422e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004232:	680e      	ldr	r6, [r1, #0]
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	f856 5b04 	ldr.w	r5, [r6], #4
 800423a:	061f      	lsls	r7, r3, #24
 800423c:	600e      	str	r6, [r1, #0]
 800423e:	d514      	bpl.n	800426a <_printf_i+0x1ae>
 8004240:	07d9      	lsls	r1, r3, #31
 8004242:	bf44      	itt	mi
 8004244:	f043 0320 	orrmi.w	r3, r3, #32
 8004248:	6023      	strmi	r3, [r4, #0]
 800424a:	b91d      	cbnz	r5, 8004254 <_printf_i+0x198>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	f023 0320 	bic.w	r3, r3, #32
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	2310      	movs	r3, #16
 8004256:	e7af      	b.n	80041b8 <_printf_i+0xfc>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	f043 0320 	orr.w	r3, r3, #32
 800425e:	6023      	str	r3, [r4, #0]
 8004260:	2378      	movs	r3, #120	; 0x78
 8004262:	4828      	ldr	r0, [pc, #160]	; (8004304 <_printf_i+0x248>)
 8004264:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004268:	e7e3      	b.n	8004232 <_printf_i+0x176>
 800426a:	065e      	lsls	r6, r3, #25
 800426c:	bf48      	it	mi
 800426e:	b2ad      	uxthmi	r5, r5
 8004270:	e7e6      	b.n	8004240 <_printf_i+0x184>
 8004272:	4616      	mov	r6, r2
 8004274:	e7bb      	b.n	80041ee <_printf_i+0x132>
 8004276:	680b      	ldr	r3, [r1, #0]
 8004278:	6826      	ldr	r6, [r4, #0]
 800427a:	1d1d      	adds	r5, r3, #4
 800427c:	6960      	ldr	r0, [r4, #20]
 800427e:	600d      	str	r5, [r1, #0]
 8004280:	0635      	lsls	r5, r6, #24
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	d501      	bpl.n	800428a <_printf_i+0x1ce>
 8004286:	6018      	str	r0, [r3, #0]
 8004288:	e002      	b.n	8004290 <_printf_i+0x1d4>
 800428a:	0671      	lsls	r1, r6, #25
 800428c:	d5fb      	bpl.n	8004286 <_printf_i+0x1ca>
 800428e:	8018      	strh	r0, [r3, #0]
 8004290:	2300      	movs	r3, #0
 8004292:	4616      	mov	r6, r2
 8004294:	6123      	str	r3, [r4, #16]
 8004296:	e7ba      	b.n	800420e <_printf_i+0x152>
 8004298:	680b      	ldr	r3, [r1, #0]
 800429a:	1d1a      	adds	r2, r3, #4
 800429c:	600a      	str	r2, [r1, #0]
 800429e:	681e      	ldr	r6, [r3, #0]
 80042a0:	2100      	movs	r1, #0
 80042a2:	4630      	mov	r0, r6
 80042a4:	6862      	ldr	r2, [r4, #4]
 80042a6:	f000 f82f 	bl	8004308 <memchr>
 80042aa:	b108      	cbz	r0, 80042b0 <_printf_i+0x1f4>
 80042ac:	1b80      	subs	r0, r0, r6
 80042ae:	6060      	str	r0, [r4, #4]
 80042b0:	6863      	ldr	r3, [r4, #4]
 80042b2:	6123      	str	r3, [r4, #16]
 80042b4:	2300      	movs	r3, #0
 80042b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ba:	e7a8      	b.n	800420e <_printf_i+0x152>
 80042bc:	4632      	mov	r2, r6
 80042be:	4649      	mov	r1, r9
 80042c0:	4640      	mov	r0, r8
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	47d0      	blx	sl
 80042c6:	3001      	adds	r0, #1
 80042c8:	d0ab      	beq.n	8004222 <_printf_i+0x166>
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	079b      	lsls	r3, r3, #30
 80042ce:	d413      	bmi.n	80042f8 <_printf_i+0x23c>
 80042d0:	68e0      	ldr	r0, [r4, #12]
 80042d2:	9b03      	ldr	r3, [sp, #12]
 80042d4:	4298      	cmp	r0, r3
 80042d6:	bfb8      	it	lt
 80042d8:	4618      	movlt	r0, r3
 80042da:	e7a4      	b.n	8004226 <_printf_i+0x16a>
 80042dc:	2301      	movs	r3, #1
 80042de:	4632      	mov	r2, r6
 80042e0:	4649      	mov	r1, r9
 80042e2:	4640      	mov	r0, r8
 80042e4:	47d0      	blx	sl
 80042e6:	3001      	adds	r0, #1
 80042e8:	d09b      	beq.n	8004222 <_printf_i+0x166>
 80042ea:	3501      	adds	r5, #1
 80042ec:	68e3      	ldr	r3, [r4, #12]
 80042ee:	9903      	ldr	r1, [sp, #12]
 80042f0:	1a5b      	subs	r3, r3, r1
 80042f2:	42ab      	cmp	r3, r5
 80042f4:	dcf2      	bgt.n	80042dc <_printf_i+0x220>
 80042f6:	e7eb      	b.n	80042d0 <_printf_i+0x214>
 80042f8:	2500      	movs	r5, #0
 80042fa:	f104 0619 	add.w	r6, r4, #25
 80042fe:	e7f5      	b.n	80042ec <_printf_i+0x230>
 8004300:	080045e9 	.word	0x080045e9
 8004304:	080045fa 	.word	0x080045fa

08004308 <memchr>:
 8004308:	4603      	mov	r3, r0
 800430a:	b510      	push	{r4, lr}
 800430c:	b2c9      	uxtb	r1, r1
 800430e:	4402      	add	r2, r0
 8004310:	4293      	cmp	r3, r2
 8004312:	4618      	mov	r0, r3
 8004314:	d101      	bne.n	800431a <memchr+0x12>
 8004316:	2000      	movs	r0, #0
 8004318:	e003      	b.n	8004322 <memchr+0x1a>
 800431a:	7804      	ldrb	r4, [r0, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	428c      	cmp	r4, r1
 8004320:	d1f6      	bne.n	8004310 <memchr+0x8>
 8004322:	bd10      	pop	{r4, pc}

08004324 <memcpy>:
 8004324:	440a      	add	r2, r1
 8004326:	4291      	cmp	r1, r2
 8004328:	f100 33ff 	add.w	r3, r0, #4294967295
 800432c:	d100      	bne.n	8004330 <memcpy+0xc>
 800432e:	4770      	bx	lr
 8004330:	b510      	push	{r4, lr}
 8004332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004336:	4291      	cmp	r1, r2
 8004338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800433c:	d1f9      	bne.n	8004332 <memcpy+0xe>
 800433e:	bd10      	pop	{r4, pc}

08004340 <memmove>:
 8004340:	4288      	cmp	r0, r1
 8004342:	b510      	push	{r4, lr}
 8004344:	eb01 0402 	add.w	r4, r1, r2
 8004348:	d902      	bls.n	8004350 <memmove+0x10>
 800434a:	4284      	cmp	r4, r0
 800434c:	4623      	mov	r3, r4
 800434e:	d807      	bhi.n	8004360 <memmove+0x20>
 8004350:	1e43      	subs	r3, r0, #1
 8004352:	42a1      	cmp	r1, r4
 8004354:	d008      	beq.n	8004368 <memmove+0x28>
 8004356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800435a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800435e:	e7f8      	b.n	8004352 <memmove+0x12>
 8004360:	4601      	mov	r1, r0
 8004362:	4402      	add	r2, r0
 8004364:	428a      	cmp	r2, r1
 8004366:	d100      	bne.n	800436a <memmove+0x2a>
 8004368:	bd10      	pop	{r4, pc}
 800436a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800436e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004372:	e7f7      	b.n	8004364 <memmove+0x24>

08004374 <_free_r>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4605      	mov	r5, r0
 8004378:	2900      	cmp	r1, #0
 800437a:	d043      	beq.n	8004404 <_free_r+0x90>
 800437c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004380:	1f0c      	subs	r4, r1, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	bfb8      	it	lt
 8004386:	18e4      	addlt	r4, r4, r3
 8004388:	f000 f8d0 	bl	800452c <__malloc_lock>
 800438c:	4a1e      	ldr	r2, [pc, #120]	; (8004408 <_free_r+0x94>)
 800438e:	6813      	ldr	r3, [r2, #0]
 8004390:	4610      	mov	r0, r2
 8004392:	b933      	cbnz	r3, 80043a2 <_free_r+0x2e>
 8004394:	6063      	str	r3, [r4, #4]
 8004396:	6014      	str	r4, [r2, #0]
 8004398:	4628      	mov	r0, r5
 800439a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800439e:	f000 b8cb 	b.w	8004538 <__malloc_unlock>
 80043a2:	42a3      	cmp	r3, r4
 80043a4:	d90a      	bls.n	80043bc <_free_r+0x48>
 80043a6:	6821      	ldr	r1, [r4, #0]
 80043a8:	1862      	adds	r2, r4, r1
 80043aa:	4293      	cmp	r3, r2
 80043ac:	bf01      	itttt	eq
 80043ae:	681a      	ldreq	r2, [r3, #0]
 80043b0:	685b      	ldreq	r3, [r3, #4]
 80043b2:	1852      	addeq	r2, r2, r1
 80043b4:	6022      	streq	r2, [r4, #0]
 80043b6:	6063      	str	r3, [r4, #4]
 80043b8:	6004      	str	r4, [r0, #0]
 80043ba:	e7ed      	b.n	8004398 <_free_r+0x24>
 80043bc:	461a      	mov	r2, r3
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	b10b      	cbz	r3, 80043c6 <_free_r+0x52>
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	d9fa      	bls.n	80043bc <_free_r+0x48>
 80043c6:	6811      	ldr	r1, [r2, #0]
 80043c8:	1850      	adds	r0, r2, r1
 80043ca:	42a0      	cmp	r0, r4
 80043cc:	d10b      	bne.n	80043e6 <_free_r+0x72>
 80043ce:	6820      	ldr	r0, [r4, #0]
 80043d0:	4401      	add	r1, r0
 80043d2:	1850      	adds	r0, r2, r1
 80043d4:	4283      	cmp	r3, r0
 80043d6:	6011      	str	r1, [r2, #0]
 80043d8:	d1de      	bne.n	8004398 <_free_r+0x24>
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4401      	add	r1, r0
 80043e0:	6011      	str	r1, [r2, #0]
 80043e2:	6053      	str	r3, [r2, #4]
 80043e4:	e7d8      	b.n	8004398 <_free_r+0x24>
 80043e6:	d902      	bls.n	80043ee <_free_r+0x7a>
 80043e8:	230c      	movs	r3, #12
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	e7d4      	b.n	8004398 <_free_r+0x24>
 80043ee:	6820      	ldr	r0, [r4, #0]
 80043f0:	1821      	adds	r1, r4, r0
 80043f2:	428b      	cmp	r3, r1
 80043f4:	bf01      	itttt	eq
 80043f6:	6819      	ldreq	r1, [r3, #0]
 80043f8:	685b      	ldreq	r3, [r3, #4]
 80043fa:	1809      	addeq	r1, r1, r0
 80043fc:	6021      	streq	r1, [r4, #0]
 80043fe:	6063      	str	r3, [r4, #4]
 8004400:	6054      	str	r4, [r2, #4]
 8004402:	e7c9      	b.n	8004398 <_free_r+0x24>
 8004404:	bd38      	pop	{r3, r4, r5, pc}
 8004406:	bf00      	nop
 8004408:	2000010c 	.word	0x2000010c

0800440c <_malloc_r>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	1ccd      	adds	r5, r1, #3
 8004410:	f025 0503 	bic.w	r5, r5, #3
 8004414:	3508      	adds	r5, #8
 8004416:	2d0c      	cmp	r5, #12
 8004418:	bf38      	it	cc
 800441a:	250c      	movcc	r5, #12
 800441c:	2d00      	cmp	r5, #0
 800441e:	4606      	mov	r6, r0
 8004420:	db01      	blt.n	8004426 <_malloc_r+0x1a>
 8004422:	42a9      	cmp	r1, r5
 8004424:	d903      	bls.n	800442e <_malloc_r+0x22>
 8004426:	230c      	movs	r3, #12
 8004428:	6033      	str	r3, [r6, #0]
 800442a:	2000      	movs	r0, #0
 800442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800442e:	f000 f87d 	bl	800452c <__malloc_lock>
 8004432:	4921      	ldr	r1, [pc, #132]	; (80044b8 <_malloc_r+0xac>)
 8004434:	680a      	ldr	r2, [r1, #0]
 8004436:	4614      	mov	r4, r2
 8004438:	b99c      	cbnz	r4, 8004462 <_malloc_r+0x56>
 800443a:	4f20      	ldr	r7, [pc, #128]	; (80044bc <_malloc_r+0xb0>)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	b923      	cbnz	r3, 800444a <_malloc_r+0x3e>
 8004440:	4621      	mov	r1, r4
 8004442:	4630      	mov	r0, r6
 8004444:	f000 f862 	bl	800450c <_sbrk_r>
 8004448:	6038      	str	r0, [r7, #0]
 800444a:	4629      	mov	r1, r5
 800444c:	4630      	mov	r0, r6
 800444e:	f000 f85d 	bl	800450c <_sbrk_r>
 8004452:	1c43      	adds	r3, r0, #1
 8004454:	d123      	bne.n	800449e <_malloc_r+0x92>
 8004456:	230c      	movs	r3, #12
 8004458:	4630      	mov	r0, r6
 800445a:	6033      	str	r3, [r6, #0]
 800445c:	f000 f86c 	bl	8004538 <__malloc_unlock>
 8004460:	e7e3      	b.n	800442a <_malloc_r+0x1e>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	1b5b      	subs	r3, r3, r5
 8004466:	d417      	bmi.n	8004498 <_malloc_r+0x8c>
 8004468:	2b0b      	cmp	r3, #11
 800446a:	d903      	bls.n	8004474 <_malloc_r+0x68>
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	441c      	add	r4, r3
 8004470:	6025      	str	r5, [r4, #0]
 8004472:	e004      	b.n	800447e <_malloc_r+0x72>
 8004474:	6863      	ldr	r3, [r4, #4]
 8004476:	42a2      	cmp	r2, r4
 8004478:	bf0c      	ite	eq
 800447a:	600b      	streq	r3, [r1, #0]
 800447c:	6053      	strne	r3, [r2, #4]
 800447e:	4630      	mov	r0, r6
 8004480:	f000 f85a 	bl	8004538 <__malloc_unlock>
 8004484:	f104 000b 	add.w	r0, r4, #11
 8004488:	1d23      	adds	r3, r4, #4
 800448a:	f020 0007 	bic.w	r0, r0, #7
 800448e:	1ac2      	subs	r2, r0, r3
 8004490:	d0cc      	beq.n	800442c <_malloc_r+0x20>
 8004492:	1a1b      	subs	r3, r3, r0
 8004494:	50a3      	str	r3, [r4, r2]
 8004496:	e7c9      	b.n	800442c <_malloc_r+0x20>
 8004498:	4622      	mov	r2, r4
 800449a:	6864      	ldr	r4, [r4, #4]
 800449c:	e7cc      	b.n	8004438 <_malloc_r+0x2c>
 800449e:	1cc4      	adds	r4, r0, #3
 80044a0:	f024 0403 	bic.w	r4, r4, #3
 80044a4:	42a0      	cmp	r0, r4
 80044a6:	d0e3      	beq.n	8004470 <_malloc_r+0x64>
 80044a8:	1a21      	subs	r1, r4, r0
 80044aa:	4630      	mov	r0, r6
 80044ac:	f000 f82e 	bl	800450c <_sbrk_r>
 80044b0:	3001      	adds	r0, #1
 80044b2:	d1dd      	bne.n	8004470 <_malloc_r+0x64>
 80044b4:	e7cf      	b.n	8004456 <_malloc_r+0x4a>
 80044b6:	bf00      	nop
 80044b8:	2000010c 	.word	0x2000010c
 80044bc:	20000110 	.word	0x20000110

080044c0 <_realloc_r>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	4607      	mov	r7, r0
 80044c4:	4614      	mov	r4, r2
 80044c6:	460e      	mov	r6, r1
 80044c8:	b921      	cbnz	r1, 80044d4 <_realloc_r+0x14>
 80044ca:	4611      	mov	r1, r2
 80044cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044d0:	f7ff bf9c 	b.w	800440c <_malloc_r>
 80044d4:	b922      	cbnz	r2, 80044e0 <_realloc_r+0x20>
 80044d6:	f7ff ff4d 	bl	8004374 <_free_r>
 80044da:	4625      	mov	r5, r4
 80044dc:	4628      	mov	r0, r5
 80044de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e0:	f000 f830 	bl	8004544 <_malloc_usable_size_r>
 80044e4:	42a0      	cmp	r0, r4
 80044e6:	d20f      	bcs.n	8004508 <_realloc_r+0x48>
 80044e8:	4621      	mov	r1, r4
 80044ea:	4638      	mov	r0, r7
 80044ec:	f7ff ff8e 	bl	800440c <_malloc_r>
 80044f0:	4605      	mov	r5, r0
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d0f2      	beq.n	80044dc <_realloc_r+0x1c>
 80044f6:	4631      	mov	r1, r6
 80044f8:	4622      	mov	r2, r4
 80044fa:	f7ff ff13 	bl	8004324 <memcpy>
 80044fe:	4631      	mov	r1, r6
 8004500:	4638      	mov	r0, r7
 8004502:	f7ff ff37 	bl	8004374 <_free_r>
 8004506:	e7e9      	b.n	80044dc <_realloc_r+0x1c>
 8004508:	4635      	mov	r5, r6
 800450a:	e7e7      	b.n	80044dc <_realloc_r+0x1c>

0800450c <_sbrk_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	2300      	movs	r3, #0
 8004510:	4d05      	ldr	r5, [pc, #20]	; (8004528 <_sbrk_r+0x1c>)
 8004512:	4604      	mov	r4, r0
 8004514:	4608      	mov	r0, r1
 8004516:	602b      	str	r3, [r5, #0]
 8004518:	f7fc fddc 	bl	80010d4 <_sbrk>
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	d102      	bne.n	8004526 <_sbrk_r+0x1a>
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	b103      	cbz	r3, 8004526 <_sbrk_r+0x1a>
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	20000208 	.word	0x20000208

0800452c <__malloc_lock>:
 800452c:	4801      	ldr	r0, [pc, #4]	; (8004534 <__malloc_lock+0x8>)
 800452e:	f000 b811 	b.w	8004554 <__retarget_lock_acquire_recursive>
 8004532:	bf00      	nop
 8004534:	20000210 	.word	0x20000210

08004538 <__malloc_unlock>:
 8004538:	4801      	ldr	r0, [pc, #4]	; (8004540 <__malloc_unlock+0x8>)
 800453a:	f000 b80c 	b.w	8004556 <__retarget_lock_release_recursive>
 800453e:	bf00      	nop
 8004540:	20000210 	.word	0x20000210

08004544 <_malloc_usable_size_r>:
 8004544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004548:	1f18      	subs	r0, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	bfbc      	itt	lt
 800454e:	580b      	ldrlt	r3, [r1, r0]
 8004550:	18c0      	addlt	r0, r0, r3
 8004552:	4770      	bx	lr

08004554 <__retarget_lock_acquire_recursive>:
 8004554:	4770      	bx	lr

08004556 <__retarget_lock_release_recursive>:
 8004556:	4770      	bx	lr

08004558 <_init>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	bf00      	nop
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr

08004564 <_fini>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	bf00      	nop
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr
